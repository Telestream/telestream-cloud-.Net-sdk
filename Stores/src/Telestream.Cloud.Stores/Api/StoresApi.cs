/* 
 * API
 *
 * API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Telestream.Cloud.Stores.Client;
using Telestream.Cloud.Stores.Model;

namespace Telestream.Cloud.Stores.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStoresApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeBody"></param>
        /// <returns>Store</returns>
        Store CreateStore (StoreBody storeBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeBody"></param>
        /// <returns>ApiResponse of Store</returns>
        ApiResponse<Store> CreateStoreWithHttpInfo (StoreBody storeBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns></returns>
        void CreateStoreClientLink (string storeId, string serviceName, string serviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateStoreClientLinkWithHttpInfo (string storeId, string serviceName, string serviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watchRuleBody"></param>
        /// <returns>WatchRule</returns>
        WatchRule CreateWatchRule (WatchRule watchRuleBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watchRuleBody"></param>
        /// <returns>ApiResponse of WatchRule</returns>
        ApiResponse<WatchRule> CreateWatchRuleWithHttpInfo (WatchRule watchRuleBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>Store</returns>
        Store DeleteStore (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>ApiResponse of Store</returns>
        ApiResponse<Store> DeleteStoreWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns></returns>
        void DeleteStoreClientLink (string storeId, string serviceName, string serviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStoreClientLinkWithHttpInfo (string storeId, string serviceName, string serviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a resource</param>
        /// <returns>WatchRule</returns>
        WatchRule DeleteWatchRule (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a resource</param>
        /// <returns>ApiResponse of WatchRule</returns>
        ApiResponse<WatchRule> DeleteWatchRuleWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="path">an path to a file</param>
        /// <param name="expiresIn">expiration time in seconds</param>
        /// <returns>ObjectURL</returns>
        ObjectURL GetObjectUrl (string id, string path, string expiresIn);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="path">an path to a file</param>
        /// <param name="expiresIn">expiration time in seconds</param>
        /// <returns>ApiResponse of ObjectURL</returns>
        ApiResponse<ObjectURL> GetObjectUrlWithHttpInfo (string id, string path, string expiresIn);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>Store</returns>
        Store GetStore (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>ApiResponse of Store</returns>
        ApiResponse<Store> GetStoreWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetStoreIdsForClient (string serviceName, string serviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetStoreIdsForClientWithHttpInfo (string serviceName, string serviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">filter stores by bucket_name (optional)</param>
        /// <param name="provider">filter stores by storage provider (optional)</param>
        /// <returns>List&lt;Store&gt;</returns>
        List<Store> GetStores (string bucketName = null, string provider = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">filter stores by bucket_name (optional)</param>
        /// <param name="provider">filter stores by storage provider (optional)</param>
        /// <returns>ApiResponse of List&lt;Store&gt;</returns>
        ApiResponse<List<Store>> GetStoresWithHttpInfo (string bucketName = null, string provider = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns>WatchRule</returns>
        WatchRule GetWatchRule (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns>ApiResponse of WatchRule</returns>
        ApiResponse<WatchRule> GetWatchRuleWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">filter watch rules by service_id (optional)</param>
        /// <param name="storeId">filter watch rules by store_id (optional)</param>
        /// <returns>List&lt;WatchRule&gt;</returns>
        List<WatchRule> GetWatchRules (string serviceId = null, string storeId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">filter watch rules by service_id (optional)</param>
        /// <param name="storeId">filter watch rules by store_id (optional)</param>
        /// <returns>ApiResponse of List&lt;WatchRule&gt;</returns>
        ApiResponse<List<WatchRule>> GetWatchRulesWithHttpInfo (string serviceId = null, string storeId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns></returns>
        void SyncWatchRule (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SyncWatchRuleWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="storeBody"></param>
        /// <returns>Store</returns>
        Store UpdateStore (string id, StoreBody storeBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="storeBody"></param>
        /// <returns>ApiResponse of Store</returns>
        ApiResponse<Store> UpdateStoreWithHttpInfo (string id, StoreBody storeBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <param name="watchRuleBody"></param>
        /// <returns>WatchRule</returns>
        WatchRule UpdateWatchRule (string id, WatchRule watchRuleBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <param name="watchRuleBody"></param>
        /// <returns>ApiResponse of WatchRule</returns>
        ApiResponse<WatchRule> UpdateWatchRuleWithHttpInfo (string id, WatchRule watchRuleBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateBucketBody"></param>
        /// <returns>ValidateBucketResponse</returns>
        ValidateBucketResponse ValidateBucket (ValidateBucketBody validateBucketBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateBucketBody"></param>
        /// <returns>ApiResponse of ValidateBucketResponse</returns>
        ApiResponse<ValidateBucketResponse> ValidateBucketWithHttpInfo (ValidateBucketBody validateBucketBody);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeBody"></param>
        /// <returns>Task of Store</returns>
        System.Threading.Tasks.Task<Store> CreateStoreAsync (StoreBody storeBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeBody"></param>
        /// <returns>Task of ApiResponse (Store)</returns>
        System.Threading.Tasks.Task<ApiResponse<Store>> CreateStoreAsyncWithHttpInfo (StoreBody storeBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateStoreClientLinkAsync (string storeId, string serviceName, string serviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateStoreClientLinkAsyncWithHttpInfo (string storeId, string serviceName, string serviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watchRuleBody"></param>
        /// <returns>Task of WatchRule</returns>
        System.Threading.Tasks.Task<WatchRule> CreateWatchRuleAsync (WatchRule watchRuleBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watchRuleBody"></param>
        /// <returns>Task of ApiResponse (WatchRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<WatchRule>> CreateWatchRuleAsyncWithHttpInfo (WatchRule watchRuleBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>Task of Store</returns>
        System.Threading.Tasks.Task<Store> DeleteStoreAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        System.Threading.Tasks.Task<ApiResponse<Store>> DeleteStoreAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStoreClientLinkAsync (string storeId, string serviceName, string serviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStoreClientLinkAsyncWithHttpInfo (string storeId, string serviceName, string serviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a resource</param>
        /// <returns>Task of WatchRule</returns>
        System.Threading.Tasks.Task<WatchRule> DeleteWatchRuleAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a resource</param>
        /// <returns>Task of ApiResponse (WatchRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<WatchRule>> DeleteWatchRuleAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="path">an path to a file</param>
        /// <param name="expiresIn">expiration time in seconds</param>
        /// <returns>Task of ObjectURL</returns>
        System.Threading.Tasks.Task<ObjectURL> GetObjectUrlAsync (string id, string path, string expiresIn);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="path">an path to a file</param>
        /// <param name="expiresIn">expiration time in seconds</param>
        /// <returns>Task of ApiResponse (ObjectURL)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectURL>> GetObjectUrlAsyncWithHttpInfo (string id, string path, string expiresIn);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>Task of Store</returns>
        System.Threading.Tasks.Task<Store> GetStoreAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        System.Threading.Tasks.Task<ApiResponse<Store>> GetStoreAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetStoreIdsForClientAsync (string serviceName, string serviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetStoreIdsForClientAsyncWithHttpInfo (string serviceName, string serviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">filter stores by bucket_name (optional)</param>
        /// <param name="provider">filter stores by storage provider (optional)</param>
        /// <returns>Task of List&lt;Store&gt;</returns>
        System.Threading.Tasks.Task<List<Store>> GetStoresAsync (string bucketName = null, string provider = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">filter stores by bucket_name (optional)</param>
        /// <param name="provider">filter stores by storage provider (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Store&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Store>>> GetStoresAsyncWithHttpInfo (string bucketName = null, string provider = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns>Task of WatchRule</returns>
        System.Threading.Tasks.Task<WatchRule> GetWatchRuleAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns>Task of ApiResponse (WatchRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<WatchRule>> GetWatchRuleAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">filter watch rules by service_id (optional)</param>
        /// <param name="storeId">filter watch rules by store_id (optional)</param>
        /// <returns>Task of List&lt;WatchRule&gt;</returns>
        System.Threading.Tasks.Task<List<WatchRule>> GetWatchRulesAsync (string serviceId = null, string storeId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">filter watch rules by service_id (optional)</param>
        /// <param name="storeId">filter watch rules by store_id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WatchRule&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WatchRule>>> GetWatchRulesAsyncWithHttpInfo (string serviceId = null, string storeId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SyncWatchRuleAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SyncWatchRuleAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="storeBody"></param>
        /// <returns>Task of Store</returns>
        System.Threading.Tasks.Task<Store> UpdateStoreAsync (string id, StoreBody storeBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="storeBody"></param>
        /// <returns>Task of ApiResponse (Store)</returns>
        System.Threading.Tasks.Task<ApiResponse<Store>> UpdateStoreAsyncWithHttpInfo (string id, StoreBody storeBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <param name="watchRuleBody"></param>
        /// <returns>Task of WatchRule</returns>
        System.Threading.Tasks.Task<WatchRule> UpdateWatchRuleAsync (string id, WatchRule watchRuleBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <param name="watchRuleBody"></param>
        /// <returns>Task of ApiResponse (WatchRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<WatchRule>> UpdateWatchRuleAsyncWithHttpInfo (string id, WatchRule watchRuleBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateBucketBody"></param>
        /// <returns>Task of ValidateBucketResponse</returns>
        System.Threading.Tasks.Task<ValidateBucketResponse> ValidateBucketAsync (ValidateBucketBody validateBucketBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateBucketBody"></param>
        /// <returns>Task of ApiResponse (ValidateBucketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateBucketResponse>> ValidateBucketAsyncWithHttpInfo (ValidateBucketBody validateBucketBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StoresApi : IStoresApi
    {
        private Telestream.Cloud.Stores.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StoresApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StoresApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Telestream.Cloud.Stores.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StoresApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StoresApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Telestream.Cloud.Stores.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Telestream.Cloud.Stores.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeBody"></param>
        /// <returns>Store</returns>
        public Store CreateStore (StoreBody storeBody)
        {
             ApiResponse<Store> localVarResponse = CreateStoreWithHttpInfo(storeBody);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeBody"></param>
        /// <returns>ApiResponse of Store</returns>
        public ApiResponse< Store > CreateStoreWithHttpInfo (StoreBody storeBody)
        {
            // verify the required parameter 'storeBody' is set
            if (storeBody == null)
                throw new ApiException(400, "Missing required parameter 'storeBody' when calling StoresApi->CreateStore");

            var localVarPath = "./stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeBody != null && storeBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(storeBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = storeBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Store>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Store) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Store)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeBody"></param>
        /// <returns>Task of Store</returns>
        public async System.Threading.Tasks.Task<Store> CreateStoreAsync (StoreBody storeBody)
        {
             ApiResponse<Store> localVarResponse = await CreateStoreAsyncWithHttpInfo(storeBody);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeBody"></param>
        /// <returns>Task of ApiResponse (Store)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Store>> CreateStoreAsyncWithHttpInfo (StoreBody storeBody)
        {
            // verify the required parameter 'storeBody' is set
            if (storeBody == null)
                throw new ApiException(400, "Missing required parameter 'storeBody' when calling StoresApi->CreateStore");

            var localVarPath = "./stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeBody != null && storeBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(storeBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = storeBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Store>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Store) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Store)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns></returns>
        public void CreateStoreClientLink (string storeId, string serviceName, string serviceId)
        {
             CreateStoreClientLinkWithHttpInfo(storeId, serviceName, serviceId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateStoreClientLinkWithHttpInfo (string storeId, string serviceName, string serviceId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->CreateStoreClientLink");
            // verify the required parameter 'serviceName' is set
            if (serviceName == null)
                throw new ApiException(400, "Missing required parameter 'serviceName' when calling StoresApi->CreateStoreClientLink");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling StoresApi->CreateStoreClientLink");

            var localVarPath = "./stores/{store_id}/service/{service_name}/id/{service_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("store_id", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (serviceName != null) localVarPathParams.Add("service_name", Configuration.ApiClient.ParameterToString(serviceName)); // path parameter
            if (serviceId != null) localVarPathParams.Add("service_id", Configuration.ApiClient.ParameterToString(serviceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStoreClientLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateStoreClientLinkAsync (string storeId, string serviceName, string serviceId)
        {
             await CreateStoreClientLinkAsyncWithHttpInfo(storeId, serviceName, serviceId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateStoreClientLinkAsyncWithHttpInfo (string storeId, string serviceName, string serviceId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->CreateStoreClientLink");
            // verify the required parameter 'serviceName' is set
            if (serviceName == null)
                throw new ApiException(400, "Missing required parameter 'serviceName' when calling StoresApi->CreateStoreClientLink");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling StoresApi->CreateStoreClientLink");

            var localVarPath = "./stores/{store_id}/service/{service_name}/id/{service_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("store_id", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (serviceName != null) localVarPathParams.Add("service_name", Configuration.ApiClient.ParameterToString(serviceName)); // path parameter
            if (serviceId != null) localVarPathParams.Add("service_id", Configuration.ApiClient.ParameterToString(serviceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStoreClientLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watchRuleBody"></param>
        /// <returns>WatchRule</returns>
        public WatchRule CreateWatchRule (WatchRule watchRuleBody)
        {
             ApiResponse<WatchRule> localVarResponse = CreateWatchRuleWithHttpInfo(watchRuleBody);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watchRuleBody"></param>
        /// <returns>ApiResponse of WatchRule</returns>
        public ApiResponse< WatchRule > CreateWatchRuleWithHttpInfo (WatchRule watchRuleBody)
        {
            // verify the required parameter 'watchRuleBody' is set
            if (watchRuleBody == null)
                throw new ApiException(400, "Missing required parameter 'watchRuleBody' when calling StoresApi->CreateWatchRule");

            var localVarPath = "./watch_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (watchRuleBody != null && watchRuleBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(watchRuleBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = watchRuleBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWatchRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WatchRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WatchRule) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WatchRule)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watchRuleBody"></param>
        /// <returns>Task of WatchRule</returns>
        public async System.Threading.Tasks.Task<WatchRule> CreateWatchRuleAsync (WatchRule watchRuleBody)
        {
             ApiResponse<WatchRule> localVarResponse = await CreateWatchRuleAsyncWithHttpInfo(watchRuleBody);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watchRuleBody"></param>
        /// <returns>Task of ApiResponse (WatchRule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WatchRule>> CreateWatchRuleAsyncWithHttpInfo (WatchRule watchRuleBody)
        {
            // verify the required parameter 'watchRuleBody' is set
            if (watchRuleBody == null)
                throw new ApiException(400, "Missing required parameter 'watchRuleBody' when calling StoresApi->CreateWatchRule");

            var localVarPath = "./watch_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (watchRuleBody != null && watchRuleBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(watchRuleBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = watchRuleBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWatchRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WatchRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WatchRule) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WatchRule)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>Store</returns>
        public Store DeleteStore (string id)
        {
             ApiResponse<Store> localVarResponse = DeleteStoreWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>ApiResponse of Store</returns>
        public ApiResponse< Store > DeleteStoreWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->DeleteStore");

            var localVarPath = "./stores/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Store>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Store) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Store)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>Task of Store</returns>
        public async System.Threading.Tasks.Task<Store> DeleteStoreAsync (string id)
        {
             ApiResponse<Store> localVarResponse = await DeleteStoreAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Store>> DeleteStoreAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->DeleteStore");

            var localVarPath = "./stores/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Store>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Store) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Store)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns></returns>
        public void DeleteStoreClientLink (string storeId, string serviceName, string serviceId)
        {
             DeleteStoreClientLinkWithHttpInfo(storeId, serviceName, serviceId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteStoreClientLinkWithHttpInfo (string storeId, string serviceName, string serviceId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->DeleteStoreClientLink");
            // verify the required parameter 'serviceName' is set
            if (serviceName == null)
                throw new ApiException(400, "Missing required parameter 'serviceName' when calling StoresApi->DeleteStoreClientLink");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling StoresApi->DeleteStoreClientLink");

            var localVarPath = "./stores/{store_id}/service/{service_name}/id/{service_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("store_id", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (serviceName != null) localVarPathParams.Add("service_name", Configuration.ApiClient.ParameterToString(serviceName)); // path parameter
            if (serviceId != null) localVarPathParams.Add("service_id", Configuration.ApiClient.ParameterToString(serviceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStoreClientLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStoreClientLinkAsync (string storeId, string serviceName, string serviceId)
        {
             await DeleteStoreClientLinkAsyncWithHttpInfo(storeId, serviceName, serviceId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">an id of a store</param>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStoreClientLinkAsyncWithHttpInfo (string storeId, string serviceName, string serviceId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling StoresApi->DeleteStoreClientLink");
            // verify the required parameter 'serviceName' is set
            if (serviceName == null)
                throw new ApiException(400, "Missing required parameter 'serviceName' when calling StoresApi->DeleteStoreClientLink");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling StoresApi->DeleteStoreClientLink");

            var localVarPath = "./stores/{store_id}/service/{service_name}/id/{service_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarPathParams.Add("store_id", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (serviceName != null) localVarPathParams.Add("service_name", Configuration.ApiClient.ParameterToString(serviceName)); // path parameter
            if (serviceId != null) localVarPathParams.Add("service_id", Configuration.ApiClient.ParameterToString(serviceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStoreClientLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a resource</param>
        /// <returns>WatchRule</returns>
        public WatchRule DeleteWatchRule (string id)
        {
             ApiResponse<WatchRule> localVarResponse = DeleteWatchRuleWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a resource</param>
        /// <returns>ApiResponse of WatchRule</returns>
        public ApiResponse< WatchRule > DeleteWatchRuleWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->DeleteWatchRule");

            var localVarPath = "./watch_rules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWatchRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WatchRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WatchRule) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WatchRule)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a resource</param>
        /// <returns>Task of WatchRule</returns>
        public async System.Threading.Tasks.Task<WatchRule> DeleteWatchRuleAsync (string id)
        {
             ApiResponse<WatchRule> localVarResponse = await DeleteWatchRuleAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a resource</param>
        /// <returns>Task of ApiResponse (WatchRule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WatchRule>> DeleteWatchRuleAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->DeleteWatchRule");

            var localVarPath = "./watch_rules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWatchRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WatchRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WatchRule) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WatchRule)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="path">an path to a file</param>
        /// <param name="expiresIn">expiration time in seconds</param>
        /// <returns>ObjectURL</returns>
        public ObjectURL GetObjectUrl (string id, string path, string expiresIn)
        {
             ApiResponse<ObjectURL> localVarResponse = GetObjectUrlWithHttpInfo(id, path, expiresIn);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="path">an path to a file</param>
        /// <param name="expiresIn">expiration time in seconds</param>
        /// <returns>ApiResponse of ObjectURL</returns>
        public ApiResponse< ObjectURL > GetObjectUrlWithHttpInfo (string id, string path, string expiresIn)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->GetObjectUrl");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling StoresApi->GetObjectUrl");
            // verify the required parameter 'expiresIn' is set
            if (expiresIn == null)
                throw new ApiException(400, "Missing required parameter 'expiresIn' when calling StoresApi->GetObjectUrl");

            var localVarPath = "./stores/{id}/object_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (path != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (expiresIn != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expires_in", expiresIn)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetObjectUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ObjectURL>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ObjectURL) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectURL)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="path">an path to a file</param>
        /// <param name="expiresIn">expiration time in seconds</param>
        /// <returns>Task of ObjectURL</returns>
        public async System.Threading.Tasks.Task<ObjectURL> GetObjectUrlAsync (string id, string path, string expiresIn)
        {
             ApiResponse<ObjectURL> localVarResponse = await GetObjectUrlAsyncWithHttpInfo(id, path, expiresIn);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="path">an path to a file</param>
        /// <param name="expiresIn">expiration time in seconds</param>
        /// <returns>Task of ApiResponse (ObjectURL)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ObjectURL>> GetObjectUrlAsyncWithHttpInfo (string id, string path, string expiresIn)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->GetObjectUrl");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling StoresApi->GetObjectUrl");
            // verify the required parameter 'expiresIn' is set
            if (expiresIn == null)
                throw new ApiException(400, "Missing required parameter 'expiresIn' when calling StoresApi->GetObjectUrl");

            var localVarPath = "./stores/{id}/object_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (path != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (expiresIn != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expires_in", expiresIn)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetObjectUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ObjectURL>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ObjectURL) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectURL)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>Store</returns>
        public Store GetStore (string id)
        {
             ApiResponse<Store> localVarResponse = GetStoreWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>ApiResponse of Store</returns>
        public ApiResponse< Store > GetStoreWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->GetStore");

            var localVarPath = "./stores/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Store>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Store) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Store)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>Task of Store</returns>
        public async System.Threading.Tasks.Task<Store> GetStoreAsync (string id)
        {
             ApiResponse<Store> localVarResponse = await GetStoreAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Store>> GetStoreAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->GetStore");

            var localVarPath = "./stores/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Store>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Store) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Store)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetStoreIdsForClient (string serviceName, string serviceId)
        {
             ApiResponse<List<string>> localVarResponse = GetStoreIdsForClientWithHttpInfo(serviceName, serviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetStoreIdsForClientWithHttpInfo (string serviceName, string serviceId)
        {
            // verify the required parameter 'serviceName' is set
            if (serviceName == null)
                throw new ApiException(400, "Missing required parameter 'serviceName' when calling StoresApi->GetStoreIdsForClient");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling StoresApi->GetStoreIdsForClient");

            var localVarPath = "./stores/service/{service_name}/id/{service_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceName != null) localVarPathParams.Add("service_name", Configuration.ApiClient.ParameterToString(serviceName)); // path parameter
            if (serviceId != null) localVarPathParams.Add("service_id", Configuration.ApiClient.ParameterToString(serviceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreIdsForClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetStoreIdsForClientAsync (string serviceName, string serviceId)
        {
             ApiResponse<List<string>> localVarResponse = await GetStoreIdsForClientAsyncWithHttpInfo(serviceName, serviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceName">a name of a client service</param>
        /// <param name="serviceId">a service id of a resource that queries for its stores</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetStoreIdsForClientAsyncWithHttpInfo (string serviceName, string serviceId)
        {
            // verify the required parameter 'serviceName' is set
            if (serviceName == null)
                throw new ApiException(400, "Missing required parameter 'serviceName' when calling StoresApi->GetStoreIdsForClient");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling StoresApi->GetStoreIdsForClient");

            var localVarPath = "./stores/service/{service_name}/id/{service_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceName != null) localVarPathParams.Add("service_name", Configuration.ApiClient.ParameterToString(serviceName)); // path parameter
            if (serviceId != null) localVarPathParams.Add("service_id", Configuration.ApiClient.ParameterToString(serviceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreIdsForClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">filter stores by bucket_name (optional)</param>
        /// <param name="provider">filter stores by storage provider (optional)</param>
        /// <returns>List&lt;Store&gt;</returns>
        public List<Store> GetStores (string bucketName = null, string provider = null)
        {
             ApiResponse<List<Store>> localVarResponse = GetStoresWithHttpInfo(bucketName, provider);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">filter stores by bucket_name (optional)</param>
        /// <param name="provider">filter stores by storage provider (optional)</param>
        /// <returns>ApiResponse of List&lt;Store&gt;</returns>
        public ApiResponse< List<Store> > GetStoresWithHttpInfo (string bucketName = null, string provider = null)
        {

            var localVarPath = "./stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bucket_name", bucketName)); // query parameter
            if (provider != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "provider", provider)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Store>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Store>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Store>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">filter stores by bucket_name (optional)</param>
        /// <param name="provider">filter stores by storage provider (optional)</param>
        /// <returns>Task of List&lt;Store&gt;</returns>
        public async System.Threading.Tasks.Task<List<Store>> GetStoresAsync (string bucketName = null, string provider = null)
        {
             ApiResponse<List<Store>> localVarResponse = await GetStoresAsyncWithHttpInfo(bucketName, provider);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">filter stores by bucket_name (optional)</param>
        /// <param name="provider">filter stores by storage provider (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Store&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Store>>> GetStoresAsyncWithHttpInfo (string bucketName = null, string provider = null)
        {

            var localVarPath = "./stores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bucket_name", bucketName)); // query parameter
            if (provider != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "provider", provider)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Store>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Store>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Store>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns>WatchRule</returns>
        public WatchRule GetWatchRule (string id)
        {
             ApiResponse<WatchRule> localVarResponse = GetWatchRuleWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns>ApiResponse of WatchRule</returns>
        public ApiResponse< WatchRule > GetWatchRuleWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->GetWatchRule");

            var localVarPath = "./watch_rules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWatchRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WatchRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WatchRule) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WatchRule)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns>Task of WatchRule</returns>
        public async System.Threading.Tasks.Task<WatchRule> GetWatchRuleAsync (string id)
        {
             ApiResponse<WatchRule> localVarResponse = await GetWatchRuleAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns>Task of ApiResponse (WatchRule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WatchRule>> GetWatchRuleAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->GetWatchRule");

            var localVarPath = "./watch_rules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWatchRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WatchRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WatchRule) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WatchRule)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">filter watch rules by service_id (optional)</param>
        /// <param name="storeId">filter watch rules by store_id (optional)</param>
        /// <returns>List&lt;WatchRule&gt;</returns>
        public List<WatchRule> GetWatchRules (string serviceId = null, string storeId = null)
        {
             ApiResponse<List<WatchRule>> localVarResponse = GetWatchRulesWithHttpInfo(serviceId, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">filter watch rules by service_id (optional)</param>
        /// <param name="storeId">filter watch rules by store_id (optional)</param>
        /// <returns>ApiResponse of List&lt;WatchRule&gt;</returns>
        public ApiResponse< List<WatchRule> > GetWatchRulesWithHttpInfo (string serviceId = null, string storeId = null)
        {

            var localVarPath = "./watch_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "service_id", serviceId)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "store_id", storeId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWatchRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WatchRule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<WatchRule>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WatchRule>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">filter watch rules by service_id (optional)</param>
        /// <param name="storeId">filter watch rules by store_id (optional)</param>
        /// <returns>Task of List&lt;WatchRule&gt;</returns>
        public async System.Threading.Tasks.Task<List<WatchRule>> GetWatchRulesAsync (string serviceId = null, string storeId = null)
        {
             ApiResponse<List<WatchRule>> localVarResponse = await GetWatchRulesAsyncWithHttpInfo(serviceId, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">filter watch rules by service_id (optional)</param>
        /// <param name="storeId">filter watch rules by store_id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WatchRule&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WatchRule>>> GetWatchRulesAsyncWithHttpInfo (string serviceId = null, string storeId = null)
        {

            var localVarPath = "./watch_rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "service_id", serviceId)); // query parameter
            if (storeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "store_id", storeId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWatchRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WatchRule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<WatchRule>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WatchRule>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns></returns>
        public void SyncWatchRule (string id)
        {
             SyncWatchRuleWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SyncWatchRuleWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->SyncWatchRule");

            var localVarPath = "./watch_rules/{id}/sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncWatchRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SyncWatchRuleAsync (string id)
        {
             await SyncWatchRuleAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SyncWatchRuleAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->SyncWatchRule");

            var localVarPath = "./watch_rules/{id}/sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncWatchRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="storeBody"></param>
        /// <returns>Store</returns>
        public Store UpdateStore (string id, StoreBody storeBody)
        {
             ApiResponse<Store> localVarResponse = UpdateStoreWithHttpInfo(id, storeBody);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="storeBody"></param>
        /// <returns>ApiResponse of Store</returns>
        public ApiResponse< Store > UpdateStoreWithHttpInfo (string id, StoreBody storeBody)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->UpdateStore");
            // verify the required parameter 'storeBody' is set
            if (storeBody == null)
                throw new ApiException(400, "Missing required parameter 'storeBody' when calling StoresApi->UpdateStore");

            var localVarPath = "./stores/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (storeBody != null && storeBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(storeBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = storeBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Store>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Store) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Store)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="storeBody"></param>
        /// <returns>Task of Store</returns>
        public async System.Threading.Tasks.Task<Store> UpdateStoreAsync (string id, StoreBody storeBody)
        {
             ApiResponse<Store> localVarResponse = await UpdateStoreAsyncWithHttpInfo(id, storeBody);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a store</param>
        /// <param name="storeBody"></param>
        /// <returns>Task of ApiResponse (Store)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Store>> UpdateStoreAsyncWithHttpInfo (string id, StoreBody storeBody)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->UpdateStore");
            // verify the required parameter 'storeBody' is set
            if (storeBody == null)
                throw new ApiException(400, "Missing required parameter 'storeBody' when calling StoresApi->UpdateStore");

            var localVarPath = "./stores/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (storeBody != null && storeBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(storeBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = storeBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Store>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Store) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Store)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <param name="watchRuleBody"></param>
        /// <returns>WatchRule</returns>
        public WatchRule UpdateWatchRule (string id, WatchRule watchRuleBody)
        {
             ApiResponse<WatchRule> localVarResponse = UpdateWatchRuleWithHttpInfo(id, watchRuleBody);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <param name="watchRuleBody"></param>
        /// <returns>ApiResponse of WatchRule</returns>
        public ApiResponse< WatchRule > UpdateWatchRuleWithHttpInfo (string id, WatchRule watchRuleBody)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->UpdateWatchRule");
            // verify the required parameter 'watchRuleBody' is set
            if (watchRuleBody == null)
                throw new ApiException(400, "Missing required parameter 'watchRuleBody' when calling StoresApi->UpdateWatchRule");

            var localVarPath = "./watch_rules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (watchRuleBody != null && watchRuleBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(watchRuleBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = watchRuleBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWatchRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WatchRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WatchRule) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WatchRule)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <param name="watchRuleBody"></param>
        /// <returns>Task of WatchRule</returns>
        public async System.Threading.Tasks.Task<WatchRule> UpdateWatchRuleAsync (string id, WatchRule watchRuleBody)
        {
             ApiResponse<WatchRule> localVarResponse = await UpdateWatchRuleAsyncWithHttpInfo(id, watchRuleBody);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">an id of a watch rule</param>
        /// <param name="watchRuleBody"></param>
        /// <returns>Task of ApiResponse (WatchRule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WatchRule>> UpdateWatchRuleAsyncWithHttpInfo (string id, WatchRule watchRuleBody)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoresApi->UpdateWatchRule");
            // verify the required parameter 'watchRuleBody' is set
            if (watchRuleBody == null)
                throw new ApiException(400, "Missing required parameter 'watchRuleBody' when calling StoresApi->UpdateWatchRule");

            var localVarPath = "./watch_rules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (watchRuleBody != null && watchRuleBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(watchRuleBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = watchRuleBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWatchRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WatchRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WatchRule) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WatchRule)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateBucketBody"></param>
        /// <returns>ValidateBucketResponse</returns>
        public ValidateBucketResponse ValidateBucket (ValidateBucketBody validateBucketBody)
        {
             ApiResponse<ValidateBucketResponse> localVarResponse = ValidateBucketWithHttpInfo(validateBucketBody);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateBucketBody"></param>
        /// <returns>ApiResponse of ValidateBucketResponse</returns>
        public ApiResponse< ValidateBucketResponse > ValidateBucketWithHttpInfo (ValidateBucketBody validateBucketBody)
        {
            // verify the required parameter 'validateBucketBody' is set
            if (validateBucketBody == null)
                throw new ApiException(400, "Missing required parameter 'validateBucketBody' when calling StoresApi->ValidateBucket");

            var localVarPath = "./validate_bucket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (validateBucketBody != null && validateBucketBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(validateBucketBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validateBucketBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateBucket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateBucketResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ValidateBucketResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateBucketResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateBucketBody"></param>
        /// <returns>Task of ValidateBucketResponse</returns>
        public async System.Threading.Tasks.Task<ValidateBucketResponse> ValidateBucketAsync (ValidateBucketBody validateBucketBody)
        {
             ApiResponse<ValidateBucketResponse> localVarResponse = await ValidateBucketAsyncWithHttpInfo(validateBucketBody);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Stores.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateBucketBody"></param>
        /// <returns>Task of ApiResponse (ValidateBucketResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateBucketResponse>> ValidateBucketAsyncWithHttpInfo (ValidateBucketBody validateBucketBody)
        {
            // verify the required parameter 'validateBucketBody' is set
            if (validateBucketBody == null)
                throw new ApiException(400, "Missing required parameter 'validateBucketBody' when calling StoresApi->ValidateBucket");

            var localVarPath = "./validate_bucket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (validateBucketBody != null && validateBucketBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(validateBucketBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validateBucketBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateBucket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateBucketResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ValidateBucketResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateBucketResponse)));
        }

    }
}
