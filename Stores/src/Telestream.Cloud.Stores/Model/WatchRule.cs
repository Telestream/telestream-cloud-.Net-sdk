/* 
 * API
 *
 * API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Stores.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Stores.Model
{
    /// <summary>
    /// WatchRule
    /// </summary>
    [DataContract]
    public partial class WatchRule :  IEquatable<WatchRule>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WatchRule" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="StoreId">StoreId.</param>
        /// <param name="ServiceId">ServiceId.</param>
        /// <param name="ServiceName">ServiceName.</param>
        /// <param name="Filters">Filters.</param>
        /// <param name="SyncScheduledAt">SyncScheduledAt.</param>
        /// <param name="Synced">Synced.</param>
        /// <param name="Enabled">Enabled.</param>
        public WatchRule(string Id = default(string), string StoreId = default(string), string ServiceId = default(string), string ServiceName = default(string), Object Filters = default(Object), DateTime? SyncScheduledAt = default(DateTime?), bool? Synced = default(bool?), bool? Enabled = default(bool?))
        {
            this.Id = Id;
            this.StoreId = StoreId;
            this.ServiceId = ServiceId;
            this.ServiceName = ServiceName;
            this.Filters = Filters;
            this.SyncScheduledAt = SyncScheduledAt;
            this.Synced = Synced;
            this.Enabled = Enabled;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets StoreId
        /// </summary>
        [DataMember(Name="store_id", EmitDefaultValue=false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceId
        /// </summary>
        [DataMember(Name="service_id", EmitDefaultValue=false)]
        public string ServiceId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceName
        /// </summary>
        [DataMember(Name="service_name", EmitDefaultValue=false)]
        public string ServiceName { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public Object Filters { get; set; }

        /// <summary>
        /// Gets or Sets SyncScheduledAt
        /// </summary>
        [DataMember(Name="sync_scheduled_at", EmitDefaultValue=false)]
        public DateTime? SyncScheduledAt { get; set; }

        /// <summary>
        /// Gets or Sets Synced
        /// </summary>
        [DataMember(Name="synced", EmitDefaultValue=false)]
        public bool? Synced { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WatchRule {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  SyncScheduledAt: ").Append(SyncScheduledAt).Append("\n");
            sb.Append("  Synced: ").Append(Synced).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WatchRule);
        }

        /// <summary>
        /// Returns true if WatchRule instances are equal
        /// </summary>
        /// <param name="input">Instance of WatchRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WatchRule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.ServiceId == input.ServiceId ||
                    (this.ServiceId != null &&
                    this.ServiceId.Equals(input.ServiceId))
                ) && 
                (
                    this.ServiceName == input.ServiceName ||
                    (this.ServiceName != null &&
                    this.ServiceName.Equals(input.ServiceName))
                ) && 
                (
                    this.Filters == input.Filters ||
                    (this.Filters != null &&
                    this.Filters.Equals(input.Filters))
                ) && 
                (
                    this.SyncScheduledAt == input.SyncScheduledAt ||
                    (this.SyncScheduledAt != null &&
                    this.SyncScheduledAt.Equals(input.SyncScheduledAt))
                ) && 
                (
                    this.Synced == input.Synced ||
                    (this.Synced != null &&
                    this.Synced.Equals(input.Synced))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.ServiceId != null)
                    hashCode = hashCode * 59 + this.ServiceId.GetHashCode();
                if (this.ServiceName != null)
                    hashCode = hashCode * 59 + this.ServiceName.GetHashCode();
                if (this.Filters != null)
                    hashCode = hashCode * 59 + this.Filters.GetHashCode();
                if (this.SyncScheduledAt != null)
                    hashCode = hashCode * 59 + this.SyncScheduledAt.GetHashCode();
                if (this.Synced != null)
                    hashCode = hashCode * 59 + this.Synced.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                return hashCode;
            }
        }
    }

}
