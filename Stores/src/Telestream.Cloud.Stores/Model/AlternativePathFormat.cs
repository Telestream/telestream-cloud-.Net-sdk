/* 
 * API
 *
 * API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Stores.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Stores.Model
{
    /// <summary>
    /// AlternativePathFormat
    /// </summary>
    [DataContract]
    public partial class AlternativePathFormat :  IEquatable<AlternativePathFormat>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlternativePathFormat" /> class.
        /// </summary>
        /// <param name="Formats">Formats.</param>
        public AlternativePathFormat(List<string> Formats = default(List<string>))
        {
            this.Formats = Formats;
        }
        
        /// <summary>
        /// Gets or Sets Formats
        /// </summary>
        [DataMember(Name="formats", EmitDefaultValue=false)]
        public List<string> Formats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlternativePathFormat {\n");
            sb.Append("  Formats: ").Append(Formats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlternativePathFormat);
        }

        /// <summary>
        /// Returns true if AlternativePathFormat instances are equal
        /// </summary>
        /// <param name="input">Instance of AlternativePathFormat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlternativePathFormat input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Formats == input.Formats ||
                    this.Formats != null &&
                    this.Formats.SequenceEqual(input.Formats)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Formats != null)
                    hashCode = hashCode * 59 + this.Formats.GetHashCode();
                return hashCode;
            }
        }
    }

}
