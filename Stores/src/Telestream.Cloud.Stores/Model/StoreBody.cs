/* 
 * API
 *
 * API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Stores.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Stores.Model
{
    /// <summary>
    /// StoreBody
    /// </summary>
    [DataContract]
    public partial class StoreBody :  IEquatable<StoreBody>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoreBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreBody" /> class.
        /// </summary>
        /// <param name="Name">Name (required).</param>
        /// <param name="Provider">Provider (required).</param>
        /// <param name="BucketName">BucketName (required).</param>
        /// <param name="Region">Region (required).</param>
        /// <param name="PrivateAccess">PrivateAccess.</param>
        /// <param name="AccessKey">AccessKey (required).</param>
        /// <param name="SecretKey">SecretKey (required).</param>
        /// <param name="ProviderSpecificSettings">ProviderSpecificSettings.</param>
        public StoreBody(string Name = default(string), string Provider = default(string), string BucketName = default(string), string Region = default(string), bool? PrivateAccess = default(bool?), string AccessKey = default(string), string SecretKey = default(string), StoreBodyProviderSpecificSettings ProviderSpecificSettings = default(StoreBodyProviderSpecificSettings))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for StoreBody and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Provider" is required (not null)
            if (Provider == null)
            {
                throw new InvalidDataException("Provider is a required property for StoreBody and cannot be null");
            }
            else
            {
                this.Provider = Provider;
            }
            // to ensure "BucketName" is required (not null)
            if (BucketName == null)
            {
                throw new InvalidDataException("BucketName is a required property for StoreBody and cannot be null");
            }
            else
            {
                this.BucketName = BucketName;
            }
            // to ensure "Region" is required (not null)
            if (Region == null)
            {
                throw new InvalidDataException("Region is a required property for StoreBody and cannot be null");
            }
            else
            {
                this.Region = Region;
            }
            // to ensure "AccessKey" is required (not null)
            if (AccessKey == null)
            {
                throw new InvalidDataException("AccessKey is a required property for StoreBody and cannot be null");
            }
            else
            {
                this.AccessKey = AccessKey;
            }
            // to ensure "SecretKey" is required (not null)
            if (SecretKey == null)
            {
                throw new InvalidDataException("SecretKey is a required property for StoreBody and cannot be null");
            }
            else
            {
                this.SecretKey = SecretKey;
            }
            this.PrivateAccess = PrivateAccess;
            this.ProviderSpecificSettings = ProviderSpecificSettings;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets BucketName
        /// </summary>
        [DataMember(Name="bucket_name", EmitDefaultValue=false)]
        public string BucketName { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets PrivateAccess
        /// </summary>
        [DataMember(Name="private_access", EmitDefaultValue=false)]
        public bool? PrivateAccess { get; set; }

        /// <summary>
        /// Gets or Sets AccessKey
        /// </summary>
        [DataMember(Name="access_key", EmitDefaultValue=false)]
        public string AccessKey { get; set; }

        /// <summary>
        /// Gets or Sets SecretKey
        /// </summary>
        [DataMember(Name="secret_key", EmitDefaultValue=false)]
        public string SecretKey { get; set; }

        /// <summary>
        /// Gets or Sets ProviderSpecificSettings
        /// </summary>
        [DataMember(Name="provider_specific_settings", EmitDefaultValue=false)]
        public StoreBodyProviderSpecificSettings ProviderSpecificSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreBody {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  BucketName: ").Append(BucketName).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  PrivateAccess: ").Append(PrivateAccess).Append("\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  SecretKey: ").Append(SecretKey).Append("\n");
            sb.Append("  ProviderSpecificSettings: ").Append(ProviderSpecificSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoreBody);
        }

        /// <summary>
        /// Returns true if StoreBody instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.BucketName == input.BucketName ||
                    (this.BucketName != null &&
                    this.BucketName.Equals(input.BucketName))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.PrivateAccess == input.PrivateAccess ||
                    (this.PrivateAccess != null &&
                    this.PrivateAccess.Equals(input.PrivateAccess))
                ) && 
                (
                    this.AccessKey == input.AccessKey ||
                    (this.AccessKey != null &&
                    this.AccessKey.Equals(input.AccessKey))
                ) && 
                (
                    this.SecretKey == input.SecretKey ||
                    (this.SecretKey != null &&
                    this.SecretKey.Equals(input.SecretKey))
                ) && 
                (
                    this.ProviderSpecificSettings == input.ProviderSpecificSettings ||
                    (this.ProviderSpecificSettings != null &&
                    this.ProviderSpecificSettings.Equals(input.ProviderSpecificSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.BucketName != null)
                    hashCode = hashCode * 59 + this.BucketName.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.PrivateAccess != null)
                    hashCode = hashCode * 59 + this.PrivateAccess.GetHashCode();
                if (this.AccessKey != null)
                    hashCode = hashCode * 59 + this.AccessKey.GetHashCode();
                if (this.SecretKey != null)
                    hashCode = hashCode * 59 + this.SecretKey.GetHashCode();
                if (this.ProviderSpecificSettings != null)
                    hashCode = hashCode * 59 + this.ProviderSpecificSettings.GetHashCode();
                return hashCode;
            }
        }
    }

}
