/* 
 * IAM API
 *
 * IAM API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Telestream.Cloud.Iam.Client;
using Telestream.Cloud.Iam.Model;

namespace Telestream.Cloud.Iam.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIamApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteCredential (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCredentialWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Credential</returns>
        Credential GetCredential (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Credential</returns>
        ApiResponse<Credential> GetCredentialWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CredentialsResponse</returns>
        CredentialsResponse GetCredentials ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CredentialsResponse</returns>
        ApiResponse<CredentialsResponse> GetCredentialsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <returns>Dictionary&lt;string, bool?&gt;</returns>
        Dictionary<string, bool?> GetPolicy (StatementsList policy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, bool?&gt;</returns>
        ApiResponse<Dictionary<string, bool?>> GetPolicyWithHttpInfo (StatementsList policy);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredential"></param>
        /// <returns>Credential</returns>
        Credential PostCredentials (Credential createCredential);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredential"></param>
        /// <returns>ApiResponse of Credential</returns>
        ApiResponse<Credential> PostCredentialsWithHttpInfo (Credential createCredential);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateCredential"></param>
        /// <returns>Credential</returns>
        Credential UpdateCredential (string id, Credential updateCredential);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateCredential"></param>
        /// <returns>ApiResponse of Credential</returns>
        ApiResponse<Credential> UpdateCredentialWithHttpInfo (string id, Credential updateCredential);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCredentialAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCredentialAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Credential</returns>
        System.Threading.Tasks.Task<Credential> GetCredentialAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Credential)</returns>
        System.Threading.Tasks.Task<ApiResponse<Credential>> GetCredentialAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CredentialsResponse</returns>
        System.Threading.Tasks.Task<CredentialsResponse> GetCredentialsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CredentialsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CredentialsResponse>> GetCredentialsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <returns>Task of Dictionary&lt;string, bool?&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, bool?>> GetPolicyAsync (StatementsList policy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, bool?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, bool?>>> GetPolicyAsyncWithHttpInfo (StatementsList policy);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredential"></param>
        /// <returns>Task of Credential</returns>
        System.Threading.Tasks.Task<Credential> PostCredentialsAsync (Credential createCredential);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredential"></param>
        /// <returns>Task of ApiResponse (Credential)</returns>
        System.Threading.Tasks.Task<ApiResponse<Credential>> PostCredentialsAsyncWithHttpInfo (Credential createCredential);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateCredential"></param>
        /// <returns>Task of Credential</returns>
        System.Threading.Tasks.Task<Credential> UpdateCredentialAsync (string id, Credential updateCredential);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateCredential"></param>
        /// <returns>Task of ApiResponse (Credential)</returns>
        System.Threading.Tasks.Task<ApiResponse<Credential>> UpdateCredentialAsyncWithHttpInfo (string id, Credential updateCredential);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IamApi : IIamApi
    {
        private Telestream.Cloud.Iam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IamApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IamApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Telestream.Cloud.Iam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IamApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IamApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Telestream.Cloud.Iam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Telestream.Cloud.Iam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteCredential (string id)
        {
             DeleteCredentialWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCredentialWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IamApi->DeleteCredential");

            var localVarPath = "/credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCredentialAsync (string id)
        {
             await DeleteCredentialAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCredentialAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IamApi->DeleteCredential");

            var localVarPath = "/credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Credential</returns>
        public Credential GetCredential (string id)
        {
             ApiResponse<Credential> localVarResponse = GetCredentialWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Credential</returns>
        public ApiResponse< Credential > GetCredentialWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IamApi->GetCredential");

            var localVarPath = "/credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Credential) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credential)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Credential</returns>
        public async System.Threading.Tasks.Task<Credential> GetCredentialAsync (string id)
        {
             ApiResponse<Credential> localVarResponse = await GetCredentialAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Credential)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Credential>> GetCredentialAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IamApi->GetCredential");

            var localVarPath = "/credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Credential) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credential)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CredentialsResponse</returns>
        public CredentialsResponse GetCredentials ()
        {
             ApiResponse<CredentialsResponse> localVarResponse = GetCredentialsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CredentialsResponse</returns>
        public ApiResponse< CredentialsResponse > GetCredentialsWithHttpInfo ()
        {

            var localVarPath = "/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CredentialsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CredentialsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CredentialsResponse</returns>
        public async System.Threading.Tasks.Task<CredentialsResponse> GetCredentialsAsync ()
        {
             ApiResponse<CredentialsResponse> localVarResponse = await GetCredentialsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CredentialsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CredentialsResponse>> GetCredentialsAsyncWithHttpInfo ()
        {

            var localVarPath = "/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CredentialsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CredentialsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <returns>Dictionary&lt;string, bool?&gt;</returns>
        public Dictionary<string, bool?> GetPolicy (StatementsList policy)
        {
             ApiResponse<Dictionary<string, bool?>> localVarResponse = GetPolicyWithHttpInfo(policy);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, bool?&gt;</returns>
        public ApiResponse< Dictionary<string, bool?> > GetPolicyWithHttpInfo (StatementsList policy)
        {
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new ApiException(400, "Missing required parameter 'policy' when calling IamApi->GetPolicy");

            var localVarPath = "/credentials/policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policy != null && policy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(policy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = policy; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, bool?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, bool?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, bool?>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <returns>Task of Dictionary&lt;string, bool?&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, bool?>> GetPolicyAsync (StatementsList policy)
        {
             ApiResponse<Dictionary<string, bool?>> localVarResponse = await GetPolicyAsyncWithHttpInfo(policy);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, bool?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, bool?>>> GetPolicyAsyncWithHttpInfo (StatementsList policy)
        {
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new ApiException(400, "Missing required parameter 'policy' when calling IamApi->GetPolicy");

            var localVarPath = "/credentials/policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policy != null && policy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(policy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = policy; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, bool?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, bool?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, bool?>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredential"></param>
        /// <returns>Credential</returns>
        public Credential PostCredentials (Credential createCredential)
        {
             ApiResponse<Credential> localVarResponse = PostCredentialsWithHttpInfo(createCredential);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredential"></param>
        /// <returns>ApiResponse of Credential</returns>
        public ApiResponse< Credential > PostCredentialsWithHttpInfo (Credential createCredential)
        {
            // verify the required parameter 'createCredential' is set
            if (createCredential == null)
                throw new ApiException(400, "Missing required parameter 'createCredential' when calling IamApi->PostCredentials");

            var localVarPath = "/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createCredential != null && createCredential.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCredential); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCredential; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Credential) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credential)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredential"></param>
        /// <returns>Task of Credential</returns>
        public async System.Threading.Tasks.Task<Credential> PostCredentialsAsync (Credential createCredential)
        {
             ApiResponse<Credential> localVarResponse = await PostCredentialsAsyncWithHttpInfo(createCredential);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredential"></param>
        /// <returns>Task of ApiResponse (Credential)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Credential>> PostCredentialsAsyncWithHttpInfo (Credential createCredential)
        {
            // verify the required parameter 'createCredential' is set
            if (createCredential == null)
                throw new ApiException(400, "Missing required parameter 'createCredential' when calling IamApi->PostCredentials");

            var localVarPath = "/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createCredential != null && createCredential.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCredential); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCredential; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Credential) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credential)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateCredential"></param>
        /// <returns>Credential</returns>
        public Credential UpdateCredential (string id, Credential updateCredential)
        {
             ApiResponse<Credential> localVarResponse = UpdateCredentialWithHttpInfo(id, updateCredential);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateCredential"></param>
        /// <returns>ApiResponse of Credential</returns>
        public ApiResponse< Credential > UpdateCredentialWithHttpInfo (string id, Credential updateCredential)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IamApi->UpdateCredential");
            // verify the required parameter 'updateCredential' is set
            if (updateCredential == null)
                throw new ApiException(400, "Missing required parameter 'updateCredential' when calling IamApi->UpdateCredential");

            var localVarPath = "/credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateCredential != null && updateCredential.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateCredential); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCredential; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Credential) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credential)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateCredential"></param>
        /// <returns>Task of Credential</returns>
        public async System.Threading.Tasks.Task<Credential> UpdateCredentialAsync (string id, Credential updateCredential)
        {
             ApiResponse<Credential> localVarResponse = await UpdateCredentialAsyncWithHttpInfo(id, updateCredential);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateCredential"></param>
        /// <returns>Task of ApiResponse (Credential)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Credential>> UpdateCredentialAsyncWithHttpInfo (string id, Credential updateCredential)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IamApi->UpdateCredential");
            // verify the required parameter 'updateCredential' is set
            if (updateCredential == null)
                throw new ApiException(400, "Missing required parameter 'updateCredential' when calling IamApi->UpdateCredential");

            var localVarPath = "/credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateCredential != null && updateCredential.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateCredential); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCredential; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Credential) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credential)));
        }

    }
}
