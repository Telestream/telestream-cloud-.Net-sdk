/* 
 * Flip API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.1
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Telestream.Cloud.Flip.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Flip.Model
{
    /// <summary>
    /// VideoUploadBody
    /// </summary>
    [DataContract]
    public partial class VideoUploadBody :  IEquatable<VideoUploadBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoUploadBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VideoUploadBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoUploadBody" /> class.
        /// </summary>
        /// <param name="FileSize">Size of the file that will be uploaded in &#x60;bytes&#x60;. (required).</param>
        /// <param name="FileName">Name of the file that will be uploaded. (required).</param>
        /// <param name="ExtraFiles">A list of names of additional files that will be uploaded..</param>
        /// <param name="Profiles">A comma-separated list of profile names or IDs to be used during encoding. Alternatively, specify none so no encodings will created right away..</param>
        /// <param name="PathFormat">PathFormat.</param>
        /// <param name="Payload">Payload is an arbitrary text of length 256 or shorter that you can store along the Video. It is typically used to retain an association with one of your own DB record ID..</param>
        /// <param name="ExtraVariables">ExtraVariables.</param>
        /// <param name="WatermarkUrl">URL pointing to an image that will be used asa watermark..</param>
        /// <param name="WatermarkLeft">Determines distance between the left edge of a video and the left edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_right is not..</param>
        /// <param name="WatermarkTop">Determines distance between the top edge of a video and the top edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_bottom is not..</param>
        /// <param name="WatermarkRight">Determines distance between the right edge of a video and the right edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_left is not..</param>
        /// <param name="WatermarkBottom">Determines distance between the bottom edge of a video and the bottom edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_top is not..</param>
        /// <param name="WatermarkWidth">Determines width of the watermark image. Should be specified in pixels..</param>
        /// <param name="WatermarkHeight">Determines width of the watermark image. Should be specified in pixels..</param>
        /// <param name="ClipLength">Length of the uploaded video. Should be formatted as follows: HH:MM:SS.</param>
        /// <param name="ClipOffset">Clip starts at a specific offset..</param>
        /// <param name="MultiChunk">MultiChunk (default to true).</param>
        /// <param name="StoreId">An individual store_id for this video processing. If provided will replace store_id from cloud factory but must match underlying cloud provider and region..</param>
        public VideoUploadBody(long? FileSize = default(long?), string FileName = default(string), List<ExtraFile> ExtraFiles = default(List<ExtraFile>), string Profiles = default(string), string PathFormat = default(string), string Payload = default(string), Dictionary<string, string> ExtraVariables = default(Dictionary<string, string>), string WatermarkUrl = default(string), string WatermarkLeft = default(string), string WatermarkTop = default(string), string WatermarkRight = default(string), string WatermarkBottom = default(string), string WatermarkWidth = default(string), string WatermarkHeight = default(string), string ClipLength = default(string), string ClipOffset = default(string), bool? MultiChunk = true, string StoreId = default(string))
        {
            // to ensure "FileSize" is required (not null)
            if (FileSize == null)
            {
                throw new InvalidDataException("FileSize is a required property for VideoUploadBody and cannot be null");
            }
            else
            {
                this.FileSize = FileSize;
            }
            // to ensure "FileName" is required (not null)
            if (FileName == null)
            {
                throw new InvalidDataException("FileName is a required property for VideoUploadBody and cannot be null");
            }
            else
            {
                this.FileName = FileName;
            }
            this.ExtraFiles = ExtraFiles;
            this.Profiles = Profiles;
            this.PathFormat = PathFormat;
            this.Payload = Payload;
            this.ExtraVariables = ExtraVariables;
            this.WatermarkUrl = WatermarkUrl;
            this.WatermarkLeft = WatermarkLeft;
            this.WatermarkTop = WatermarkTop;
            this.WatermarkRight = WatermarkRight;
            this.WatermarkBottom = WatermarkBottom;
            this.WatermarkWidth = WatermarkWidth;
            this.WatermarkHeight = WatermarkHeight;
            this.ClipLength = ClipLength;
            this.ClipOffset = ClipOffset;
            // use default value if no "MultiChunk" provided
            if (MultiChunk == null)
            {
                this.MultiChunk = true;
            }
            else
            {
                this.MultiChunk = MultiChunk;
            }
            this.StoreId = StoreId;
        }
        
        /// <summary>
        /// Size of the file that will be uploaded in &#x60;bytes&#x60;.
        /// </summary>
        /// <value>Size of the file that will be uploaded in &#x60;bytes&#x60;.</value>
        [DataMember(Name="file_size", EmitDefaultValue=false)]
        public long? FileSize { get; set; }

        /// <summary>
        /// Name of the file that will be uploaded.
        /// </summary>
        /// <value>Name of the file that will be uploaded.</value>
        [DataMember(Name="file_name", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// A list of names of additional files that will be uploaded.
        /// </summary>
        /// <value>A list of names of additional files that will be uploaded.</value>
        [DataMember(Name="extra_files", EmitDefaultValue=false)]
        public List<ExtraFile> ExtraFiles { get; set; }

        /// <summary>
        /// A comma-separated list of profile names or IDs to be used during encoding. Alternatively, specify none so no encodings will created right away.
        /// </summary>
        /// <value>A comma-separated list of profile names or IDs to be used during encoding. Alternatively, specify none so no encodings will created right away.</value>
        [DataMember(Name="profiles", EmitDefaultValue=false)]
        public string Profiles { get; set; }

        /// <summary>
        /// Gets or Sets PathFormat
        /// </summary>
        [DataMember(Name="path_format", EmitDefaultValue=false)]
        public string PathFormat { get; set; }

        /// <summary>
        /// Payload is an arbitrary text of length 256 or shorter that you can store along the Video. It is typically used to retain an association with one of your own DB record ID.
        /// </summary>
        /// <value>Payload is an arbitrary text of length 256 or shorter that you can store along the Video. It is typically used to retain an association with one of your own DB record ID.</value>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public string Payload { get; set; }

        /// <summary>
        /// Gets or Sets ExtraVariables
        /// </summary>
        [DataMember(Name="extra_variables", EmitDefaultValue=false)]
        public Dictionary<string, string> ExtraVariables { get; set; }

        /// <summary>
        /// URL pointing to an image that will be used asa watermark.
        /// </summary>
        /// <value>URL pointing to an image that will be used asa watermark.</value>
        [DataMember(Name="watermark_url", EmitDefaultValue=false)]
        public string WatermarkUrl { get; set; }

        /// <summary>
        /// Determines distance between the left edge of a video and the left edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_right is not.
        /// </summary>
        /// <value>Determines distance between the left edge of a video and the left edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_right is not.</value>
        [DataMember(Name="watermark_left", EmitDefaultValue=false)]
        public string WatermarkLeft { get; set; }

        /// <summary>
        /// Determines distance between the top edge of a video and the top edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_bottom is not.
        /// </summary>
        /// <value>Determines distance between the top edge of a video and the top edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_bottom is not.</value>
        [DataMember(Name="watermark_top", EmitDefaultValue=false)]
        public string WatermarkTop { get; set; }

        /// <summary>
        /// Determines distance between the right edge of a video and the right edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_left is not.
        /// </summary>
        /// <value>Determines distance between the right edge of a video and the right edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_left is not.</value>
        [DataMember(Name="watermark_right", EmitDefaultValue=false)]
        public string WatermarkRight { get; set; }

        /// <summary>
        /// Determines distance between the bottom edge of a video and the bottom edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_top is not.
        /// </summary>
        /// <value>Determines distance between the bottom edge of a video and the bottom edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_top is not.</value>
        [DataMember(Name="watermark_bottom", EmitDefaultValue=false)]
        public string WatermarkBottom { get; set; }

        /// <summary>
        /// Determines width of the watermark image. Should be specified in pixels.
        /// </summary>
        /// <value>Determines width of the watermark image. Should be specified in pixels.</value>
        [DataMember(Name="watermark_width", EmitDefaultValue=false)]
        public string WatermarkWidth { get; set; }

        /// <summary>
        /// Determines width of the watermark image. Should be specified in pixels.
        /// </summary>
        /// <value>Determines width of the watermark image. Should be specified in pixels.</value>
        [DataMember(Name="watermark_height", EmitDefaultValue=false)]
        public string WatermarkHeight { get; set; }

        /// <summary>
        /// Length of the uploaded video. Should be formatted as follows: HH:MM:SS
        /// </summary>
        /// <value>Length of the uploaded video. Should be formatted as follows: HH:MM:SS</value>
        [DataMember(Name="clip_length", EmitDefaultValue=false)]
        public string ClipLength { get; set; }

        /// <summary>
        /// Clip starts at a specific offset.
        /// </summary>
        /// <value>Clip starts at a specific offset.</value>
        [DataMember(Name="clip_offset", EmitDefaultValue=false)]
        public string ClipOffset { get; set; }

        /// <summary>
        /// Gets or Sets MultiChunk
        /// </summary>
        [DataMember(Name="multi_chunk", EmitDefaultValue=false)]
        public bool? MultiChunk { get; set; }

        /// <summary>
        /// An individual store_id for this video processing. If provided will replace store_id from cloud factory but must match underlying cloud provider and region.
        /// </summary>
        /// <value>An individual store_id for this video processing. If provided will replace store_id from cloud factory but must match underlying cloud provider and region.</value>
        [DataMember(Name="store_id", EmitDefaultValue=false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VideoUploadBody {\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  ExtraFiles: ").Append(ExtraFiles).Append("\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("  PathFormat: ").Append(PathFormat).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  ExtraVariables: ").Append(ExtraVariables).Append("\n");
            sb.Append("  WatermarkUrl: ").Append(WatermarkUrl).Append("\n");
            sb.Append("  WatermarkLeft: ").Append(WatermarkLeft).Append("\n");
            sb.Append("  WatermarkTop: ").Append(WatermarkTop).Append("\n");
            sb.Append("  WatermarkRight: ").Append(WatermarkRight).Append("\n");
            sb.Append("  WatermarkBottom: ").Append(WatermarkBottom).Append("\n");
            sb.Append("  WatermarkWidth: ").Append(WatermarkWidth).Append("\n");
            sb.Append("  WatermarkHeight: ").Append(WatermarkHeight).Append("\n");
            sb.Append("  ClipLength: ").Append(ClipLength).Append("\n");
            sb.Append("  ClipOffset: ").Append(ClipOffset).Append("\n");
            sb.Append("  MultiChunk: ").Append(MultiChunk).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VideoUploadBody);
        }

        /// <summary>
        /// Returns true if VideoUploadBody instances are equal
        /// </summary>
        /// <param name="input">Instance of VideoUploadBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoUploadBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.ExtraFiles == input.ExtraFiles ||
                    this.ExtraFiles != null &&
                    this.ExtraFiles.SequenceEqual(input.ExtraFiles)
                ) && 
                (
                    this.Profiles == input.Profiles ||
                    (this.Profiles != null &&
                    this.Profiles.Equals(input.Profiles))
                ) && 
                (
                    this.PathFormat == input.PathFormat ||
                    (this.PathFormat != null &&
                    this.PathFormat.Equals(input.PathFormat))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                ) && 
                (
                    this.ExtraVariables == input.ExtraVariables ||
                    this.ExtraVariables != null &&
                    this.ExtraVariables.SequenceEqual(input.ExtraVariables)
                ) && 
                (
                    this.WatermarkUrl == input.WatermarkUrl ||
                    (this.WatermarkUrl != null &&
                    this.WatermarkUrl.Equals(input.WatermarkUrl))
                ) && 
                (
                    this.WatermarkLeft == input.WatermarkLeft ||
                    (this.WatermarkLeft != null &&
                    this.WatermarkLeft.Equals(input.WatermarkLeft))
                ) && 
                (
                    this.WatermarkTop == input.WatermarkTop ||
                    (this.WatermarkTop != null &&
                    this.WatermarkTop.Equals(input.WatermarkTop))
                ) && 
                (
                    this.WatermarkRight == input.WatermarkRight ||
                    (this.WatermarkRight != null &&
                    this.WatermarkRight.Equals(input.WatermarkRight))
                ) && 
                (
                    this.WatermarkBottom == input.WatermarkBottom ||
                    (this.WatermarkBottom != null &&
                    this.WatermarkBottom.Equals(input.WatermarkBottom))
                ) && 
                (
                    this.WatermarkWidth == input.WatermarkWidth ||
                    (this.WatermarkWidth != null &&
                    this.WatermarkWidth.Equals(input.WatermarkWidth))
                ) && 
                (
                    this.WatermarkHeight == input.WatermarkHeight ||
                    (this.WatermarkHeight != null &&
                    this.WatermarkHeight.Equals(input.WatermarkHeight))
                ) && 
                (
                    this.ClipLength == input.ClipLength ||
                    (this.ClipLength != null &&
                    this.ClipLength.Equals(input.ClipLength))
                ) && 
                (
                    this.ClipOffset == input.ClipOffset ||
                    (this.ClipOffset != null &&
                    this.ClipOffset.Equals(input.ClipOffset))
                ) && 
                (
                    this.MultiChunk == input.MultiChunk ||
                    (this.MultiChunk != null &&
                    this.MultiChunk.Equals(input.MultiChunk))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.ExtraFiles != null)
                    hashCode = hashCode * 59 + this.ExtraFiles.GetHashCode();
                if (this.Profiles != null)
                    hashCode = hashCode * 59 + this.Profiles.GetHashCode();
                if (this.PathFormat != null)
                    hashCode = hashCode * 59 + this.PathFormat.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                if (this.ExtraVariables != null)
                    hashCode = hashCode * 59 + this.ExtraVariables.GetHashCode();
                if (this.WatermarkUrl != null)
                    hashCode = hashCode * 59 + this.WatermarkUrl.GetHashCode();
                if (this.WatermarkLeft != null)
                    hashCode = hashCode * 59 + this.WatermarkLeft.GetHashCode();
                if (this.WatermarkTop != null)
                    hashCode = hashCode * 59 + this.WatermarkTop.GetHashCode();
                if (this.WatermarkRight != null)
                    hashCode = hashCode * 59 + this.WatermarkRight.GetHashCode();
                if (this.WatermarkBottom != null)
                    hashCode = hashCode * 59 + this.WatermarkBottom.GetHashCode();
                if (this.WatermarkWidth != null)
                    hashCode = hashCode * 59 + this.WatermarkWidth.GetHashCode();
                if (this.WatermarkHeight != null)
                    hashCode = hashCode * 59 + this.WatermarkHeight.GetHashCode();
                if (this.ClipLength != null)
                    hashCode = hashCode * 59 + this.ClipLength.GetHashCode();
                if (this.ClipOffset != null)
                    hashCode = hashCode * 59 + this.ClipOffset.GetHashCode();
                if (this.MultiChunk != null)
                    hashCode = hashCode * 59 + this.MultiChunk.GetHashCode();
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
