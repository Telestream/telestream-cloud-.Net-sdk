/* 
 * Flip API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Flip.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Flip.Model
{
    /// <summary>
    /// FactorySync
    /// </summary>
    [DataContract]
    public partial class FactorySync :  IEquatable<FactorySync>
    {
        /// <summary>
        /// Determines whether a Factory will be synchronised with an input bucket.
        /// </summary>
        /// <value>Determines whether a Factory will be synchronised with an input bucket.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SyncingEnum
        {
            
            /// <summary>
            /// Enum Starting for "starting"
            /// </summary>
            [EnumMember(Value = "starting")]
            Starting = 1,
            
            /// <summary>
            /// Enum Alreadystarted for "already_started"
            /// </summary>
            [EnumMember(Value = "already_started")]
            Alreadystarted = 2
        }

        /// <summary>
        /// Determines whether a Factory will be synchronised with an input bucket.
        /// </summary>
        /// <value>Determines whether a Factory will be synchronised with an input bucket.</value>
        [DataMember(Name="syncing", EmitDefaultValue=false)]
        public SyncingEnum? Syncing { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FactorySync" /> class.
        /// </summary>
        /// <param name="Syncing">Determines whether a Factory will be synchronised with an input bucket..</param>
        public FactorySync(SyncingEnum? Syncing = default(SyncingEnum?))
        {
            this.Syncing = Syncing;
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FactorySync {\n");
            sb.Append("  Syncing: ").Append(Syncing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactorySync);
        }

        /// <summary>
        /// Returns true if FactorySync instances are equal
        /// </summary>
        /// <param name="input">Instance of FactorySync to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactorySync input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Syncing == input.Syncing ||
                    (this.Syncing != null &&
                    this.Syncing.Equals(input.Syncing))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Syncing != null)
                    hashCode = hashCode * 59 + this.Syncing.GetHashCode();
                return hashCode;
            }
        }
    }

}
