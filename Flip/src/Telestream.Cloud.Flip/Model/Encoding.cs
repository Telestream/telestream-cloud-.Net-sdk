/* 
 * Flip API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.1
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Telestream.Cloud.Flip.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Flip.Model
{
    /// <summary>
    /// Encoding
    /// </summary>
    [DataContract]
    public partial class Encoding :  IEquatable<Encoding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Encoding" /> class.
        /// </summary>
        /// <param name="Id">A unique identifier of an Encoding..</param>
        /// <param name="AudioBitrate">Audio bitrate (in bits/s)..</param>
        /// <param name="AudioChannels">A number of audio channels..</param>
        /// <param name="AudioCodec">A codec that is used to encode audio streams..</param>
        /// <param name="AudioSampleRate">A number of samples of audio carried per second..</param>
        /// <param name="CreatedAt">A date and time when the Encoding has been created..</param>
        /// <param name="Duration">Duration.</param>
        /// <param name="EncodingProgress">EncodingProgress.</param>
        /// <param name="EncodingTime">EncodingTime.</param>
        /// <param name="ErrorClass">A class of an error that has occurred during the encoding process. It is present only if the encoding status is equal to &#x60;fail&#x60;..</param>
        /// <param name="ErrorMessage">A message that explains why the encoding process has resulted in an error. It is present only if the encoding status is equal to &#x60;fail&#x60;..</param>
        /// <param name="ExternalId">ExternalId.</param>
        /// <param name="Extname">Extension of the output file..</param>
        /// <param name="FileSize">A size of the output file..</param>
        /// <param name="Files">An array of output file names..</param>
        /// <param name="Fps">Number of frames per second..</param>
        /// <param name="Height">Height of the output video..</param>
        /// <param name="Width">Width of the output video..</param>
        /// <param name="LogfileUrl">An URL pointing to a logfile..</param>
        /// <param name="MimeType">A mime type of the encoded file..</param>
        /// <param name="ParentEncodingId">ParentEncodingId.</param>
        /// <param name="Path">Path.</param>
        /// <param name="ProfileId">An id of a related Profile..</param>
        /// <param name="ProfileName">A name of the used Profile..</param>
        /// <param name="Screenshots">Screenshots.</param>
        /// <param name="StartedEncodingAt">A date and time when the encoding process has been started.</param>
        /// <param name="Status">Determines at what stage the encoding process is at the moment..</param>
        /// <param name="UpdatedAt">A date and time when a Encoding has been updated last time..</param>
        /// <param name="VideoBitrate">video bitrate (in bits/s).</param>
        /// <param name="VideoCodec">A codec that is used to encode video streams..</param>
        /// <param name="VideoId">An id of a related Video object.</param>
        public Encoding(string Id = default(string), int? AudioBitrate = default(int?), int? AudioChannels = default(int?), string AudioCodec = default(string), int? AudioSampleRate = default(int?), string CreatedAt = default(string), int? Duration = default(int?), int? EncodingProgress = default(int?), int? EncodingTime = default(int?), string ErrorClass = default(string), string ErrorMessage = default(string), string ExternalId = default(string), string Extname = default(string), long? FileSize = default(long?), List<string> Files = default(List<string>), decimal? Fps = default(decimal?), int? Height = default(int?), int? Width = default(int?), string LogfileUrl = default(string), string MimeType = default(string), string ParentEncodingId = default(string), string Path = default(string), string ProfileId = default(string), string ProfileName = default(string), List<string> Screenshots = default(List<string>), string StartedEncodingAt = default(string), string Status = default(string), string UpdatedAt = default(string), int? VideoBitrate = default(int?), string VideoCodec = default(string), string VideoId = default(string))
        {
            this.Id = Id;
            this.AudioBitrate = AudioBitrate;
            this.AudioChannels = AudioChannels;
            this.AudioCodec = AudioCodec;
            this.AudioSampleRate = AudioSampleRate;
            this.CreatedAt = CreatedAt;
            this.Duration = Duration;
            this.EncodingProgress = EncodingProgress;
            this.EncodingTime = EncodingTime;
            this.ErrorClass = ErrorClass;
            this.ErrorMessage = ErrorMessage;
            this.ExternalId = ExternalId;
            this.Extname = Extname;
            this.FileSize = FileSize;
            this.Files = Files;
            this.Fps = Fps;
            this.Height = Height;
            this.Width = Width;
            this.LogfileUrl = LogfileUrl;
            this.MimeType = MimeType;
            this.ParentEncodingId = ParentEncodingId;
            this.Path = Path;
            this.ProfileId = ProfileId;
            this.ProfileName = ProfileName;
            this.Screenshots = Screenshots;
            this.StartedEncodingAt = StartedEncodingAt;
            this.Status = Status;
            this.UpdatedAt = UpdatedAt;
            this.VideoBitrate = VideoBitrate;
            this.VideoCodec = VideoCodec;
            this.VideoId = VideoId;
        }
        
        /// <summary>
        /// A unique identifier of an Encoding.
        /// </summary>
        /// <value>A unique identifier of an Encoding.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Audio bitrate (in bits/s).
        /// </summary>
        /// <value>Audio bitrate (in bits/s).</value>
        [DataMember(Name="audio_bitrate", EmitDefaultValue=false)]
        public int? AudioBitrate { get; set; }

        /// <summary>
        /// A number of audio channels.
        /// </summary>
        /// <value>A number of audio channels.</value>
        [DataMember(Name="audio_channels", EmitDefaultValue=false)]
        public int? AudioChannels { get; set; }

        /// <summary>
        /// A codec that is used to encode audio streams.
        /// </summary>
        /// <value>A codec that is used to encode audio streams.</value>
        [DataMember(Name="audio_codec", EmitDefaultValue=false)]
        public string AudioCodec { get; set; }

        /// <summary>
        /// A number of samples of audio carried per second.
        /// </summary>
        /// <value>A number of samples of audio carried per second.</value>
        [DataMember(Name="audio_sample_rate", EmitDefaultValue=false)]
        public int? AudioSampleRate { get; set; }

        /// <summary>
        /// A date and time when the Encoding has been created.
        /// </summary>
        /// <value>A date and time when the Encoding has been created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// Gets or Sets EncodingProgress
        /// </summary>
        [DataMember(Name="encoding_progress", EmitDefaultValue=false)]
        public int? EncodingProgress { get; set; }

        /// <summary>
        /// Gets or Sets EncodingTime
        /// </summary>
        [DataMember(Name="encoding_time", EmitDefaultValue=false)]
        public int? EncodingTime { get; set; }

        /// <summary>
        /// A class of an error that has occurred during the encoding process. It is present only if the encoding status is equal to &#x60;fail&#x60;.
        /// </summary>
        /// <value>A class of an error that has occurred during the encoding process. It is present only if the encoding status is equal to &#x60;fail&#x60;.</value>
        [DataMember(Name="error_class", EmitDefaultValue=false)]
        public string ErrorClass { get; set; }

        /// <summary>
        /// A message that explains why the encoding process has resulted in an error. It is present only if the encoding status is equal to &#x60;fail&#x60;.
        /// </summary>
        /// <value>A message that explains why the encoding process has resulted in an error. It is present only if the encoding status is equal to &#x60;fail&#x60;.</value>
        [DataMember(Name="error_message", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="external_id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Extension of the output file.
        /// </summary>
        /// <value>Extension of the output file.</value>
        [DataMember(Name="extname", EmitDefaultValue=false)]
        public string Extname { get; set; }

        /// <summary>
        /// A size of the output file.
        /// </summary>
        /// <value>A size of the output file.</value>
        [DataMember(Name="file_size", EmitDefaultValue=false)]
        public long? FileSize { get; set; }

        /// <summary>
        /// An array of output file names.
        /// </summary>
        /// <value>An array of output file names.</value>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<string> Files { get; set; }

        /// <summary>
        /// Number of frames per second.
        /// </summary>
        /// <value>Number of frames per second.</value>
        [DataMember(Name="fps", EmitDefaultValue=false)]
        public decimal? Fps { get; set; }

        /// <summary>
        /// Height of the output video.
        /// </summary>
        /// <value>Height of the output video.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Width of the output video.
        /// </summary>
        /// <value>Width of the output video.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// An URL pointing to a logfile.
        /// </summary>
        /// <value>An URL pointing to a logfile.</value>
        [DataMember(Name="logfile_url", EmitDefaultValue=false)]
        public string LogfileUrl { get; set; }

        /// <summary>
        /// A mime type of the encoded file.
        /// </summary>
        /// <value>A mime type of the encoded file.</value>
        [DataMember(Name="mime_type", EmitDefaultValue=false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or Sets ParentEncodingId
        /// </summary>
        [DataMember(Name="parent_encoding_id", EmitDefaultValue=false)]
        public string ParentEncodingId { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// An id of a related Profile.
        /// </summary>
        /// <value>An id of a related Profile.</value>
        [DataMember(Name="profile_id", EmitDefaultValue=false)]
        public string ProfileId { get; set; }

        /// <summary>
        /// A name of the used Profile.
        /// </summary>
        /// <value>A name of the used Profile.</value>
        [DataMember(Name="profile_name", EmitDefaultValue=false)]
        public string ProfileName { get; set; }

        /// <summary>
        /// Gets or Sets Screenshots
        /// </summary>
        [DataMember(Name="screenshots", EmitDefaultValue=false)]
        public List<string> Screenshots { get; set; }

        /// <summary>
        /// A date and time when the encoding process has been started
        /// </summary>
        /// <value>A date and time when the encoding process has been started</value>
        [DataMember(Name="started_encoding_at", EmitDefaultValue=false)]
        public string StartedEncodingAt { get; set; }

        /// <summary>
        /// Determines at what stage the encoding process is at the moment.
        /// </summary>
        /// <value>Determines at what stage the encoding process is at the moment.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// A date and time when a Encoding has been updated last time.
        /// </summary>
        /// <value>A date and time when a Encoding has been updated last time.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// video bitrate (in bits/s)
        /// </summary>
        /// <value>video bitrate (in bits/s)</value>
        [DataMember(Name="video_bitrate", EmitDefaultValue=false)]
        public int? VideoBitrate { get; set; }

        /// <summary>
        /// A codec that is used to encode video streams.
        /// </summary>
        /// <value>A codec that is used to encode video streams.</value>
        [DataMember(Name="video_codec", EmitDefaultValue=false)]
        public string VideoCodec { get; set; }

        /// <summary>
        /// An id of a related Video object
        /// </summary>
        /// <value>An id of a related Video object</value>
        [DataMember(Name="video_id", EmitDefaultValue=false)]
        public string VideoId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Encoding {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AudioBitrate: ").Append(AudioBitrate).Append("\n");
            sb.Append("  AudioChannels: ").Append(AudioChannels).Append("\n");
            sb.Append("  AudioCodec: ").Append(AudioCodec).Append("\n");
            sb.Append("  AudioSampleRate: ").Append(AudioSampleRate).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  EncodingProgress: ").Append(EncodingProgress).Append("\n");
            sb.Append("  EncodingTime: ").Append(EncodingTime).Append("\n");
            sb.Append("  ErrorClass: ").Append(ErrorClass).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Extname: ").Append(Extname).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Fps: ").Append(Fps).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  LogfileUrl: ").Append(LogfileUrl).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  ParentEncodingId: ").Append(ParentEncodingId).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  ProfileName: ").Append(ProfileName).Append("\n");
            sb.Append("  Screenshots: ").Append(Screenshots).Append("\n");
            sb.Append("  StartedEncodingAt: ").Append(StartedEncodingAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  VideoBitrate: ").Append(VideoBitrate).Append("\n");
            sb.Append("  VideoCodec: ").Append(VideoCodec).Append("\n");
            sb.Append("  VideoId: ").Append(VideoId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Encoding);
        }

        /// <summary>
        /// Returns true if Encoding instances are equal
        /// </summary>
        /// <param name="input">Instance of Encoding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Encoding input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AudioBitrate == input.AudioBitrate ||
                    (this.AudioBitrate != null &&
                    this.AudioBitrate.Equals(input.AudioBitrate))
                ) && 
                (
                    this.AudioChannels == input.AudioChannels ||
                    (this.AudioChannels != null &&
                    this.AudioChannels.Equals(input.AudioChannels))
                ) && 
                (
                    this.AudioCodec == input.AudioCodec ||
                    (this.AudioCodec != null &&
                    this.AudioCodec.Equals(input.AudioCodec))
                ) && 
                (
                    this.AudioSampleRate == input.AudioSampleRate ||
                    (this.AudioSampleRate != null &&
                    this.AudioSampleRate.Equals(input.AudioSampleRate))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.EncodingProgress == input.EncodingProgress ||
                    (this.EncodingProgress != null &&
                    this.EncodingProgress.Equals(input.EncodingProgress))
                ) && 
                (
                    this.EncodingTime == input.EncodingTime ||
                    (this.EncodingTime != null &&
                    this.EncodingTime.Equals(input.EncodingTime))
                ) && 
                (
                    this.ErrorClass == input.ErrorClass ||
                    (this.ErrorClass != null &&
                    this.ErrorClass.Equals(input.ErrorClass))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Extname == input.Extname ||
                    (this.Extname != null &&
                    this.Extname.Equals(input.Extname))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                ) && 
                (
                    this.Fps == input.Fps ||
                    (this.Fps != null &&
                    this.Fps.Equals(input.Fps))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.LogfileUrl == input.LogfileUrl ||
                    (this.LogfileUrl != null &&
                    this.LogfileUrl.Equals(input.LogfileUrl))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.ParentEncodingId == input.ParentEncodingId ||
                    (this.ParentEncodingId != null &&
                    this.ParentEncodingId.Equals(input.ParentEncodingId))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.ProfileId == input.ProfileId ||
                    (this.ProfileId != null &&
                    this.ProfileId.Equals(input.ProfileId))
                ) && 
                (
                    this.ProfileName == input.ProfileName ||
                    (this.ProfileName != null &&
                    this.ProfileName.Equals(input.ProfileName))
                ) && 
                (
                    this.Screenshots == input.Screenshots ||
                    this.Screenshots != null &&
                    this.Screenshots.SequenceEqual(input.Screenshots)
                ) && 
                (
                    this.StartedEncodingAt == input.StartedEncodingAt ||
                    (this.StartedEncodingAt != null &&
                    this.StartedEncodingAt.Equals(input.StartedEncodingAt))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.VideoBitrate == input.VideoBitrate ||
                    (this.VideoBitrate != null &&
                    this.VideoBitrate.Equals(input.VideoBitrate))
                ) && 
                (
                    this.VideoCodec == input.VideoCodec ||
                    (this.VideoCodec != null &&
                    this.VideoCodec.Equals(input.VideoCodec))
                ) && 
                (
                    this.VideoId == input.VideoId ||
                    (this.VideoId != null &&
                    this.VideoId.Equals(input.VideoId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AudioBitrate != null)
                    hashCode = hashCode * 59 + this.AudioBitrate.GetHashCode();
                if (this.AudioChannels != null)
                    hashCode = hashCode * 59 + this.AudioChannels.GetHashCode();
                if (this.AudioCodec != null)
                    hashCode = hashCode * 59 + this.AudioCodec.GetHashCode();
                if (this.AudioSampleRate != null)
                    hashCode = hashCode * 59 + this.AudioSampleRate.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.EncodingProgress != null)
                    hashCode = hashCode * 59 + this.EncodingProgress.GetHashCode();
                if (this.EncodingTime != null)
                    hashCode = hashCode * 59 + this.EncodingTime.GetHashCode();
                if (this.ErrorClass != null)
                    hashCode = hashCode * 59 + this.ErrorClass.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.Extname != null)
                    hashCode = hashCode * 59 + this.Extname.GetHashCode();
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                if (this.Fps != null)
                    hashCode = hashCode * 59 + this.Fps.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.LogfileUrl != null)
                    hashCode = hashCode * 59 + this.LogfileUrl.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.ParentEncodingId != null)
                    hashCode = hashCode * 59 + this.ParentEncodingId.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.ProfileId != null)
                    hashCode = hashCode * 59 + this.ProfileId.GetHashCode();
                if (this.ProfileName != null)
                    hashCode = hashCode * 59 + this.ProfileName.GetHashCode();
                if (this.Screenshots != null)
                    hashCode = hashCode * 59 + this.Screenshots.GetHashCode();
                if (this.StartedEncodingAt != null)
                    hashCode = hashCode * 59 + this.StartedEncodingAt.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.VideoBitrate != null)
                    hashCode = hashCode * 59 + this.VideoBitrate.GetHashCode();
                if (this.VideoCodec != null)
                    hashCode = hashCode * 59 + this.VideoCodec.GetHashCode();
                if (this.VideoId != null)
                    hashCode = hashCode * 59 + this.VideoId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
