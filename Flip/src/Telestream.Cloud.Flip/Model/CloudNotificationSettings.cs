/* 
 * Flip API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.1
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Flip.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Flip.Model
{
    /// <summary>
    /// CloudNotificationSettings
    /// </summary>
    [DataContract]
    public partial class CloudNotificationSettings :  IEquatable<CloudNotificationSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CloudNotificationSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CloudNotificationSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CloudNotificationSettings" /> class.
        /// </summary>
        /// <param name="Url">Notifications will be sent to this endpoint. (required).</param>
        /// <param name="Delay">Delay (required).</param>
        /// <param name="SendVideoPayload">Determines whether a video payload will be included in notification messages. (required).</param>
        /// <param name="Events">Events (required).</param>
        public CloudNotificationSettings(string Url = default(string), int? Delay = default(int?), bool? SendVideoPayload = default(bool?), CloudNotificationSettingsEvents Events = default(CloudNotificationSettingsEvents))
        {
            // to ensure "Url" is required (not null)
            if (Url == null)
            {
                throw new InvalidDataException("Url is a required property for CloudNotificationSettings and cannot be null");
            }
            else
            {
                this.Url = Url;
            }
            // to ensure "Delay" is required (not null)
            if (Delay == null)
            {
                throw new InvalidDataException("Delay is a required property for CloudNotificationSettings and cannot be null");
            }
            else
            {
                this.Delay = Delay;
            }
            // to ensure "SendVideoPayload" is required (not null)
            if (SendVideoPayload == null)
            {
                throw new InvalidDataException("SendVideoPayload is a required property for CloudNotificationSettings and cannot be null");
            }
            else
            {
                this.SendVideoPayload = SendVideoPayload;
            }
            // to ensure "Events" is required (not null)
            if (Events == null)
            {
                throw new InvalidDataException("Events is a required property for CloudNotificationSettings and cannot be null");
            }
            else
            {
                this.Events = Events;
            }
        }
        
        /// <summary>
        /// Notifications will be sent to this endpoint.
        /// </summary>
        /// <value>Notifications will be sent to this endpoint.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Delay
        /// </summary>
        [DataMember(Name="delay", EmitDefaultValue=false)]
        public int? Delay { get; set; }

        /// <summary>
        /// Determines whether a video payload will be included in notification messages.
        /// </summary>
        /// <value>Determines whether a video payload will be included in notification messages.</value>
        [DataMember(Name="send_video_payload", EmitDefaultValue=false)]
        public bool? SendVideoPayload { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public CloudNotificationSettingsEvents Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CloudNotificationSettings {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("  SendVideoPayload: ").Append(SendVideoPayload).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CloudNotificationSettings);
        }

        /// <summary>
        /// Returns true if CloudNotificationSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of CloudNotificationSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CloudNotificationSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Delay == input.Delay ||
                    (this.Delay != null &&
                    this.Delay.Equals(input.Delay))
                ) && 
                (
                    this.SendVideoPayload == input.SendVideoPayload ||
                    (this.SendVideoPayload != null &&
                    this.SendVideoPayload.Equals(input.SendVideoPayload))
                ) && 
                (
                    this.Events == input.Events ||
                    (this.Events != null &&
                    this.Events.Equals(input.Events))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Delay != null)
                    hashCode = hashCode * 59 + this.Delay.GetHashCode();
                if (this.SendVideoPayload != null)
                    hashCode = hashCode * 59 + this.SendVideoPayload.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                return hashCode;
            }
        }
    }

}
