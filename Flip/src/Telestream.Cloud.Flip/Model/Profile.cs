/* 
 * Flip API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.1
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Telestream.Cloud.Flip.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Flip.Model
{
    /// <summary>
    /// Profile
    /// </summary>
    [DataContract]
    public partial class Profile :  IEquatable<Profile>, IValidatableObject
    {
        /// <summary>
        /// todo
        /// </summary>
        /// <value>todo</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AdvancedFpsConversionEnum
        {
            
            /// <summary>
            /// Enum Telestream for value: telestream
            /// </summary>
            [EnumMember(Value = "telestream")]
            Telestream = 1,
            
            /// <summary>
            /// Enum Tachyon for value: tachyon
            /// </summary>
            [EnumMember(Value = "tachyon")]
            Tachyon = 2
        }

        /// <summary>
        /// todo
        /// </summary>
        /// <value>todo</value>
        [DataMember(Name="advanced_fps_conversion", EmitDefaultValue=false)]
        public AdvancedFpsConversionEnum? AdvancedFpsConversion { get; set; }
        /// <summary>
        /// A channel layout specifies the spatial disposition of the channels in a multi-channel audio stream.
        /// </summary>
        /// <value>A channel layout specifies the spatial disposition of the channels in a multi-channel audio stream.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AudioChannelsLayoutEnum
        {
            
            /// <summary>
            /// Enum _10 for value: 1.0
            /// </summary>
            [EnumMember(Value = "1.0")]
            _10 = 1,
            
            /// <summary>
            /// Enum _20 for value: 2.0
            /// </summary>
            [EnumMember(Value = "2.0")]
            _20 = 2,
            
            /// <summary>
            /// Enum _21 for value: 2.1
            /// </summary>
            [EnumMember(Value = "2.1")]
            _21 = 3,
            
            /// <summary>
            /// Enum _30 for value: 3.0
            /// </summary>
            [EnumMember(Value = "3.0")]
            _30 = 4,
            
            /// <summary>
            /// Enum _30back for value: 3.0(back)
            /// </summary>
            [EnumMember(Value = "3.0(back)")]
            _30back = 5,
            
            /// <summary>
            /// Enum _31 for value: 3.1
            /// </summary>
            [EnumMember(Value = "3.1")]
            _31 = 6,
            
            /// <summary>
            /// Enum _40 for value: 4.0
            /// </summary>
            [EnumMember(Value = "4.0")]
            _40 = 7,
            
            /// <summary>
            /// Enum _41 for value: 4.1
            /// </summary>
            [EnumMember(Value = "4.1")]
            _41 = 8,
            
            /// <summary>
            /// Enum Quad for value: quad
            /// </summary>
            [EnumMember(Value = "quad")]
            Quad = 9,
            
            /// <summary>
            /// Enum _50 for value: 5.0
            /// </summary>
            [EnumMember(Value = "5.0")]
            _50 = 10,
            
            /// <summary>
            /// Enum _50side for value: 5.0(side)
            /// </summary>
            [EnumMember(Value = "5.0(side)")]
            _50side = 11,
            
            /// <summary>
            /// Enum _51side for value: 5.1(side)
            /// </summary>
            [EnumMember(Value = "5.1(side)")]
            _51side = 12,
            
            /// <summary>
            /// Enum _60 for value: 6.0
            /// </summary>
            [EnumMember(Value = "6.0")]
            _60 = 13,
            
            /// <summary>
            /// Enum _61 for value: 6.1
            /// </summary>
            [EnumMember(Value = "6.1")]
            _61 = 14,
            
            /// <summary>
            /// Enum _70 for value: 7.0
            /// </summary>
            [EnumMember(Value = "7.0")]
            _70 = 15,
            
            /// <summary>
            /// Enum _71 for value: 7.1
            /// </summary>
            [EnumMember(Value = "7.1")]
            _71 = 16,
            
            /// <summary>
            /// Enum Mono for value: mono
            /// </summary>
            [EnumMember(Value = "mono")]
            Mono = 17,
            
            /// <summary>
            /// Enum Stereo for value: stereo
            /// </summary>
            [EnumMember(Value = "stereo")]
            Stereo = 18
        }

        /// <summary>
        /// A channel layout specifies the spatial disposition of the channels in a multi-channel audio stream.
        /// </summary>
        /// <value>A channel layout specifies the spatial disposition of the channels in a multi-channel audio stream.</value>
        [DataMember(Name="audio_channels_layout", EmitDefaultValue=false)]
        public AudioChannelsLayoutEnum? AudioChannelsLayout { get; set; }
        /// <summary>
        /// Specifies an audio container.
        /// </summary>
        /// <value>Specifies an audio container.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AudioFormatEnum
        {
            
            /// <summary>
            /// Enum S24le for value: pcm_s24le
            /// </summary>
            [EnumMember(Value = "pcm_s24le")]
            S24le = 1,
            
            /// <summary>
            /// Enum S16le for value: pcm_s16le
            /// </summary>
            [EnumMember(Value = "pcm_s16le")]
            S16le = 2
        }

        /// <summary>
        /// Specifies an audio container.
        /// </summary>
        /// <value>Specifies an audio container.</value>
        [DataMember(Name="audio_format", EmitDefaultValue=false)]
        public AudioFormatEnum? AudioFormat { get; set; }
        /// <summary>
        /// A class of the AVC-Intra video coding.
        /// </summary>
        /// <value>A class of the AVC-Intra video coding.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AvcintraClassEnum
        {
            
            /// <summary>
            /// Enum _50 for value: 50
            /// </summary>
            [EnumMember(Value = "50")]
            _50 = 1,
            
            /// <summary>
            /// Enum _100 for value: 100
            /// </summary>
            [EnumMember(Value = "100")]
            _100 = 2
        }

        /// <summary>
        /// A class of the AVC-Intra video coding.
        /// </summary>
        /// <value>A class of the AVC-Intra video coding.</value>
        [DataMember(Name="avcintra_class", EmitDefaultValue=false)]
        public AvcintraClassEnum? AvcintraClass { get; set; }
        /// <summary>
        /// One of add (adds captions as a separate streams) or burn (burns captions on video stream using the first subtitle file). By default it is not set.
        /// </summary>
        /// <value>One of add (adds captions as a separate streams) or burn (burns captions on video stream using the first subtitle file). By default it is not set.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClosedCaptionsEnum
        {
            
            /// <summary>
            /// Enum Add for value: add
            /// </summary>
            [EnumMember(Value = "add")]
            Add = 1,
            
            /// <summary>
            /// Enum Burn for value: burn
            /// </summary>
            [EnumMember(Value = "burn")]
            Burn = 2
        }

        /// <summary>
        /// One of add (adds captions as a separate streams) or burn (burns captions on video stream using the first subtitle file). By default it is not set.
        /// </summary>
        /// <value>One of add (adds captions as a separate streams) or burn (burns captions on video stream using the first subtitle file). By default it is not set.</value>
        [DataMember(Name="closed_captions", EmitDefaultValue=false)]
        public ClosedCaptionsEnum? ClosedCaptions { get; set; }
        /// <summary>
        /// Defines DnxhdType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DnxhdTypeEnum
        {
            
            /// <summary>
            /// Enum _36 for value: 36
            /// </summary>
            [EnumMember(Value = "36")]
            _36 = 1,
            
            /// <summary>
            /// Enum _45 for value: 45
            /// </summary>
            [EnumMember(Value = "45")]
            _45 = 2,
            
            /// <summary>
            /// Enum _60 for value: 60
            /// </summary>
            [EnumMember(Value = "60")]
            _60 = 3,
            
            /// <summary>
            /// Enum _75 for value: 75
            /// </summary>
            [EnumMember(Value = "75")]
            _75 = 4,
            
            /// <summary>
            /// Enum _90 for value: 90
            /// </summary>
            [EnumMember(Value = "90")]
            _90 = 5,
            
            /// <summary>
            /// Enum _90x for value: 90x
            /// </summary>
            [EnumMember(Value = "90x")]
            _90x = 6,
            
            /// <summary>
            /// Enum _110 for value: 110
            /// </summary>
            [EnumMember(Value = "110")]
            _110 = 7,
            
            /// <summary>
            /// Enum _115 for value: 115
            /// </summary>
            [EnumMember(Value = "115")]
            _115 = 8,
            
            /// <summary>
            /// Enum _120 for value: 120
            /// </summary>
            [EnumMember(Value = "120")]
            _120 = 9,
            
            /// <summary>
            /// Enum _145 for value: 145
            /// </summary>
            [EnumMember(Value = "145")]
            _145 = 10,
            
            /// <summary>
            /// Enum _175x for value: 175x
            /// </summary>
            [EnumMember(Value = "175x")]
            _175x = 11,
            
            /// <summary>
            /// Enum _175 for value: 175
            /// </summary>
            [EnumMember(Value = "175")]
            _175 = 12,
            
            /// <summary>
            /// Enum _185x for value: 185x
            /// </summary>
            [EnumMember(Value = "185x")]
            _185x = 13,
            
            /// <summary>
            /// Enum _185 for value: 185
            /// </summary>
            [EnumMember(Value = "185")]
            _185 = 14,
            
            /// <summary>
            /// Enum _220x for value: 220x
            /// </summary>
            [EnumMember(Value = "220x")]
            _220x = 15,
            
            /// <summary>
            /// Enum _220 for value: 220
            /// </summary>
            [EnumMember(Value = "220")]
            _220 = 16
        }

        /// <summary>
        /// Gets or Sets DnxhdType
        /// </summary>
        [DataMember(Name="dnxhd_type", EmitDefaultValue=false)]
        public DnxhdTypeEnum? DnxhdType { get; set; }
        /// <summary>
        /// A specified set of constraints that indicate a degree of required decoder performance for a profile.
        /// </summary>
        /// <value>A specified set of constraints that indicate a degree of required decoder performance for a profile.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum H264LevelEnum
        {
            
            /// <summary>
            /// Enum _10 for value: 1.0
            /// </summary>
            [EnumMember(Value = "1.0")]
            _10 = 1,
            
            /// <summary>
            /// Enum _1b for value: 1b
            /// </summary>
            [EnumMember(Value = "1b")]
            _1b = 2,
            
            /// <summary>
            /// Enum _11 for value: 1.1
            /// </summary>
            [EnumMember(Value = "1.1")]
            _11 = 3,
            
            /// <summary>
            /// Enum _12 for value: 1.2
            /// </summary>
            [EnumMember(Value = "1.2")]
            _12 = 4,
            
            /// <summary>
            /// Enum _13 for value: 1.3
            /// </summary>
            [EnumMember(Value = "1.3")]
            _13 = 5,
            
            /// <summary>
            /// Enum _20 for value: 2.0
            /// </summary>
            [EnumMember(Value = "2.0")]
            _20 = 6,
            
            /// <summary>
            /// Enum _21 for value: 2.1
            /// </summary>
            [EnumMember(Value = "2.1")]
            _21 = 7,
            
            /// <summary>
            /// Enum _22 for value: 2.2
            /// </summary>
            [EnumMember(Value = "2.2")]
            _22 = 8,
            
            /// <summary>
            /// Enum _30 for value: 3.0
            /// </summary>
            [EnumMember(Value = "3.0")]
            _30 = 9,
            
            /// <summary>
            /// Enum _31 for value: 3.1
            /// </summary>
            [EnumMember(Value = "3.1")]
            _31 = 10,
            
            /// <summary>
            /// Enum _32 for value: 3.2
            /// </summary>
            [EnumMember(Value = "3.2")]
            _32 = 11,
            
            /// <summary>
            /// Enum _40 for value: 4.0
            /// </summary>
            [EnumMember(Value = "4.0")]
            _40 = 12,
            
            /// <summary>
            /// Enum _41 for value: 4.1
            /// </summary>
            [EnumMember(Value = "4.1")]
            _41 = 13,
            
            /// <summary>
            /// Enum _42 for value: 4.2
            /// </summary>
            [EnumMember(Value = "4.2")]
            _42 = 14,
            
            /// <summary>
            /// Enum _50 for value: 5.0
            /// </summary>
            [EnumMember(Value = "5.0")]
            _50 = 15,
            
            /// <summary>
            /// Enum _51 for value: 5.1
            /// </summary>
            [EnumMember(Value = "5.1")]
            _51 = 16
        }

        /// <summary>
        /// A specified set of constraints that indicate a degree of required decoder performance for a profile.
        /// </summary>
        /// <value>A specified set of constraints that indicate a degree of required decoder performance for a profile.</value>
        [DataMember(Name="h264_level", EmitDefaultValue=false)]
        public H264LevelEnum? H264Level { get; set; }
        /// <summary>
        /// Profiles represent a sub-set of the encoding techniques available in H.264.
        /// </summary>
        /// <value>Profiles represent a sub-set of the encoding techniques available in H.264.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum H264ProfileEnum
        {
            
            /// <summary>
            /// Enum Baseline for value: baseline
            /// </summary>
            [EnumMember(Value = "baseline")]
            Baseline = 1,
            
            /// <summary>
            /// Enum Main for value: main
            /// </summary>
            [EnumMember(Value = "main")]
            Main = 2,
            
            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 3,
            
            /// <summary>
            /// Enum High10 for value: high10
            /// </summary>
            [EnumMember(Value = "high10")]
            High10 = 4,
            
            /// <summary>
            /// Enum High422 for value: high422
            /// </summary>
            [EnumMember(Value = "high422")]
            High422 = 5,
            
            /// <summary>
            /// Enum High444 for value: high444
            /// </summary>
            [EnumMember(Value = "high444")]
            High444 = 6
        }

        /// <summary>
        /// Profiles represent a sub-set of the encoding techniques available in H.264.
        /// </summary>
        /// <value>Profiles represent a sub-set of the encoding techniques available in H.264.</value>
        [DataMember(Name="h264_profile", EmitDefaultValue=false)]
        public H264ProfileEnum? H264Profile { get; set; }
        /// <summary>
        /// Specifies a h264 tuning option.
        /// </summary>
        /// <value>Specifies a h264 tuning option.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum H264TuneEnum
        {
            
            /// <summary>
            /// Enum Film for value: film
            /// </summary>
            [EnumMember(Value = "film")]
            Film = 1,
            
            /// <summary>
            /// Enum Animation for value: animation
            /// </summary>
            [EnumMember(Value = "animation")]
            Animation = 2,
            
            /// <summary>
            /// Enum Grain for value: grain
            /// </summary>
            [EnumMember(Value = "grain")]
            Grain = 3,
            
            /// <summary>
            /// Enum Psnr for value: psnr
            /// </summary>
            [EnumMember(Value = "psnr")]
            Psnr = 4,
            
            /// <summary>
            /// Enum Ssim for value: ssim
            /// </summary>
            [EnumMember(Value = "ssim")]
            Ssim = 5,
            
            /// <summary>
            /// Enum Fastdecode for value: fastdecode
            /// </summary>
            [EnumMember(Value = "fastdecode")]
            Fastdecode = 6,
            
            /// <summary>
            /// Enum Zerolatency for value: zerolatency
            /// </summary>
            [EnumMember(Value = "zerolatency")]
            Zerolatency = 7
        }

        /// <summary>
        /// Specifies a h264 tuning option.
        /// </summary>
        /// <value>Specifies a h264 tuning option.</value>
        [DataMember(Name="h264_tune", EmitDefaultValue=false)]
        public H264TuneEnum? H264Tune { get; set; }
        /// <summary>
        /// Defines PlaylistType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlaylistTypeEnum
        {
            
            /// <summary>
            /// Enum Iframe for value: iframe
            /// </summary>
            [EnumMember(Value = "iframe")]
            Iframe = 1,
            
            /// <summary>
            /// Enum IframeOnly for value: iframe-only
            /// </summary>
            [EnumMember(Value = "iframe-only")]
            IframeOnly = 2
        }

        /// <summary>
        /// Gets or Sets PlaylistType
        /// </summary>
        [DataMember(Name="playlist_type", EmitDefaultValue=false)]
        public PlaylistTypeEnum? PlaylistType { get; set; }
        /// <summary>
        /// Defines TelestreamBlockSize
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TelestreamBlockSizeEnum
        {
            
            /// <summary>
            /// Enum _16x16 for value: 16x16
            /// </summary>
            [EnumMember(Value = "16x16")]
            _16x16 = 1,
            
            /// <summary>
            /// Enum _24x24 for value: 24x24
            /// </summary>
            [EnumMember(Value = "24x24")]
            _24x24 = 2,
            
            /// <summary>
            /// Enum _32x32 for value: 32x32
            /// </summary>
            [EnumMember(Value = "32x32")]
            _32x32 = 3
        }

        /// <summary>
        /// Gets or Sets TelestreamBlockSize
        /// </summary>
        [DataMember(Name="telestream_block_size", EmitDefaultValue=false)]
        public TelestreamBlockSizeEnum? TelestreamBlockSize { get; set; }
        /// <summary>
        /// This setting determines how much Tachyon will trust motion vectors in the creation of new images
        /// </summary>
        /// <value>This setting determines how much Tachyon will trust motion vectors in the creation of new images</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TachyonMotionAmountEnum
        {
            
            /// <summary>
            /// Enum Xlow for value: xlow
            /// </summary>
            [EnumMember(Value = "xlow")]
            Xlow = 1,
            
            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 2,
            
            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            [EnumMember(Value = "medium")]
            Medium = 3,
            
            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 4,
            
            /// <summary>
            /// Enum Xhigh for value: xhigh
            /// </summary>
            [EnumMember(Value = "xhigh")]
            Xhigh = 5,
            
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto = 6
        }

        /// <summary>
        /// This setting determines how much Tachyon will trust motion vectors in the creation of new images
        /// </summary>
        /// <value>This setting determines how much Tachyon will trust motion vectors in the creation of new images</value>
        [DataMember(Name="tachyon_motion_amount", EmitDefaultValue=false)]
        public TachyonMotionAmountEnum? TachyonMotionAmount { get; set; }
        /// <summary>
        /// This option specifies the transition region size between fallback areas and motion compensated areas. A larger fallback size allows more blending (feathering) to occur between the regions.
        /// </summary>
        /// <value>This option specifies the transition region size between fallback areas and motion compensated areas. A larger fallback size allows more blending (feathering) to occur between the regions.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TachyonFallbackSizeEnum
        {
            
            /// <summary>
            /// Enum Small for value: small
            /// </summary>
            [EnumMember(Value = "small")]
            Small = 1,
            
            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            [EnumMember(Value = "medium")]
            Medium = 2,
            
            /// <summary>
            /// Enum Large for value: large
            /// </summary>
            [EnumMember(Value = "large")]
            Large = 3,
            
            /// <summary>
            /// Enum Xlarge for value: xlarge
            /// </summary>
            [EnumMember(Value = "xlarge")]
            Xlarge = 4,
            
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto = 5
        }

        /// <summary>
        /// This option specifies the transition region size between fallback areas and motion compensated areas. A larger fallback size allows more blending (feathering) to occur between the regions.
        /// </summary>
        /// <value>This option specifies the transition region size between fallback areas and motion compensated areas. A larger fallback size allows more blending (feathering) to occur between the regions.</value>
        [DataMember(Name="tachyon_fallback_size", EmitDefaultValue=false)]
        public TachyonFallbackSizeEnum? TachyonFallbackSize { get; set; }
        /// <summary>
        /// This option specifies the size of a motion block.
        /// </summary>
        /// <value>This option specifies the size of a motion block.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TachyonMblockSizeEnum
        {
            
            /// <summary>
            /// Enum Mb16 for value: mb16
            /// </summary>
            [EnumMember(Value = "mb16")]
            Mb16 = 1,
            
            /// <summary>
            /// Enum Mb32 for value: mb32
            /// </summary>
            [EnumMember(Value = "mb32")]
            Mb32 = 2,
            
            /// <summary>
            /// Enum Mb64 for value: mb64
            /// </summary>
            [EnumMember(Value = "mb64")]
            Mb64 = 3,
            
            /// <summary>
            /// Enum Mb128 for value: mb128
            /// </summary>
            [EnumMember(Value = "mb128")]
            Mb128 = 4,
            
            /// <summary>
            /// Enum Mb256 for value: mb256
            /// </summary>
            [EnumMember(Value = "mb256")]
            Mb256 = 5,
            
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto = 6
        }

        /// <summary>
        /// This option specifies the size of a motion block.
        /// </summary>
        /// <value>This option specifies the size of a motion block.</value>
        [DataMember(Name="tachyon_mblock_size", EmitDefaultValue=false)]
        public TachyonMblockSizeEnum? TachyonMblockSize { get; set; }
        /// <summary>
        /// Selects the type of audio service. **For 1/0 Voiceover will be used when Voiceover/Karaoke is selected. For 2/0 and above Karaoke will be used.
        /// </summary>
        /// <value>Selects the type of audio service. **For 1/0 Voiceover will be used when Voiceover/Karaoke is selected. For 2/0 and above Karaoke will be used.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Eac3BitstreamModeEnum
        {
            
            /// <summary>
            /// Enum M0 for value: m0
            /// </summary>
            [EnumMember(Value = "m0")]
            M0 = 1,
            
            /// <summary>
            /// Enum M1 for value: m1
            /// </summary>
            [EnumMember(Value = "m1")]
            M1 = 2,
            
            /// <summary>
            /// Enum M2 for value: m2
            /// </summary>
            [EnumMember(Value = "m2")]
            M2 = 3,
            
            /// <summary>
            /// Enum M3 for value: m3
            /// </summary>
            [EnumMember(Value = "m3")]
            M3 = 4,
            
            /// <summary>
            /// Enum M4 for value: m4
            /// </summary>
            [EnumMember(Value = "m4")]
            M4 = 5,
            
            /// <summary>
            /// Enum M5 for value: m5
            /// </summary>
            [EnumMember(Value = "m5")]
            M5 = 6,
            
            /// <summary>
            /// Enum M6 for value: m6
            /// </summary>
            [EnumMember(Value = "m6")]
            M6 = 7,
            
            /// <summary>
            /// Enum M7 for value: m7
            /// </summary>
            [EnumMember(Value = "m7")]
            M7 = 8
        }

        /// <summary>
        /// Selects the type of audio service. **For 1/0 Voiceover will be used when Voiceover/Karaoke is selected. For 2/0 and above Karaoke will be used.
        /// </summary>
        /// <value>Selects the type of audio service. **For 1/0 Voiceover will be used when Voiceover/Karaoke is selected. For 2/0 and above Karaoke will be used.</value>
        [DataMember(Name="eac3_bitstream_mode", EmitDefaultValue=false)]
        public Eac3BitstreamModeEnum? Eac3BitstreamMode { get; set; }
        /// <summary>
        /// Allows audio that has passed through an A/D conversion stage to be marked as such.
        /// </summary>
        /// <value>Allows audio that has passed through an A/D conversion stage to be marked as such.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Eac3AnalogToDigitalConverterTypeEnum
        {
            
            /// <summary>
            /// Enum Standard for value: standard
            /// </summary>
            [EnumMember(Value = "standard")]
            Standard = 1,
            
            /// <summary>
            /// Enum Hdcd for value: hdcd
            /// </summary>
            [EnumMember(Value = "hdcd")]
            Hdcd = 2
        }

        /// <summary>
        /// Allows audio that has passed through an A/D conversion stage to be marked as such.
        /// </summary>
        /// <value>Allows audio that has passed through an A/D conversion stage to be marked as such.</value>
        [DataMember(Name="eac3_analog_to_digital_converter_type", EmitDefaultValue=false)]
        public Eac3AnalogToDigitalConverterTypeEnum? Eac3AnalogToDigitalConverterType { get; set; }
        /// <summary>
        /// Defines Eac3StereoDownmixPreference
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Eac3StereoDownmixPreferenceEnum
        {
            
            /// <summary>
            /// Enum M0 for value: m0
            /// </summary>
            [EnumMember(Value = "m0")]
            M0 = 1,
            
            /// <summary>
            /// Enum M1 for value: m1
            /// </summary>
            [EnumMember(Value = "m1")]
            M1 = 2,
            
            /// <summary>
            /// Enum M2 for value: m2
            /// </summary>
            [EnumMember(Value = "m2")]
            M2 = 3,
            
            /// <summary>
            /// Enum M3 for value: m3
            /// </summary>
            [EnumMember(Value = "m3")]
            M3 = 4
        }

        /// <summary>
        /// Gets or Sets Eac3StereoDownmixPreference
        /// </summary>
        [DataMember(Name="eac3_stereo_downmix_preference", EmitDefaultValue=false)]
        public Eac3StereoDownmixPreferenceEnum? Eac3StereoDownmixPreference { get; set; }
        /// <summary>
        /// Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lt/Rt output.
        /// </summary>
        /// <value>Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lt/Rt output.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Eac3LtRtCenterMixLevelEnum
        {
            
            /// <summary>
            /// Enum C0 for value: c0
            /// </summary>
            [EnumMember(Value = "c0")]
            C0 = 1,
            
            /// <summary>
            /// Enum C1 for value: c1
            /// </summary>
            [EnumMember(Value = "c1")]
            C1 = 2,
            
            /// <summary>
            /// Enum C2 for value: c2
            /// </summary>
            [EnumMember(Value = "c2")]
            C2 = 3,
            
            /// <summary>
            /// Enum C3 for value: c3
            /// </summary>
            [EnumMember(Value = "c3")]
            C3 = 4,
            
            /// <summary>
            /// Enum C4 for value: c4
            /// </summary>
            [EnumMember(Value = "c4")]
            C4 = 5,
            
            /// <summary>
            /// Enum C5 for value: c5
            /// </summary>
            [EnumMember(Value = "c5")]
            C5 = 6,
            
            /// <summary>
            /// Enum C6 for value: c6
            /// </summary>
            [EnumMember(Value = "c6")]
            C6 = 7,
            
            /// <summary>
            /// Enum C7 for value: c7
            /// </summary>
            [EnumMember(Value = "c7")]
            C7 = 8
        }

        /// <summary>
        /// Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lt/Rt output.
        /// </summary>
        /// <value>Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lt/Rt output.</value>
        [DataMember(Name="eac3_lt_rt_center_mix_level", EmitDefaultValue=false)]
        public Eac3LtRtCenterMixLevelEnum? Eac3LtRtCenterMixLevel { get; set; }
        /// <summary>
        /// Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lt/Rt output.
        /// </summary>
        /// <value>Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lt/Rt output.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Eac3LtRtSurroundMixLevelEnum
        {
            
            /// <summary>
            /// Enum C3 for value: c3
            /// </summary>
            [EnumMember(Value = "c3")]
            C3 = 1,
            
            /// <summary>
            /// Enum C4 for value: c4
            /// </summary>
            [EnumMember(Value = "c4")]
            C4 = 2,
            
            /// <summary>
            /// Enum C5 for value: c5
            /// </summary>
            [EnumMember(Value = "c5")]
            C5 = 3,
            
            /// <summary>
            /// Enum C6 for value: c6
            /// </summary>
            [EnumMember(Value = "c6")]
            C6 = 4,
            
            /// <summary>
            /// Enum C7 for value: c7
            /// </summary>
            [EnumMember(Value = "c7")]
            C7 = 5
        }

        /// <summary>
        /// Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lt/Rt output.
        /// </summary>
        /// <value>Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lt/Rt output.</value>
        [DataMember(Name="eac3_lt_rt_surround_mix_level", EmitDefaultValue=false)]
        public Eac3LtRtSurroundMixLevelEnum? Eac3LtRtSurroundMixLevel { get; set; }
        /// <summary>
        /// Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lo/Ro output.
        /// </summary>
        /// <value>Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lo/Ro output.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Eac3LoRoCenterMixLevelEnum
        {
            
            /// <summary>
            /// Enum C0 for value: c0
            /// </summary>
            [EnumMember(Value = "c0")]
            C0 = 1,
            
            /// <summary>
            /// Enum C1 for value: c1
            /// </summary>
            [EnumMember(Value = "c1")]
            C1 = 2,
            
            /// <summary>
            /// Enum C2 for value: c2
            /// </summary>
            [EnumMember(Value = "c2")]
            C2 = 3,
            
            /// <summary>
            /// Enum C3 for value: c3
            /// </summary>
            [EnumMember(Value = "c3")]
            C3 = 4,
            
            /// <summary>
            /// Enum C4 for value: c4
            /// </summary>
            [EnumMember(Value = "c4")]
            C4 = 5,
            
            /// <summary>
            /// Enum C5 for value: c5
            /// </summary>
            [EnumMember(Value = "c5")]
            C5 = 6,
            
            /// <summary>
            /// Enum C6 for value: c6
            /// </summary>
            [EnumMember(Value = "c6")]
            C6 = 7,
            
            /// <summary>
            /// Enum C7 for value: c7
            /// </summary>
            [EnumMember(Value = "c7")]
            C7 = 8
        }

        /// <summary>
        /// Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lo/Ro output.
        /// </summary>
        /// <value>Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lo/Ro output.</value>
        [DataMember(Name="eac3_lo_ro_center_mix_level", EmitDefaultValue=false)]
        public Eac3LoRoCenterMixLevelEnum? Eac3LoRoCenterMixLevel { get; set; }
        /// <summary>
        /// Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lo/Ro output.
        /// </summary>
        /// <value>Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lo/Ro output.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Eac3LoRoSurroundMixLevelEnum
        {
            
            /// <summary>
            /// Enum C3 for value: c3
            /// </summary>
            [EnumMember(Value = "c3")]
            C3 = 1,
            
            /// <summary>
            /// Enum C4 for value: c4
            /// </summary>
            [EnumMember(Value = "c4")]
            C4 = 2,
            
            /// <summary>
            /// Enum C5 for value: c5
            /// </summary>
            [EnumMember(Value = "c5")]
            C5 = 3,
            
            /// <summary>
            /// Enum C6 for value: c6
            /// </summary>
            [EnumMember(Value = "c6")]
            C6 = 4,
            
            /// <summary>
            /// Enum C7 for value: c7
            /// </summary>
            [EnumMember(Value = "c7")]
            C7 = 5
        }

        /// <summary>
        /// Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lo/Ro output.
        /// </summary>
        /// <value>Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lo/Ro output.</value>
        [DataMember(Name="eac3_lo_ro_surround_mix_level", EmitDefaultValue=false)]
        public Eac3LoRoSurroundMixLevelEnum? Eac3LoRoSurroundMixLevel { get; set; }
        /// <summary>
        /// Indicates whether the audio stream was encoded using Dolby EX.
        /// </summary>
        /// <value>Indicates whether the audio stream was encoded using Dolby EX.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Eac3SurroundExModeEnum
        {
            
            /// <summary>
            /// Enum M0 for value: m0
            /// </summary>
            [EnumMember(Value = "m0")]
            M0 = 1,
            
            /// <summary>
            /// Enum M1 for value: m1
            /// </summary>
            [EnumMember(Value = "m1")]
            M1 = 2,
            
            /// <summary>
            /// Enum M2 for value: m2
            /// </summary>
            [EnumMember(Value = "m2")]
            M2 = 3
        }

        /// <summary>
        /// Indicates whether the audio stream was encoded using Dolby EX.
        /// </summary>
        /// <value>Indicates whether the audio stream was encoded using Dolby EX.</value>
        [DataMember(Name="eac3_surround_ex_mode", EmitDefaultValue=false)]
        public Eac3SurroundExModeEnum? Eac3SurroundExMode { get; set; }
        /// <summary>
        /// Dynamic Range Control for Line Mode.
        /// </summary>
        /// <value>Dynamic Range Control for Line Mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Eac3DrcLineModeProfileEnum
        {
            
            /// <summary>
            /// Enum P0 for value: p0
            /// </summary>
            [EnumMember(Value = "p0")]
            P0 = 1,
            
            /// <summary>
            /// Enum P1 for value: p1
            /// </summary>
            [EnumMember(Value = "p1")]
            P1 = 2,
            
            /// <summary>
            /// Enum P2 for value: p2
            /// </summary>
            [EnumMember(Value = "p2")]
            P2 = 3,
            
            /// <summary>
            /// Enum P3 for value: p3
            /// </summary>
            [EnumMember(Value = "p3")]
            P3 = 4,
            
            /// <summary>
            /// Enum P4 for value: p4
            /// </summary>
            [EnumMember(Value = "p4")]
            P4 = 5,
            
            /// <summary>
            /// Enum P5 for value: p5
            /// </summary>
            [EnumMember(Value = "p5")]
            P5 = 6
        }

        /// <summary>
        /// Dynamic Range Control for Line Mode.
        /// </summary>
        /// <value>Dynamic Range Control for Line Mode.</value>
        [DataMember(Name="eac3_drc_line_mode_profile", EmitDefaultValue=false)]
        public Eac3DrcLineModeProfileEnum? Eac3DrcLineModeProfile { get; set; }
        /// <summary>
        /// Dynamic Range Control for RF Mode.
        /// </summary>
        /// <value>Dynamic Range Control for RF Mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Eac3DrcRfModeProfileEnum
        {
            
            /// <summary>
            /// Enum P0 for value: p0
            /// </summary>
            [EnumMember(Value = "p0")]
            P0 = 1,
            
            /// <summary>
            /// Enum P1 for value: p1
            /// </summary>
            [EnumMember(Value = "p1")]
            P1 = 2,
            
            /// <summary>
            /// Enum P2 for value: p2
            /// </summary>
            [EnumMember(Value = "p2")]
            P2 = 3,
            
            /// <summary>
            /// Enum P3 for value: p3
            /// </summary>
            [EnumMember(Value = "p3")]
            P3 = 4,
            
            /// <summary>
            /// Enum P4 for value: p4
            /// </summary>
            [EnumMember(Value = "p4")]
            P4 = 5,
            
            /// <summary>
            /// Enum P5 for value: p5
            /// </summary>
            [EnumMember(Value = "p5")]
            P5 = 6
        }

        /// <summary>
        /// Dynamic Range Control for RF Mode.
        /// </summary>
        /// <value>Dynamic Range Control for RF Mode.</value>
        [DataMember(Name="eac3_drc_rf_mode_profile", EmitDefaultValue=false)]
        public Eac3DrcRfModeProfileEnum? Eac3DrcRfModeProfile { get; set; }
        /// <summary>
        /// Defines Eac3RoomType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Eac3RoomTypeEnum
        {
            
            /// <summary>
            /// Enum M0 for value: m0
            /// </summary>
            [EnumMember(Value = "m0")]
            M0 = 1,
            
            /// <summary>
            /// Enum M1 for value: m1
            /// </summary>
            [EnumMember(Value = "m1")]
            M1 = 2,
            
            /// <summary>
            /// Enum M2 for value: m2
            /// </summary>
            [EnumMember(Value = "m2")]
            M2 = 3
        }

        /// <summary>
        /// Gets or Sets Eac3RoomType
        /// </summary>
        [DataMember(Name="eac3_room_type", EmitDefaultValue=false)]
        public Eac3RoomTypeEnum? Eac3RoomType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Profile" /> class.
        /// </summary>
        /// <param name="AdvancedFpsConversion">todo.</param>
        /// <param name="AspectMode">Specifies an aspect mode for output videos. The following options are available:   - preserve   - constrain   - letterbox   - pad   - fill (crop)   - stretch   - center Default is \&quot;letterbox\&quot;..</param>
        /// <param name="AspectRatio">A display aspect ratio. By default it is not set..</param>
        /// <param name="AudioBitrate">audio bitrate (in bits/s).</param>
        /// <param name="AudioChannels">A number of audio channels. By default it is not set..</param>
        /// <param name="AudioChannelsLayout">A channel layout specifies the spatial disposition of the channels in a multi-channel audio stream..</param>
        /// <param name="AudioChannelsPerTrack">A number of audio channels per track..</param>
        /// <param name="AudioCodec">Audio codec that will be used by the profile. Available codecs are: &#x60;libmp3lame&#x60;, &#x60;libvorbis&#x60;, &#x60;libfdk_aac&#x60;, &#x60;dib_ac3, &#x60;pcm_s16le&#x60;, &#x60;mp2&#x60;, &#x60;ac3&#x60;, &#x60;eac3&#x60;..</param>
        /// <param name="AudioFormat">Specifies an audio container..</param>
        /// <param name="AudioMap">AudioMap.</param>
        /// <param name="AudioPid">Packet identifier used by MPEG formats..</param>
        /// <param name="AudioProfile">Specifies an audio profile..</param>
        /// <param name="AudioSampleRate">The number of samples of audio carried per second..</param>
        /// <param name="AudioStreamId">AudioStreamId.</param>
        /// <param name="AudioStreams">A number of audio streams..</param>
        /// <param name="AvcintraClass">A class of the AVC-Intra video coding..</param>
        /// <param name="BufferSize">Determines the size of the PulseAudio buffer. by default it is not set..</param>
        /// <param name="BufferSizeInPackets">todo.</param>
        /// <param name="Bumpers">Bumpers.</param>
        /// <param name="ByteRangeRequests">ByteRangeRequests.</param>
        /// <param name="ClipEnd">Clip ends at a specific time (timecode)..</param>
        /// <param name="PixelFormat">PixelFormat.</param>
        /// <param name="ClipLength">A clip’s duration..</param>
        /// <param name="ClipOffset">Clip starts at a specific offset..</param>
        /// <param name="ClosedCaptions">One of add (adds captions as a separate streams) or burn (burns captions on video stream using the first subtitle file). By default it is not set..</param>
        /// <param name="ColorMetadata">ColorMetadata.</param>
        /// <param name="CreatedAt">A date and time when the Profile has been created..</param>
        /// <param name="CropInputBottom">Distance (in pixels) from the bottom edge of the screen from which you want your crop to be done..</param>
        /// <param name="CropInputHeight">Width of the cropped image in pixels..</param>
        /// <param name="CropInputLeft">Distance (in pixels) from the left edge of the screen from which you want your crop to be done..</param>
        /// <param name="CropInputRight">Distance (in pixels) from the right edge of the screen from which you want your crop to be done..</param>
        /// <param name="CropInputTop">Distance (in pixels) from the top edge of the screen from which you want your crop to be done..</param>
        /// <param name="CropInputWidth">Height of the cropped image in pixels..</param>
        /// <param name="DashProfile">DashProfile.</param>
        /// <param name="Deinterlace">One of &#x60;keep_fps&#x60; or &#x60;double_fps&#x60;. By default it is not set..</param>
        /// <param name="DeinterlaceFrames">DeinterlaceFrames.</param>
        /// <param name="Description">Description of the profile..</param>
        /// <param name="DnxhdType">DnxhdType.</param>
        /// <param name="Encryption">Encryption.</param>
        /// <param name="Extname">File extension..</param>
        /// <param name="Fps">Null value copy the original fps. By default it is not set..</param>
        /// <param name="FrameCount">Evenly spaced number of generated screenshots. By default it is not set..</param>
        /// <param name="FrameInterval">Thumbnail interval (Frames or seconds)..</param>
        /// <param name="FrameOffsets">Array of offsets (Frames or seconds)..</param>
        /// <param name="H264Level">A specified set of constraints that indicate a degree of required decoder performance for a profile..</param>
        /// <param name="H264Profile">Profiles represent a sub-set of the encoding techniques available in H.264..</param>
        /// <param name="H264Tune">Specifies a h264 tuning option..</param>
        /// <param name="Height">Height in pixels..</param>
        /// <param name="Id">Id.</param>
        /// <param name="ImxType">ImxType.</param>
        /// <param name="Inputs">Inputs.</param>
        /// <param name="Interlace">Interlace.</param>
        /// <param name="KeyframeInterval">Adds a key frame every N frames. Default is 250, adds a key frame every 250 frames..</param>
        /// <param name="KeyframeRate">todo.</param>
        /// <param name="Lang">Lang.</param>
        /// <param name="MaxRate">A max bitrate tolerance (in bits/s). By default this is not set..</param>
        /// <param name="MergeAudioStreams">MergeAudioStreams.</param>
        /// <param name="MuteAudioTracks">Remove audio from input video file. By default it is set to &#x60;false&#x60;..</param>
        /// <param name="Name">A unique machine-readable name that will identify the profile. Helpful later on for filtering encodings by profile..</param>
        /// <param name="Outputs">Outputs.</param>
        /// <param name="OutputsPathFormat">Specify the directory where the output files should be stored. By default it is not set. More information about this [here](https://cloud.telestream.net/docs#path-format- --know-how)..</param>
        /// <param name="PlaylistType">PlaylistType.</param>
        /// <param name="PmtPid">PmtPid.</param>
        /// <param name="PresetName">a name of a preset that a profile will use..</param>
        /// <param name="ProresFormat">ProresFormat.</param>
        /// <param name="SegmentTime">Minimum value is 2, maximum is 60..</param>
        /// <param name="Stack">Stack.</param>
        /// <param name="StartingTimecode">StartingTimecode.</param>
        /// <param name="TelestreamBlockSize">TelestreamBlockSize.</param>
        /// <param name="TelestreamBlurScaler">Minimum value is 0, maximum is 4..</param>
        /// <param name="TelestreamCostScaler">Minimum value is 0, maximum is 4..</param>
        /// <param name="TelestreamSearchLengthScaler">Minimum value is 0, maximum is 2..</param>
        /// <param name="TelestreamSubpelMode">TelestreamSubpelMode.</param>
        /// <param name="TimeCode">If set, timestamps will be added to your videos. By default this is not set..</param>
        /// <param name="Title">Human-readable name..</param>
        /// <param name="Trailers">Trailers.</param>
        /// <param name="TransportRate">TransportRate.</param>
        /// <param name="TsPids">TsPids.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        /// <param name="Upscale">Upscale the video resolution to match your profile. Default is &#x60;true&#x60;..</param>
        /// <param name="UseEditlist">UseEditlist.</param>
        /// <param name="Variants">Pattern utilised to match HLS.Variant presets by name. Default is hls.*..</param>
        /// <param name="VideoBitrate">VideoBitrate.</param>
        /// <param name="VideoPid">VideoPid.</param>
        /// <param name="WatermarkBottom">Distance from the bottom of the video frame in pixels or percentage of video frame height. Works like CSS. Default is &#x60;0&#x60;..</param>
        /// <param name="WatermarkBumpers">WatermarkBumpers.</param>
        /// <param name="WatermarkHeight">Height of the watermark image in pixels or percentage of video frame height. Default is no resizing.</param>
        /// <param name="WatermarkLeft">Distance from the left of the video frame in pixels or percentage of video frame width. Works like CSS. Default is &#x60;0&#x60;..</param>
        /// <param name="WatermarkRight">Distance from the right of the video frame in pixels or percentage of video frame width. Works like CSS. Default is &#x60;0&#x60;..</param>
        /// <param name="WatermarkTop">Distance from the top of the video frame in pixels or percentage of video frame height. Works like CSS. Default is &#x60;0&#x60;..</param>
        /// <param name="WatermarkTrailers">WatermarkTrailers.</param>
        /// <param name="WatermarkUrl">Url of a watermark image..</param>
        /// <param name="WatermarkWidth">Width of the watermark image in pixels or percentage of video frame width. Default is &#x60;no resizing&#x60;..</param>
        /// <param name="Width">Width in pixels..</param>
        /// <param name="X264Options">X264Options.</param>
        /// <param name="X265Options">X265Options.</param>
        /// <param name="XdcamFormat">XdcamFormat.</param>
        /// <param name="TachyonAllowRemovePulldown">Enable more sensitive pulldown removal algorithm..</param>
        /// <param name="TachyonEnablePostPulldownFilter">If the images you are converting are composited 29.976, but the pulldown pattern was not adhered to when performing the composite, this setting is required to remove combing artifacts. It will also remove combing artifacts related to very poor 3:2 cadence..</param>
        /// <param name="TachyonMediaHintIsCartoon">TachyonMediaHintIsCartoon.</param>
        /// <param name="TachyonMediaHintHasChromaNoise">Remove chroma noise during the analysis of a video..</param>
        /// <param name="TachyonMoreSensitiveRemovePulldown">When pulldown is not achieved due to extremely broken cadence, or other factors like highly mixed content or if chroma noise masks motion, the pulldown engine may fall back to de-interlacing rather than removing telecine. If that&#39;s a case, a more sensitive pulldown pattern can be used. This algorithm favors inverse telecine and with lower thresholds for triggering pulldown identification, will maximize the number of progressive frames created from the video..</param>
        /// <param name="TachyonAllowAddStandardPd">TachyonAllowAddStandardPd.</param>
        /// <param name="TachyonAllowAdd22pd">Allows 2:2 (PSF) Insertion. Creates a new series of frames which are based on duplicating the field an interlacing it into top/bottom field. Maintains a film-look..</param>
        /// <param name="TachyonAllowAdd44pd">Allows 4:4 Insertion. Repeats each progressive frame twice on output (motion rate is halved). This setting is used when you want to convert to high progressive frame rates (i.e. 50p/59.94p/60p) but want to preserve film qualities (low motion rate, such as 24p)..</param>
        /// <param name="TachyonAllowAdd46pd">2:3 Insertion. inserts a standard 2:3 telecine pattern to 23.976p video stream to achieve a 29.97i frame rate.</param>
        /// <param name="TachyonAllowAddEuroPd">Allows Euro Insertion. For field based interpolation rather than pixel-based. This is designed for interlaced or progressive integer frame rate conversions that are being converted to interlaced outputs. This method is valid for 24p to 50i conversions only..</param>
        /// <param name="TachyonAllowAddAdaptivePd">Allows Adaptive Insertion. For field-based interpolation rather than using pixel-based interpolation. This algorithm is designed for both integer and non-integer frame rate conversion targets - as long as one of them is a non-integer rate (23.976, 29.97, 59.94, etc). This creates NTSC-PAL conversions clean of motion artifacts at the expense of potential slight stutter. Stutter is most noticeable with material that has smooth and uniform motion..</param>
        /// <param name="TachyonMotionAmount">This setting determines how much Tachyon will trust motion vectors in the creation of new images.</param>
        /// <param name="TachyonFallbackSize">This option specifies the transition region size between fallback areas and motion compensated areas. A larger fallback size allows more blending (feathering) to occur between the regions..</param>
        /// <param name="TachyonMblockSize">This option specifies the size of a motion block..</param>
        /// <param name="TachyonCutDetectionSensitivity">TachyonCutDetectionSensitivity.</param>
        /// <param name="Eac3EvolutionEnable">Enables the trusted metadata framework..</param>
        /// <param name="Eac3BitstreamMode">Selects the type of audio service. **For 1/0 Voiceover will be used when Voiceover/Karaoke is selected. For 2/0 and above Karaoke will be used..</param>
        /// <param name="Eac3NinetyDegreePhaseShift">Applies a 90-degree phase shift to the surround channels; necessary if the output file is being decoded by a Dolby Surround Pro Logic or Pro Logic II decoder..</param>
        /// <param name="Eac3ThreeDecibelAttenuation">Attenuates the surround channels by 3 dB before encoding..</param>
        /// <param name="Eac3EnableLfeLowPassFilter">Applies a 120 Hz eighth order lowpass filter to the LFE input prior to encoding..</param>
        /// <param name="Eac3AnalogToDigitalConverterType">Allows audio that has passed through an A/D conversion stage to be marked as such..</param>
        /// <param name="Eac3StereoDownmixPreference">Eac3StereoDownmixPreference.</param>
        /// <param name="Eac3LtRtCenterMixLevel">Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lt/Rt output..</param>
        /// <param name="Eac3LtRtSurroundMixLevel">Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lt/Rt output..</param>
        /// <param name="Eac3LoRoCenterMixLevel">Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lo/Ro output..</param>
        /// <param name="Eac3LoRoSurroundMixLevel">Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lo/Ro output..</param>
        /// <param name="Eac3SurroundExMode">Indicates whether the audio stream was encoded using Dolby EX..</param>
        /// <param name="Eac3DrcLineModeProfile">Dynamic Range Control for Line Mode..</param>
        /// <param name="Eac3DrcRfModeProfile">Dynamic Range Control for RF Mode..</param>
        /// <param name="Eac3DialogNormalization">Represents the volume level of dialog in the audio stream which can be used by a Dolby Digital decoder. This aids the decoder in matching volume between program sources. Minimum value is 1, maximum is 31..</param>
        /// <param name="Eac3RoomType">Eac3RoomType.</param>
        /// <param name="Eac3MixingLevel">Minimum value is 80, maximum is 111..</param>
        /// <param name="Eac3CopyrightProtected">Indicates whether the encoded bitstream is copyright protected..</param>
        /// <param name="Eac3OriginalBitstream">Indicates whether the encoded bitstream is the master version, or a copy..</param>
        public Profile(AdvancedFpsConversionEnum? AdvancedFpsConversion = default(AdvancedFpsConversionEnum?), string AspectMode = default(string), string AspectRatio = default(string), int? AudioBitrate = default(int?), int? AudioChannels = default(int?), AudioChannelsLayoutEnum? AudioChannelsLayout = default(AudioChannelsLayoutEnum?), int? AudioChannelsPerTrack = default(int?), string AudioCodec = default(string), AudioFormatEnum? AudioFormat = default(AudioFormatEnum?), string AudioMap = default(string), string AudioPid = default(string), string AudioProfile = default(string), int? AudioSampleRate = default(int?), int? AudioStreamId = default(int?), int? AudioStreams = default(int?), AvcintraClassEnum? AvcintraClass = default(AvcintraClassEnum?), int? BufferSize = default(int?), string BufferSizeInPackets = default(string), Object Bumpers = default(Object), bool? ByteRangeRequests = default(bool?), string ClipEnd = default(string), string PixelFormat = default(string), string ClipLength = default(string), string ClipOffset = default(string), ClosedCaptionsEnum? ClosedCaptions = default(ClosedCaptionsEnum?), bool? ColorMetadata = default(bool?), string CreatedAt = default(string), string CropInputBottom = default(string), string CropInputHeight = default(string), string CropInputLeft = default(string), string CropInputRight = default(string), string CropInputTop = default(string), decimal? CropInputWidth = default(decimal?), string DashProfile = default(string), string Deinterlace = default(string), string DeinterlaceFrames = default(string), string Description = default(string), DnxhdTypeEnum? DnxhdType = default(DnxhdTypeEnum?), bool? Encryption = default(bool?), string Extname = default(string), decimal? Fps = default(decimal?), int? FrameCount = default(int?), string FrameInterval = default(string), string FrameOffsets = default(string), H264LevelEnum? H264Level = default(H264LevelEnum?), H264ProfileEnum? H264Profile = default(H264ProfileEnum?), H264TuneEnum? H264Tune = default(H264TuneEnum?), int? Height = default(int?), string Id = default(string), string ImxType = default(string), Object Inputs = default(Object), string Interlace = default(string), int? KeyframeInterval = default(int?), string KeyframeRate = default(string), string Lang = default(string), int? MaxRate = default(int?), string MergeAudioStreams = default(string), bool? MuteAudioTracks = default(bool?), string Name = default(string), Object Outputs = default(Object), string OutputsPathFormat = default(string), PlaylistTypeEnum? PlaylistType = default(PlaylistTypeEnum?), string PmtPid = default(string), string PresetName = default(string), string ProresFormat = default(string), int? SegmentTime = default(int?), string Stack = default(string), string StartingTimecode = default(string), TelestreamBlockSizeEnum? TelestreamBlockSize = default(TelestreamBlockSizeEnum?), decimal? TelestreamBlurScaler = default(decimal?), decimal? TelestreamCostScaler = default(decimal?), int? TelestreamSearchLengthScaler = default(int?), bool? TelestreamSubpelMode = default(bool?), string TimeCode = default(string), string Title = default(string), Object Trailers = default(Object), string TransportRate = default(string), string TsPids = default(string), string UpdatedAt = default(string), bool? Upscale = default(bool?), bool? UseEditlist = default(bool?), string Variants = default(string), int? VideoBitrate = default(int?), string VideoPid = default(string), string WatermarkBottom = default(string), bool? WatermarkBumpers = default(bool?), string WatermarkHeight = default(string), string WatermarkLeft = default(string), string WatermarkRight = default(string), string WatermarkTop = default(string), bool? WatermarkTrailers = default(bool?), string WatermarkUrl = default(string), string WatermarkWidth = default(string), int? Width = default(int?), string X264Options = default(string), string X265Options = default(string), string XdcamFormat = default(string), bool? TachyonAllowRemovePulldown = default(bool?), bool? TachyonEnablePostPulldownFilter = default(bool?), bool? TachyonMediaHintIsCartoon = default(bool?), bool? TachyonMediaHintHasChromaNoise = default(bool?), bool? TachyonMoreSensitiveRemovePulldown = default(bool?), bool? TachyonAllowAddStandardPd = default(bool?), bool? TachyonAllowAdd22pd = default(bool?), bool? TachyonAllowAdd44pd = default(bool?), bool? TachyonAllowAdd46pd = default(bool?), bool? TachyonAllowAddEuroPd = default(bool?), bool? TachyonAllowAddAdaptivePd = default(bool?), TachyonMotionAmountEnum? TachyonMotionAmount = default(TachyonMotionAmountEnum?), TachyonFallbackSizeEnum? TachyonFallbackSize = default(TachyonFallbackSizeEnum?), TachyonMblockSizeEnum? TachyonMblockSize = default(TachyonMblockSizeEnum?), decimal? TachyonCutDetectionSensitivity = default(decimal?), bool? Eac3EvolutionEnable = default(bool?), Eac3BitstreamModeEnum? Eac3BitstreamMode = default(Eac3BitstreamModeEnum?), bool? Eac3NinetyDegreePhaseShift = default(bool?), bool? Eac3ThreeDecibelAttenuation = default(bool?), bool? Eac3EnableLfeLowPassFilter = default(bool?), Eac3AnalogToDigitalConverterTypeEnum? Eac3AnalogToDigitalConverterType = default(Eac3AnalogToDigitalConverterTypeEnum?), Eac3StereoDownmixPreferenceEnum? Eac3StereoDownmixPreference = default(Eac3StereoDownmixPreferenceEnum?), Eac3LtRtCenterMixLevelEnum? Eac3LtRtCenterMixLevel = default(Eac3LtRtCenterMixLevelEnum?), Eac3LtRtSurroundMixLevelEnum? Eac3LtRtSurroundMixLevel = default(Eac3LtRtSurroundMixLevelEnum?), Eac3LoRoCenterMixLevelEnum? Eac3LoRoCenterMixLevel = default(Eac3LoRoCenterMixLevelEnum?), Eac3LoRoSurroundMixLevelEnum? Eac3LoRoSurroundMixLevel = default(Eac3LoRoSurroundMixLevelEnum?), Eac3SurroundExModeEnum? Eac3SurroundExMode = default(Eac3SurroundExModeEnum?), Eac3DrcLineModeProfileEnum? Eac3DrcLineModeProfile = default(Eac3DrcLineModeProfileEnum?), Eac3DrcRfModeProfileEnum? Eac3DrcRfModeProfile = default(Eac3DrcRfModeProfileEnum?), int? Eac3DialogNormalization = default(int?), Eac3RoomTypeEnum? Eac3RoomType = default(Eac3RoomTypeEnum?), int? Eac3MixingLevel = default(int?), bool? Eac3CopyrightProtected = default(bool?), bool? Eac3OriginalBitstream = default(bool?))
        {
            this.AdvancedFpsConversion = AdvancedFpsConversion;
            this.AspectMode = AspectMode;
            this.AspectRatio = AspectRatio;
            this.AudioBitrate = AudioBitrate;
            this.AudioChannels = AudioChannels;
            this.AudioChannelsLayout = AudioChannelsLayout;
            this.AudioChannelsPerTrack = AudioChannelsPerTrack;
            this.AudioCodec = AudioCodec;
            this.AudioFormat = AudioFormat;
            this.AudioMap = AudioMap;
            this.AudioPid = AudioPid;
            this.AudioProfile = AudioProfile;
            this.AudioSampleRate = AudioSampleRate;
            this.AudioStreamId = AudioStreamId;
            this.AudioStreams = AudioStreams;
            this.AvcintraClass = AvcintraClass;
            this.BufferSize = BufferSize;
            this.BufferSizeInPackets = BufferSizeInPackets;
            this.Bumpers = Bumpers;
            this.ByteRangeRequests = ByteRangeRequests;
            this.ClipEnd = ClipEnd;
            this.PixelFormat = PixelFormat;
            this.ClipLength = ClipLength;
            this.ClipOffset = ClipOffset;
            this.ClosedCaptions = ClosedCaptions;
            this.ColorMetadata = ColorMetadata;
            this.CreatedAt = CreatedAt;
            this.CropInputBottom = CropInputBottom;
            this.CropInputHeight = CropInputHeight;
            this.CropInputLeft = CropInputLeft;
            this.CropInputRight = CropInputRight;
            this.CropInputTop = CropInputTop;
            this.CropInputWidth = CropInputWidth;
            this.DashProfile = DashProfile;
            this.Deinterlace = Deinterlace;
            this.DeinterlaceFrames = DeinterlaceFrames;
            this.Description = Description;
            this.DnxhdType = DnxhdType;
            this.Encryption = Encryption;
            this.Extname = Extname;
            this.Fps = Fps;
            this.FrameCount = FrameCount;
            this.FrameInterval = FrameInterval;
            this.FrameOffsets = FrameOffsets;
            this.H264Level = H264Level;
            this.H264Profile = H264Profile;
            this.H264Tune = H264Tune;
            this.Height = Height;
            this.Id = Id;
            this.ImxType = ImxType;
            this.Inputs = Inputs;
            this.Interlace = Interlace;
            this.KeyframeInterval = KeyframeInterval;
            this.KeyframeRate = KeyframeRate;
            this.Lang = Lang;
            this.MaxRate = MaxRate;
            this.MergeAudioStreams = MergeAudioStreams;
            this.MuteAudioTracks = MuteAudioTracks;
            this.Name = Name;
            this.Outputs = Outputs;
            this.OutputsPathFormat = OutputsPathFormat;
            this.PlaylistType = PlaylistType;
            this.PmtPid = PmtPid;
            this.PresetName = PresetName;
            this.ProresFormat = ProresFormat;
            this.SegmentTime = SegmentTime;
            this.Stack = Stack;
            this.StartingTimecode = StartingTimecode;
            this.TelestreamBlockSize = TelestreamBlockSize;
            this.TelestreamBlurScaler = TelestreamBlurScaler;
            this.TelestreamCostScaler = TelestreamCostScaler;
            this.TelestreamSearchLengthScaler = TelestreamSearchLengthScaler;
            this.TelestreamSubpelMode = TelestreamSubpelMode;
            this.TimeCode = TimeCode;
            this.Title = Title;
            this.Trailers = Trailers;
            this.TransportRate = TransportRate;
            this.TsPids = TsPids;
            this.UpdatedAt = UpdatedAt;
            this.Upscale = Upscale;
            this.UseEditlist = UseEditlist;
            this.Variants = Variants;
            this.VideoBitrate = VideoBitrate;
            this.VideoPid = VideoPid;
            this.WatermarkBottom = WatermarkBottom;
            this.WatermarkBumpers = WatermarkBumpers;
            this.WatermarkHeight = WatermarkHeight;
            this.WatermarkLeft = WatermarkLeft;
            this.WatermarkRight = WatermarkRight;
            this.WatermarkTop = WatermarkTop;
            this.WatermarkTrailers = WatermarkTrailers;
            this.WatermarkUrl = WatermarkUrl;
            this.WatermarkWidth = WatermarkWidth;
            this.Width = Width;
            this.X264Options = X264Options;
            this.X265Options = X265Options;
            this.XdcamFormat = XdcamFormat;
            this.TachyonAllowRemovePulldown = TachyonAllowRemovePulldown;
            this.TachyonEnablePostPulldownFilter = TachyonEnablePostPulldownFilter;
            this.TachyonMediaHintIsCartoon = TachyonMediaHintIsCartoon;
            this.TachyonMediaHintHasChromaNoise = TachyonMediaHintHasChromaNoise;
            this.TachyonMoreSensitiveRemovePulldown = TachyonMoreSensitiveRemovePulldown;
            this.TachyonAllowAddStandardPd = TachyonAllowAddStandardPd;
            this.TachyonAllowAdd22pd = TachyonAllowAdd22pd;
            this.TachyonAllowAdd44pd = TachyonAllowAdd44pd;
            this.TachyonAllowAdd46pd = TachyonAllowAdd46pd;
            this.TachyonAllowAddEuroPd = TachyonAllowAddEuroPd;
            this.TachyonAllowAddAdaptivePd = TachyonAllowAddAdaptivePd;
            this.TachyonMotionAmount = TachyonMotionAmount;
            this.TachyonFallbackSize = TachyonFallbackSize;
            this.TachyonMblockSize = TachyonMblockSize;
            this.TachyonCutDetectionSensitivity = TachyonCutDetectionSensitivity;
            this.Eac3EvolutionEnable = Eac3EvolutionEnable;
            this.Eac3BitstreamMode = Eac3BitstreamMode;
            this.Eac3NinetyDegreePhaseShift = Eac3NinetyDegreePhaseShift;
            this.Eac3ThreeDecibelAttenuation = Eac3ThreeDecibelAttenuation;
            this.Eac3EnableLfeLowPassFilter = Eac3EnableLfeLowPassFilter;
            this.Eac3AnalogToDigitalConverterType = Eac3AnalogToDigitalConverterType;
            this.Eac3StereoDownmixPreference = Eac3StereoDownmixPreference;
            this.Eac3LtRtCenterMixLevel = Eac3LtRtCenterMixLevel;
            this.Eac3LtRtSurroundMixLevel = Eac3LtRtSurroundMixLevel;
            this.Eac3LoRoCenterMixLevel = Eac3LoRoCenterMixLevel;
            this.Eac3LoRoSurroundMixLevel = Eac3LoRoSurroundMixLevel;
            this.Eac3SurroundExMode = Eac3SurroundExMode;
            this.Eac3DrcLineModeProfile = Eac3DrcLineModeProfile;
            this.Eac3DrcRfModeProfile = Eac3DrcRfModeProfile;
            this.Eac3DialogNormalization = Eac3DialogNormalization;
            this.Eac3RoomType = Eac3RoomType;
            this.Eac3MixingLevel = Eac3MixingLevel;
            this.Eac3CopyrightProtected = Eac3CopyrightProtected;
            this.Eac3OriginalBitstream = Eac3OriginalBitstream;
        }
        

        /// <summary>
        /// Specifies an aspect mode for output videos. The following options are available:   - preserve   - constrain   - letterbox   - pad   - fill (crop)   - stretch   - center Default is \&quot;letterbox\&quot;.
        /// </summary>
        /// <value>Specifies an aspect mode for output videos. The following options are available:   - preserve   - constrain   - letterbox   - pad   - fill (crop)   - stretch   - center Default is \&quot;letterbox\&quot;.</value>
        [DataMember(Name="aspect_mode", EmitDefaultValue=false)]
        public string AspectMode { get; set; }

        /// <summary>
        /// A display aspect ratio. By default it is not set.
        /// </summary>
        /// <value>A display aspect ratio. By default it is not set.</value>
        [DataMember(Name="aspect_ratio", EmitDefaultValue=false)]
        public string AspectRatio { get; set; }

        /// <summary>
        /// audio bitrate (in bits/s)
        /// </summary>
        /// <value>audio bitrate (in bits/s)</value>
        [DataMember(Name="audio_bitrate", EmitDefaultValue=false)]
        public int? AudioBitrate { get; set; }

        /// <summary>
        /// A number of audio channels. By default it is not set.
        /// </summary>
        /// <value>A number of audio channels. By default it is not set.</value>
        [DataMember(Name="audio_channels", EmitDefaultValue=false)]
        public int? AudioChannels { get; set; }


        /// <summary>
        /// A number of audio channels per track.
        /// </summary>
        /// <value>A number of audio channels per track.</value>
        [DataMember(Name="audio_channels_per_track", EmitDefaultValue=false)]
        public int? AudioChannelsPerTrack { get; set; }

        /// <summary>
        /// Audio codec that will be used by the profile. Available codecs are: &#x60;libmp3lame&#x60;, &#x60;libvorbis&#x60;, &#x60;libfdk_aac&#x60;, &#x60;dib_ac3, &#x60;pcm_s16le&#x60;, &#x60;mp2&#x60;, &#x60;ac3&#x60;, &#x60;eac3&#x60;.
        /// </summary>
        /// <value>Audio codec that will be used by the profile. Available codecs are: &#x60;libmp3lame&#x60;, &#x60;libvorbis&#x60;, &#x60;libfdk_aac&#x60;, &#x60;dib_ac3, &#x60;pcm_s16le&#x60;, &#x60;mp2&#x60;, &#x60;ac3&#x60;, &#x60;eac3&#x60;.</value>
        [DataMember(Name="audio_codec", EmitDefaultValue=false)]
        public string AudioCodec { get; set; }


        /// <summary>
        /// Gets or Sets AudioMap
        /// </summary>
        [DataMember(Name="audio_map", EmitDefaultValue=false)]
        public string AudioMap { get; set; }

        /// <summary>
        /// Packet identifier used by MPEG formats.
        /// </summary>
        /// <value>Packet identifier used by MPEG formats.</value>
        [DataMember(Name="audio_pid", EmitDefaultValue=false)]
        public string AudioPid { get; set; }

        /// <summary>
        /// Specifies an audio profile.
        /// </summary>
        /// <value>Specifies an audio profile.</value>
        [DataMember(Name="audio_profile", EmitDefaultValue=false)]
        public string AudioProfile { get; set; }

        /// <summary>
        /// The number of samples of audio carried per second.
        /// </summary>
        /// <value>The number of samples of audio carried per second.</value>
        [DataMember(Name="audio_sample_rate", EmitDefaultValue=false)]
        public int? AudioSampleRate { get; set; }

        /// <summary>
        /// Gets or Sets AudioStreamId
        /// </summary>
        [DataMember(Name="audio_stream_id", EmitDefaultValue=false)]
        public int? AudioStreamId { get; set; }

        /// <summary>
        /// A number of audio streams.
        /// </summary>
        /// <value>A number of audio streams.</value>
        [DataMember(Name="audio_streams", EmitDefaultValue=false)]
        public int? AudioStreams { get; set; }


        /// <summary>
        /// Determines the size of the PulseAudio buffer. by default it is not set.
        /// </summary>
        /// <value>Determines the size of the PulseAudio buffer. by default it is not set.</value>
        [DataMember(Name="buffer_size", EmitDefaultValue=false)]
        public int? BufferSize { get; set; }

        /// <summary>
        /// todo
        /// </summary>
        /// <value>todo</value>
        [DataMember(Name="buffer_size_in_packets", EmitDefaultValue=false)]
        public string BufferSizeInPackets { get; set; }

        /// <summary>
        /// Gets or Sets Bumpers
        /// </summary>
        [DataMember(Name="bumpers", EmitDefaultValue=false)]
        public Object Bumpers { get; set; }

        /// <summary>
        /// Gets or Sets ByteRangeRequests
        /// </summary>
        [DataMember(Name="byte_range_requests", EmitDefaultValue=false)]
        public bool? ByteRangeRequests { get; set; }

        /// <summary>
        /// Clip ends at a specific time (timecode).
        /// </summary>
        /// <value>Clip ends at a specific time (timecode).</value>
        [DataMember(Name="clip_end", EmitDefaultValue=false)]
        public string ClipEnd { get; set; }

        /// <summary>
        /// Gets or Sets PixelFormat
        /// </summary>
        [DataMember(Name="pixel_format", EmitDefaultValue=false)]
        public string PixelFormat { get; set; }

        /// <summary>
        /// A clip’s duration.
        /// </summary>
        /// <value>A clip’s duration.</value>
        [DataMember(Name="clip_length", EmitDefaultValue=false)]
        public string ClipLength { get; set; }

        /// <summary>
        /// Clip starts at a specific offset.
        /// </summary>
        /// <value>Clip starts at a specific offset.</value>
        [DataMember(Name="clip_offset", EmitDefaultValue=false)]
        public string ClipOffset { get; set; }


        /// <summary>
        /// Gets or Sets ColorMetadata
        /// </summary>
        [DataMember(Name="color_metadata", EmitDefaultValue=false)]
        public bool? ColorMetadata { get; set; }

        /// <summary>
        /// A date and time when the Profile has been created.
        /// </summary>
        /// <value>A date and time when the Profile has been created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Distance (in pixels) from the bottom edge of the screen from which you want your crop to be done.
        /// </summary>
        /// <value>Distance (in pixels) from the bottom edge of the screen from which you want your crop to be done.</value>
        [DataMember(Name="crop_input_bottom", EmitDefaultValue=false)]
        public string CropInputBottom { get; set; }

        /// <summary>
        /// Width of the cropped image in pixels.
        /// </summary>
        /// <value>Width of the cropped image in pixels.</value>
        [DataMember(Name="crop_input_height", EmitDefaultValue=false)]
        public string CropInputHeight { get; set; }

        /// <summary>
        /// Distance (in pixels) from the left edge of the screen from which you want your crop to be done.
        /// </summary>
        /// <value>Distance (in pixels) from the left edge of the screen from which you want your crop to be done.</value>
        [DataMember(Name="crop_input_left", EmitDefaultValue=false)]
        public string CropInputLeft { get; set; }

        /// <summary>
        /// Distance (in pixels) from the right edge of the screen from which you want your crop to be done.
        /// </summary>
        /// <value>Distance (in pixels) from the right edge of the screen from which you want your crop to be done.</value>
        [DataMember(Name="crop_input_right", EmitDefaultValue=false)]
        public string CropInputRight { get; set; }

        /// <summary>
        /// Distance (in pixels) from the top edge of the screen from which you want your crop to be done.
        /// </summary>
        /// <value>Distance (in pixels) from the top edge of the screen from which you want your crop to be done.</value>
        [DataMember(Name="crop_input_top", EmitDefaultValue=false)]
        public string CropInputTop { get; set; }

        /// <summary>
        /// Height of the cropped image in pixels.
        /// </summary>
        /// <value>Height of the cropped image in pixels.</value>
        [DataMember(Name="crop_input_width", EmitDefaultValue=false)]
        public decimal? CropInputWidth { get; set; }

        /// <summary>
        /// Gets or Sets DashProfile
        /// </summary>
        [DataMember(Name="dash_profile", EmitDefaultValue=false)]
        public string DashProfile { get; set; }

        /// <summary>
        /// One of &#x60;keep_fps&#x60; or &#x60;double_fps&#x60;. By default it is not set.
        /// </summary>
        /// <value>One of &#x60;keep_fps&#x60; or &#x60;double_fps&#x60;. By default it is not set.</value>
        [DataMember(Name="deinterlace", EmitDefaultValue=false)]
        public string Deinterlace { get; set; }

        /// <summary>
        /// Gets or Sets DeinterlaceFrames
        /// </summary>
        [DataMember(Name="deinterlace_frames", EmitDefaultValue=false)]
        public string DeinterlaceFrames { get; set; }

        /// <summary>
        /// Description of the profile.
        /// </summary>
        /// <value>Description of the profile.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Gets or Sets Encryption
        /// </summary>
        [DataMember(Name="encryption", EmitDefaultValue=false)]
        public bool? Encryption { get; set; }

        /// <summary>
        /// File extension.
        /// </summary>
        /// <value>File extension.</value>
        [DataMember(Name="extname", EmitDefaultValue=false)]
        public string Extname { get; set; }

        /// <summary>
        /// Null value copy the original fps. By default it is not set.
        /// </summary>
        /// <value>Null value copy the original fps. By default it is not set.</value>
        [DataMember(Name="fps", EmitDefaultValue=false)]
        public decimal? Fps { get; set; }

        /// <summary>
        /// Evenly spaced number of generated screenshots. By default it is not set.
        /// </summary>
        /// <value>Evenly spaced number of generated screenshots. By default it is not set.</value>
        [DataMember(Name="frame_count", EmitDefaultValue=false)]
        public int? FrameCount { get; set; }

        /// <summary>
        /// Thumbnail interval (Frames or seconds).
        /// </summary>
        /// <value>Thumbnail interval (Frames or seconds).</value>
        [DataMember(Name="frame_interval", EmitDefaultValue=false)]
        public string FrameInterval { get; set; }

        /// <summary>
        /// Array of offsets (Frames or seconds).
        /// </summary>
        /// <value>Array of offsets (Frames or seconds).</value>
        [DataMember(Name="frame_offsets", EmitDefaultValue=false)]
        public string FrameOffsets { get; set; }




        /// <summary>
        /// Height in pixels.
        /// </summary>
        /// <value>Height in pixels.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ImxType
        /// </summary>
        [DataMember(Name="imx_type", EmitDefaultValue=false)]
        public string ImxType { get; set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name="inputs", EmitDefaultValue=false)]
        public Object Inputs { get; set; }

        /// <summary>
        /// Gets or Sets Interlace
        /// </summary>
        [DataMember(Name="interlace", EmitDefaultValue=false)]
        public string Interlace { get; set; }

        /// <summary>
        /// Adds a key frame every N frames. Default is 250, adds a key frame every 250 frames.
        /// </summary>
        /// <value>Adds a key frame every N frames. Default is 250, adds a key frame every 250 frames.</value>
        [DataMember(Name="keyframe_interval", EmitDefaultValue=false)]
        public int? KeyframeInterval { get; set; }

        /// <summary>
        /// todo
        /// </summary>
        /// <value>todo</value>
        [DataMember(Name="keyframe_rate", EmitDefaultValue=false)]
        public string KeyframeRate { get; set; }

        /// <summary>
        /// Gets or Sets Lang
        /// </summary>
        [DataMember(Name="lang", EmitDefaultValue=false)]
        public string Lang { get; set; }

        /// <summary>
        /// A max bitrate tolerance (in bits/s). By default this is not set.
        /// </summary>
        /// <value>A max bitrate tolerance (in bits/s). By default this is not set.</value>
        [DataMember(Name="max_rate", EmitDefaultValue=false)]
        public int? MaxRate { get; set; }

        /// <summary>
        /// Gets or Sets MergeAudioStreams
        /// </summary>
        [DataMember(Name="merge_audio_streams", EmitDefaultValue=false)]
        public string MergeAudioStreams { get; set; }

        /// <summary>
        /// Remove audio from input video file. By default it is set to &#x60;false&#x60;.
        /// </summary>
        /// <value>Remove audio from input video file. By default it is set to &#x60;false&#x60;.</value>
        [DataMember(Name="mute_audio_tracks", EmitDefaultValue=false)]
        public bool? MuteAudioTracks { get; set; }

        /// <summary>
        /// A unique machine-readable name that will identify the profile. Helpful later on for filtering encodings by profile.
        /// </summary>
        /// <value>A unique machine-readable name that will identify the profile. Helpful later on for filtering encodings by profile.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Outputs
        /// </summary>
        [DataMember(Name="outputs", EmitDefaultValue=false)]
        public Object Outputs { get; set; }

        /// <summary>
        /// Specify the directory where the output files should be stored. By default it is not set. More information about this [here](https://cloud.telestream.net/docs#path-format- --know-how).
        /// </summary>
        /// <value>Specify the directory where the output files should be stored. By default it is not set. More information about this [here](https://cloud.telestream.net/docs#path-format- --know-how).</value>
        [DataMember(Name="outputs_path_format", EmitDefaultValue=false)]
        public string OutputsPathFormat { get; set; }


        /// <summary>
        /// Gets or Sets PmtPid
        /// </summary>
        [DataMember(Name="pmt_pid", EmitDefaultValue=false)]
        public string PmtPid { get; set; }

        /// <summary>
        /// a name of a preset that a profile will use.
        /// </summary>
        /// <value>a name of a preset that a profile will use.</value>
        [DataMember(Name="preset_name", EmitDefaultValue=false)]
        public string PresetName { get; set; }

        /// <summary>
        /// Gets or Sets ProresFormat
        /// </summary>
        [DataMember(Name="prores_format", EmitDefaultValue=false)]
        public string ProresFormat { get; set; }

        /// <summary>
        /// Minimum value is 2, maximum is 60.
        /// </summary>
        /// <value>Minimum value is 2, maximum is 60.</value>
        [DataMember(Name="segment_time", EmitDefaultValue=false)]
        public int? SegmentTime { get; set; }

        /// <summary>
        /// Gets or Sets Stack
        /// </summary>
        [DataMember(Name="stack", EmitDefaultValue=false)]
        public string Stack { get; set; }

        /// <summary>
        /// Gets or Sets StartingTimecode
        /// </summary>
        [DataMember(Name="starting_timecode", EmitDefaultValue=false)]
        public string StartingTimecode { get; set; }


        /// <summary>
        /// Minimum value is 0, maximum is 4.
        /// </summary>
        /// <value>Minimum value is 0, maximum is 4.</value>
        [DataMember(Name="telestream_blur_scaler", EmitDefaultValue=false)]
        public decimal? TelestreamBlurScaler { get; set; }

        /// <summary>
        /// Minimum value is 0, maximum is 4.
        /// </summary>
        /// <value>Minimum value is 0, maximum is 4.</value>
        [DataMember(Name="telestream_cost_scaler", EmitDefaultValue=false)]
        public decimal? TelestreamCostScaler { get; set; }

        /// <summary>
        /// Minimum value is 0, maximum is 2.
        /// </summary>
        /// <value>Minimum value is 0, maximum is 2.</value>
        [DataMember(Name="telestream_search_length_scaler", EmitDefaultValue=false)]
        public int? TelestreamSearchLengthScaler { get; set; }

        /// <summary>
        /// Gets or Sets TelestreamSubpelMode
        /// </summary>
        [DataMember(Name="telestream_subpel_mode", EmitDefaultValue=false)]
        public bool? TelestreamSubpelMode { get; set; }

        /// <summary>
        /// If set, timestamps will be added to your videos. By default this is not set.
        /// </summary>
        /// <value>If set, timestamps will be added to your videos. By default this is not set.</value>
        [DataMember(Name="time_code", EmitDefaultValue=false)]
        public string TimeCode { get; set; }

        /// <summary>
        /// Human-readable name.
        /// </summary>
        /// <value>Human-readable name.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Trailers
        /// </summary>
        [DataMember(Name="trailers", EmitDefaultValue=false)]
        public Object Trailers { get; set; }

        /// <summary>
        /// Gets or Sets TransportRate
        /// </summary>
        [DataMember(Name="transport_rate", EmitDefaultValue=false)]
        public string TransportRate { get; set; }

        /// <summary>
        /// Gets or Sets TsPids
        /// </summary>
        [DataMember(Name="ts_pids", EmitDefaultValue=false)]
        public string TsPids { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Upscale the video resolution to match your profile. Default is &#x60;true&#x60;.
        /// </summary>
        /// <value>Upscale the video resolution to match your profile. Default is &#x60;true&#x60;.</value>
        [DataMember(Name="upscale", EmitDefaultValue=false)]
        public bool? Upscale { get; set; }

        /// <summary>
        /// Gets or Sets UseEditlist
        /// </summary>
        [DataMember(Name="use_editlist", EmitDefaultValue=false)]
        public bool? UseEditlist { get; set; }

        /// <summary>
        /// Pattern utilised to match HLS.Variant presets by name. Default is hls.*.
        /// </summary>
        /// <value>Pattern utilised to match HLS.Variant presets by name. Default is hls.*.</value>
        [DataMember(Name="variants", EmitDefaultValue=false)]
        public string Variants { get; set; }

        /// <summary>
        /// Gets or Sets VideoBitrate
        /// </summary>
        [DataMember(Name="video_bitrate", EmitDefaultValue=false)]
        public int? VideoBitrate { get; set; }

        /// <summary>
        /// Gets or Sets VideoPid
        /// </summary>
        [DataMember(Name="video_pid", EmitDefaultValue=false)]
        public string VideoPid { get; set; }

        /// <summary>
        /// Distance from the bottom of the video frame in pixels or percentage of video frame height. Works like CSS. Default is &#x60;0&#x60;.
        /// </summary>
        /// <value>Distance from the bottom of the video frame in pixels or percentage of video frame height. Works like CSS. Default is &#x60;0&#x60;.</value>
        [DataMember(Name="watermark_bottom", EmitDefaultValue=false)]
        public string WatermarkBottom { get; set; }

        /// <summary>
        /// Gets or Sets WatermarkBumpers
        /// </summary>
        [DataMember(Name="watermark_bumpers", EmitDefaultValue=false)]
        public bool? WatermarkBumpers { get; set; }

        /// <summary>
        /// Height of the watermark image in pixels or percentage of video frame height. Default is no resizing
        /// </summary>
        /// <value>Height of the watermark image in pixels or percentage of video frame height. Default is no resizing</value>
        [DataMember(Name="watermark_height", EmitDefaultValue=false)]
        public string WatermarkHeight { get; set; }

        /// <summary>
        /// Distance from the left of the video frame in pixels or percentage of video frame width. Works like CSS. Default is &#x60;0&#x60;.
        /// </summary>
        /// <value>Distance from the left of the video frame in pixels or percentage of video frame width. Works like CSS. Default is &#x60;0&#x60;.</value>
        [DataMember(Name="watermark_left", EmitDefaultValue=false)]
        public string WatermarkLeft { get; set; }

        /// <summary>
        /// Distance from the right of the video frame in pixels or percentage of video frame width. Works like CSS. Default is &#x60;0&#x60;.
        /// </summary>
        /// <value>Distance from the right of the video frame in pixels or percentage of video frame width. Works like CSS. Default is &#x60;0&#x60;.</value>
        [DataMember(Name="watermark_right", EmitDefaultValue=false)]
        public string WatermarkRight { get; set; }

        /// <summary>
        /// Distance from the top of the video frame in pixels or percentage of video frame height. Works like CSS. Default is &#x60;0&#x60;.
        /// </summary>
        /// <value>Distance from the top of the video frame in pixels or percentage of video frame height. Works like CSS. Default is &#x60;0&#x60;.</value>
        [DataMember(Name="watermark_top", EmitDefaultValue=false)]
        public string WatermarkTop { get; set; }

        /// <summary>
        /// Gets or Sets WatermarkTrailers
        /// </summary>
        [DataMember(Name="watermark_trailers", EmitDefaultValue=false)]
        public bool? WatermarkTrailers { get; set; }

        /// <summary>
        /// Url of a watermark image.
        /// </summary>
        /// <value>Url of a watermark image.</value>
        [DataMember(Name="watermark_url", EmitDefaultValue=false)]
        public string WatermarkUrl { get; set; }

        /// <summary>
        /// Width of the watermark image in pixels or percentage of video frame width. Default is &#x60;no resizing&#x60;.
        /// </summary>
        /// <value>Width of the watermark image in pixels or percentage of video frame width. Default is &#x60;no resizing&#x60;.</value>
        [DataMember(Name="watermark_width", EmitDefaultValue=false)]
        public string WatermarkWidth { get; set; }

        /// <summary>
        /// Width in pixels.
        /// </summary>
        /// <value>Width in pixels.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// Gets or Sets X264Options
        /// </summary>
        [DataMember(Name="x264_options", EmitDefaultValue=false)]
        public string X264Options { get; set; }

        /// <summary>
        /// Gets or Sets X265Options
        /// </summary>
        [DataMember(Name="x265_options", EmitDefaultValue=false)]
        public string X265Options { get; set; }

        /// <summary>
        /// Gets or Sets XdcamFormat
        /// </summary>
        [DataMember(Name="xdcam_format", EmitDefaultValue=false)]
        public string XdcamFormat { get; set; }

        /// <summary>
        /// Enable more sensitive pulldown removal algorithm.
        /// </summary>
        /// <value>Enable more sensitive pulldown removal algorithm.</value>
        [DataMember(Name="tachyon_allow_remove_pulldown", EmitDefaultValue=false)]
        public bool? TachyonAllowRemovePulldown { get; set; }

        /// <summary>
        /// If the images you are converting are composited 29.976, but the pulldown pattern was not adhered to when performing the composite, this setting is required to remove combing artifacts. It will also remove combing artifacts related to very poor 3:2 cadence.
        /// </summary>
        /// <value>If the images you are converting are composited 29.976, but the pulldown pattern was not adhered to when performing the composite, this setting is required to remove combing artifacts. It will also remove combing artifacts related to very poor 3:2 cadence.</value>
        [DataMember(Name="tachyon_enable_post_pulldown_filter", EmitDefaultValue=false)]
        public bool? TachyonEnablePostPulldownFilter { get; set; }

        /// <summary>
        /// Gets or Sets TachyonMediaHintIsCartoon
        /// </summary>
        [DataMember(Name="tachyon_media_hint_is_cartoon", EmitDefaultValue=false)]
        public bool? TachyonMediaHintIsCartoon { get; set; }

        /// <summary>
        /// Remove chroma noise during the analysis of a video.
        /// </summary>
        /// <value>Remove chroma noise during the analysis of a video.</value>
        [DataMember(Name="tachyon_media_hint_has_chroma_noise", EmitDefaultValue=false)]
        public bool? TachyonMediaHintHasChromaNoise { get; set; }

        /// <summary>
        /// When pulldown is not achieved due to extremely broken cadence, or other factors like highly mixed content or if chroma noise masks motion, the pulldown engine may fall back to de-interlacing rather than removing telecine. If that&#39;s a case, a more sensitive pulldown pattern can be used. This algorithm favors inverse telecine and with lower thresholds for triggering pulldown identification, will maximize the number of progressive frames created from the video.
        /// </summary>
        /// <value>When pulldown is not achieved due to extremely broken cadence, or other factors like highly mixed content or if chroma noise masks motion, the pulldown engine may fall back to de-interlacing rather than removing telecine. If that&#39;s a case, a more sensitive pulldown pattern can be used. This algorithm favors inverse telecine and with lower thresholds for triggering pulldown identification, will maximize the number of progressive frames created from the video.</value>
        [DataMember(Name="tachyon_more_sensitive_remove_pulldown", EmitDefaultValue=false)]
        public bool? TachyonMoreSensitiveRemovePulldown { get; set; }

        /// <summary>
        /// Gets or Sets TachyonAllowAddStandardPd
        /// </summary>
        [DataMember(Name="tachyon_allow_add_standard_pd", EmitDefaultValue=false)]
        public bool? TachyonAllowAddStandardPd { get; set; }

        /// <summary>
        /// Allows 2:2 (PSF) Insertion. Creates a new series of frames which are based on duplicating the field an interlacing it into top/bottom field. Maintains a film-look.
        /// </summary>
        /// <value>Allows 2:2 (PSF) Insertion. Creates a new series of frames which are based on duplicating the field an interlacing it into top/bottom field. Maintains a film-look.</value>
        [DataMember(Name="tachyon_allow_add_2_2pd", EmitDefaultValue=false)]
        public bool? TachyonAllowAdd22pd { get; set; }

        /// <summary>
        /// Allows 4:4 Insertion. Repeats each progressive frame twice on output (motion rate is halved). This setting is used when you want to convert to high progressive frame rates (i.e. 50p/59.94p/60p) but want to preserve film qualities (low motion rate, such as 24p).
        /// </summary>
        /// <value>Allows 4:4 Insertion. Repeats each progressive frame twice on output (motion rate is halved). This setting is used when you want to convert to high progressive frame rates (i.e. 50p/59.94p/60p) but want to preserve film qualities (low motion rate, such as 24p).</value>
        [DataMember(Name="tachyon_allow_add_4_4pd", EmitDefaultValue=false)]
        public bool? TachyonAllowAdd44pd { get; set; }

        /// <summary>
        /// 2:3 Insertion. inserts a standard 2:3 telecine pattern to 23.976p video stream to achieve a 29.97i frame rate
        /// </summary>
        /// <value>2:3 Insertion. inserts a standard 2:3 telecine pattern to 23.976p video stream to achieve a 29.97i frame rate</value>
        [DataMember(Name="tachyon_allow_add_4_6pd", EmitDefaultValue=false)]
        public bool? TachyonAllowAdd46pd { get; set; }

        /// <summary>
        /// Allows Euro Insertion. For field based interpolation rather than pixel-based. This is designed for interlaced or progressive integer frame rate conversions that are being converted to interlaced outputs. This method is valid for 24p to 50i conversions only.
        /// </summary>
        /// <value>Allows Euro Insertion. For field based interpolation rather than pixel-based. This is designed for interlaced or progressive integer frame rate conversions that are being converted to interlaced outputs. This method is valid for 24p to 50i conversions only.</value>
        [DataMember(Name="tachyon_allow_add_euro_pd", EmitDefaultValue=false)]
        public bool? TachyonAllowAddEuroPd { get; set; }

        /// <summary>
        /// Allows Adaptive Insertion. For field-based interpolation rather than using pixel-based interpolation. This algorithm is designed for both integer and non-integer frame rate conversion targets - as long as one of them is a non-integer rate (23.976, 29.97, 59.94, etc). This creates NTSC-PAL conversions clean of motion artifacts at the expense of potential slight stutter. Stutter is most noticeable with material that has smooth and uniform motion.
        /// </summary>
        /// <value>Allows Adaptive Insertion. For field-based interpolation rather than using pixel-based interpolation. This algorithm is designed for both integer and non-integer frame rate conversion targets - as long as one of them is a non-integer rate (23.976, 29.97, 59.94, etc). This creates NTSC-PAL conversions clean of motion artifacts at the expense of potential slight stutter. Stutter is most noticeable with material that has smooth and uniform motion.</value>
        [DataMember(Name="tachyon_allow_add_adaptive_pd", EmitDefaultValue=false)]
        public bool? TachyonAllowAddAdaptivePd { get; set; }




        /// <summary>
        /// Gets or Sets TachyonCutDetectionSensitivity
        /// </summary>
        [DataMember(Name="tachyon_cut_detection_sensitivity", EmitDefaultValue=false)]
        public decimal? TachyonCutDetectionSensitivity { get; set; }

        /// <summary>
        /// Enables the trusted metadata framework.
        /// </summary>
        /// <value>Enables the trusted metadata framework.</value>
        [DataMember(Name="eac3_evolution_enable", EmitDefaultValue=false)]
        public bool? Eac3EvolutionEnable { get; set; }


        /// <summary>
        /// Applies a 90-degree phase shift to the surround channels; necessary if the output file is being decoded by a Dolby Surround Pro Logic or Pro Logic II decoder.
        /// </summary>
        /// <value>Applies a 90-degree phase shift to the surround channels; necessary if the output file is being decoded by a Dolby Surround Pro Logic or Pro Logic II decoder.</value>
        [DataMember(Name="eac3_ninety_degree_phase_shift", EmitDefaultValue=false)]
        public bool? Eac3NinetyDegreePhaseShift { get; set; }

        /// <summary>
        /// Attenuates the surround channels by 3 dB before encoding.
        /// </summary>
        /// <value>Attenuates the surround channels by 3 dB before encoding.</value>
        [DataMember(Name="eac3_three_decibel_attenuation", EmitDefaultValue=false)]
        public bool? Eac3ThreeDecibelAttenuation { get; set; }

        /// <summary>
        /// Applies a 120 Hz eighth order lowpass filter to the LFE input prior to encoding.
        /// </summary>
        /// <value>Applies a 120 Hz eighth order lowpass filter to the LFE input prior to encoding.</value>
        [DataMember(Name="eac3_enable_lfe_low_pass_filter", EmitDefaultValue=false)]
        public bool? Eac3EnableLfeLowPassFilter { get; set; }










        /// <summary>
        /// Represents the volume level of dialog in the audio stream which can be used by a Dolby Digital decoder. This aids the decoder in matching volume between program sources. Minimum value is 1, maximum is 31.
        /// </summary>
        /// <value>Represents the volume level of dialog in the audio stream which can be used by a Dolby Digital decoder. This aids the decoder in matching volume between program sources. Minimum value is 1, maximum is 31.</value>
        [DataMember(Name="eac3_dialog_normalization", EmitDefaultValue=false)]
        public int? Eac3DialogNormalization { get; set; }


        /// <summary>
        /// Minimum value is 80, maximum is 111.
        /// </summary>
        /// <value>Minimum value is 80, maximum is 111.</value>
        [DataMember(Name="eac3_mixing_level", EmitDefaultValue=false)]
        public int? Eac3MixingLevel { get; set; }

        /// <summary>
        /// Indicates whether the encoded bitstream is copyright protected.
        /// </summary>
        /// <value>Indicates whether the encoded bitstream is copyright protected.</value>
        [DataMember(Name="eac3_copyright_protected", EmitDefaultValue=false)]
        public bool? Eac3CopyrightProtected { get; set; }

        /// <summary>
        /// Indicates whether the encoded bitstream is the master version, or a copy.
        /// </summary>
        /// <value>Indicates whether the encoded bitstream is the master version, or a copy.</value>
        [DataMember(Name="eac3_original_bitstream", EmitDefaultValue=false)]
        public bool? Eac3OriginalBitstream { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Profile {\n");
            sb.Append("  AdvancedFpsConversion: ").Append(AdvancedFpsConversion).Append("\n");
            sb.Append("  AspectMode: ").Append(AspectMode).Append("\n");
            sb.Append("  AspectRatio: ").Append(AspectRatio).Append("\n");
            sb.Append("  AudioBitrate: ").Append(AudioBitrate).Append("\n");
            sb.Append("  AudioChannels: ").Append(AudioChannels).Append("\n");
            sb.Append("  AudioChannelsLayout: ").Append(AudioChannelsLayout).Append("\n");
            sb.Append("  AudioChannelsPerTrack: ").Append(AudioChannelsPerTrack).Append("\n");
            sb.Append("  AudioCodec: ").Append(AudioCodec).Append("\n");
            sb.Append("  AudioFormat: ").Append(AudioFormat).Append("\n");
            sb.Append("  AudioMap: ").Append(AudioMap).Append("\n");
            sb.Append("  AudioPid: ").Append(AudioPid).Append("\n");
            sb.Append("  AudioProfile: ").Append(AudioProfile).Append("\n");
            sb.Append("  AudioSampleRate: ").Append(AudioSampleRate).Append("\n");
            sb.Append("  AudioStreamId: ").Append(AudioStreamId).Append("\n");
            sb.Append("  AudioStreams: ").Append(AudioStreams).Append("\n");
            sb.Append("  AvcintraClass: ").Append(AvcintraClass).Append("\n");
            sb.Append("  BufferSize: ").Append(BufferSize).Append("\n");
            sb.Append("  BufferSizeInPackets: ").Append(BufferSizeInPackets).Append("\n");
            sb.Append("  Bumpers: ").Append(Bumpers).Append("\n");
            sb.Append("  ByteRangeRequests: ").Append(ByteRangeRequests).Append("\n");
            sb.Append("  ClipEnd: ").Append(ClipEnd).Append("\n");
            sb.Append("  PixelFormat: ").Append(PixelFormat).Append("\n");
            sb.Append("  ClipLength: ").Append(ClipLength).Append("\n");
            sb.Append("  ClipOffset: ").Append(ClipOffset).Append("\n");
            sb.Append("  ClosedCaptions: ").Append(ClosedCaptions).Append("\n");
            sb.Append("  ColorMetadata: ").Append(ColorMetadata).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CropInputBottom: ").Append(CropInputBottom).Append("\n");
            sb.Append("  CropInputHeight: ").Append(CropInputHeight).Append("\n");
            sb.Append("  CropInputLeft: ").Append(CropInputLeft).Append("\n");
            sb.Append("  CropInputRight: ").Append(CropInputRight).Append("\n");
            sb.Append("  CropInputTop: ").Append(CropInputTop).Append("\n");
            sb.Append("  CropInputWidth: ").Append(CropInputWidth).Append("\n");
            sb.Append("  DashProfile: ").Append(DashProfile).Append("\n");
            sb.Append("  Deinterlace: ").Append(Deinterlace).Append("\n");
            sb.Append("  DeinterlaceFrames: ").Append(DeinterlaceFrames).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DnxhdType: ").Append(DnxhdType).Append("\n");
            sb.Append("  Encryption: ").Append(Encryption).Append("\n");
            sb.Append("  Extname: ").Append(Extname).Append("\n");
            sb.Append("  Fps: ").Append(Fps).Append("\n");
            sb.Append("  FrameCount: ").Append(FrameCount).Append("\n");
            sb.Append("  FrameInterval: ").Append(FrameInterval).Append("\n");
            sb.Append("  FrameOffsets: ").Append(FrameOffsets).Append("\n");
            sb.Append("  H264Level: ").Append(H264Level).Append("\n");
            sb.Append("  H264Profile: ").Append(H264Profile).Append("\n");
            sb.Append("  H264Tune: ").Append(H264Tune).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImxType: ").Append(ImxType).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Interlace: ").Append(Interlace).Append("\n");
            sb.Append("  KeyframeInterval: ").Append(KeyframeInterval).Append("\n");
            sb.Append("  KeyframeRate: ").Append(KeyframeRate).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  MaxRate: ").Append(MaxRate).Append("\n");
            sb.Append("  MergeAudioStreams: ").Append(MergeAudioStreams).Append("\n");
            sb.Append("  MuteAudioTracks: ").Append(MuteAudioTracks).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  OutputsPathFormat: ").Append(OutputsPathFormat).Append("\n");
            sb.Append("  PlaylistType: ").Append(PlaylistType).Append("\n");
            sb.Append("  PmtPid: ").Append(PmtPid).Append("\n");
            sb.Append("  PresetName: ").Append(PresetName).Append("\n");
            sb.Append("  ProresFormat: ").Append(ProresFormat).Append("\n");
            sb.Append("  SegmentTime: ").Append(SegmentTime).Append("\n");
            sb.Append("  Stack: ").Append(Stack).Append("\n");
            sb.Append("  StartingTimecode: ").Append(StartingTimecode).Append("\n");
            sb.Append("  TelestreamBlockSize: ").Append(TelestreamBlockSize).Append("\n");
            sb.Append("  TelestreamBlurScaler: ").Append(TelestreamBlurScaler).Append("\n");
            sb.Append("  TelestreamCostScaler: ").Append(TelestreamCostScaler).Append("\n");
            sb.Append("  TelestreamSearchLengthScaler: ").Append(TelestreamSearchLengthScaler).Append("\n");
            sb.Append("  TelestreamSubpelMode: ").Append(TelestreamSubpelMode).Append("\n");
            sb.Append("  TimeCode: ").Append(TimeCode).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Trailers: ").Append(Trailers).Append("\n");
            sb.Append("  TransportRate: ").Append(TransportRate).Append("\n");
            sb.Append("  TsPids: ").Append(TsPids).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Upscale: ").Append(Upscale).Append("\n");
            sb.Append("  UseEditlist: ").Append(UseEditlist).Append("\n");
            sb.Append("  Variants: ").Append(Variants).Append("\n");
            sb.Append("  VideoBitrate: ").Append(VideoBitrate).Append("\n");
            sb.Append("  VideoPid: ").Append(VideoPid).Append("\n");
            sb.Append("  WatermarkBottom: ").Append(WatermarkBottom).Append("\n");
            sb.Append("  WatermarkBumpers: ").Append(WatermarkBumpers).Append("\n");
            sb.Append("  WatermarkHeight: ").Append(WatermarkHeight).Append("\n");
            sb.Append("  WatermarkLeft: ").Append(WatermarkLeft).Append("\n");
            sb.Append("  WatermarkRight: ").Append(WatermarkRight).Append("\n");
            sb.Append("  WatermarkTop: ").Append(WatermarkTop).Append("\n");
            sb.Append("  WatermarkTrailers: ").Append(WatermarkTrailers).Append("\n");
            sb.Append("  WatermarkUrl: ").Append(WatermarkUrl).Append("\n");
            sb.Append("  WatermarkWidth: ").Append(WatermarkWidth).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  X264Options: ").Append(X264Options).Append("\n");
            sb.Append("  X265Options: ").Append(X265Options).Append("\n");
            sb.Append("  XdcamFormat: ").Append(XdcamFormat).Append("\n");
            sb.Append("  TachyonAllowRemovePulldown: ").Append(TachyonAllowRemovePulldown).Append("\n");
            sb.Append("  TachyonEnablePostPulldownFilter: ").Append(TachyonEnablePostPulldownFilter).Append("\n");
            sb.Append("  TachyonMediaHintIsCartoon: ").Append(TachyonMediaHintIsCartoon).Append("\n");
            sb.Append("  TachyonMediaHintHasChromaNoise: ").Append(TachyonMediaHintHasChromaNoise).Append("\n");
            sb.Append("  TachyonMoreSensitiveRemovePulldown: ").Append(TachyonMoreSensitiveRemovePulldown).Append("\n");
            sb.Append("  TachyonAllowAddStandardPd: ").Append(TachyonAllowAddStandardPd).Append("\n");
            sb.Append("  TachyonAllowAdd22pd: ").Append(TachyonAllowAdd22pd).Append("\n");
            sb.Append("  TachyonAllowAdd44pd: ").Append(TachyonAllowAdd44pd).Append("\n");
            sb.Append("  TachyonAllowAdd46pd: ").Append(TachyonAllowAdd46pd).Append("\n");
            sb.Append("  TachyonAllowAddEuroPd: ").Append(TachyonAllowAddEuroPd).Append("\n");
            sb.Append("  TachyonAllowAddAdaptivePd: ").Append(TachyonAllowAddAdaptivePd).Append("\n");
            sb.Append("  TachyonMotionAmount: ").Append(TachyonMotionAmount).Append("\n");
            sb.Append("  TachyonFallbackSize: ").Append(TachyonFallbackSize).Append("\n");
            sb.Append("  TachyonMblockSize: ").Append(TachyonMblockSize).Append("\n");
            sb.Append("  TachyonCutDetectionSensitivity: ").Append(TachyonCutDetectionSensitivity).Append("\n");
            sb.Append("  Eac3EvolutionEnable: ").Append(Eac3EvolutionEnable).Append("\n");
            sb.Append("  Eac3BitstreamMode: ").Append(Eac3BitstreamMode).Append("\n");
            sb.Append("  Eac3NinetyDegreePhaseShift: ").Append(Eac3NinetyDegreePhaseShift).Append("\n");
            sb.Append("  Eac3ThreeDecibelAttenuation: ").Append(Eac3ThreeDecibelAttenuation).Append("\n");
            sb.Append("  Eac3EnableLfeLowPassFilter: ").Append(Eac3EnableLfeLowPassFilter).Append("\n");
            sb.Append("  Eac3AnalogToDigitalConverterType: ").Append(Eac3AnalogToDigitalConverterType).Append("\n");
            sb.Append("  Eac3StereoDownmixPreference: ").Append(Eac3StereoDownmixPreference).Append("\n");
            sb.Append("  Eac3LtRtCenterMixLevel: ").Append(Eac3LtRtCenterMixLevel).Append("\n");
            sb.Append("  Eac3LtRtSurroundMixLevel: ").Append(Eac3LtRtSurroundMixLevel).Append("\n");
            sb.Append("  Eac3LoRoCenterMixLevel: ").Append(Eac3LoRoCenterMixLevel).Append("\n");
            sb.Append("  Eac3LoRoSurroundMixLevel: ").Append(Eac3LoRoSurroundMixLevel).Append("\n");
            sb.Append("  Eac3SurroundExMode: ").Append(Eac3SurroundExMode).Append("\n");
            sb.Append("  Eac3DrcLineModeProfile: ").Append(Eac3DrcLineModeProfile).Append("\n");
            sb.Append("  Eac3DrcRfModeProfile: ").Append(Eac3DrcRfModeProfile).Append("\n");
            sb.Append("  Eac3DialogNormalization: ").Append(Eac3DialogNormalization).Append("\n");
            sb.Append("  Eac3RoomType: ").Append(Eac3RoomType).Append("\n");
            sb.Append("  Eac3MixingLevel: ").Append(Eac3MixingLevel).Append("\n");
            sb.Append("  Eac3CopyrightProtected: ").Append(Eac3CopyrightProtected).Append("\n");
            sb.Append("  Eac3OriginalBitstream: ").Append(Eac3OriginalBitstream).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Profile);
        }

        /// <summary>
        /// Returns true if Profile instances are equal
        /// </summary>
        /// <param name="input">Instance of Profile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Profile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdvancedFpsConversion == input.AdvancedFpsConversion ||
                    (this.AdvancedFpsConversion != null &&
                    this.AdvancedFpsConversion.Equals(input.AdvancedFpsConversion))
                ) && 
                (
                    this.AspectMode == input.AspectMode ||
                    (this.AspectMode != null &&
                    this.AspectMode.Equals(input.AspectMode))
                ) && 
                (
                    this.AspectRatio == input.AspectRatio ||
                    (this.AspectRatio != null &&
                    this.AspectRatio.Equals(input.AspectRatio))
                ) && 
                (
                    this.AudioBitrate == input.AudioBitrate ||
                    (this.AudioBitrate != null &&
                    this.AudioBitrate.Equals(input.AudioBitrate))
                ) && 
                (
                    this.AudioChannels == input.AudioChannels ||
                    (this.AudioChannels != null &&
                    this.AudioChannels.Equals(input.AudioChannels))
                ) && 
                (
                    this.AudioChannelsLayout == input.AudioChannelsLayout ||
                    (this.AudioChannelsLayout != null &&
                    this.AudioChannelsLayout.Equals(input.AudioChannelsLayout))
                ) && 
                (
                    this.AudioChannelsPerTrack == input.AudioChannelsPerTrack ||
                    (this.AudioChannelsPerTrack != null &&
                    this.AudioChannelsPerTrack.Equals(input.AudioChannelsPerTrack))
                ) && 
                (
                    this.AudioCodec == input.AudioCodec ||
                    (this.AudioCodec != null &&
                    this.AudioCodec.Equals(input.AudioCodec))
                ) && 
                (
                    this.AudioFormat == input.AudioFormat ||
                    (this.AudioFormat != null &&
                    this.AudioFormat.Equals(input.AudioFormat))
                ) && 
                (
                    this.AudioMap == input.AudioMap ||
                    (this.AudioMap != null &&
                    this.AudioMap.Equals(input.AudioMap))
                ) && 
                (
                    this.AudioPid == input.AudioPid ||
                    (this.AudioPid != null &&
                    this.AudioPid.Equals(input.AudioPid))
                ) && 
                (
                    this.AudioProfile == input.AudioProfile ||
                    (this.AudioProfile != null &&
                    this.AudioProfile.Equals(input.AudioProfile))
                ) && 
                (
                    this.AudioSampleRate == input.AudioSampleRate ||
                    (this.AudioSampleRate != null &&
                    this.AudioSampleRate.Equals(input.AudioSampleRate))
                ) && 
                (
                    this.AudioStreamId == input.AudioStreamId ||
                    (this.AudioStreamId != null &&
                    this.AudioStreamId.Equals(input.AudioStreamId))
                ) && 
                (
                    this.AudioStreams == input.AudioStreams ||
                    (this.AudioStreams != null &&
                    this.AudioStreams.Equals(input.AudioStreams))
                ) && 
                (
                    this.AvcintraClass == input.AvcintraClass ||
                    (this.AvcintraClass != null &&
                    this.AvcintraClass.Equals(input.AvcintraClass))
                ) && 
                (
                    this.BufferSize == input.BufferSize ||
                    (this.BufferSize != null &&
                    this.BufferSize.Equals(input.BufferSize))
                ) && 
                (
                    this.BufferSizeInPackets == input.BufferSizeInPackets ||
                    (this.BufferSizeInPackets != null &&
                    this.BufferSizeInPackets.Equals(input.BufferSizeInPackets))
                ) && 
                (
                    this.Bumpers == input.Bumpers ||
                    (this.Bumpers != null &&
                    this.Bumpers.Equals(input.Bumpers))
                ) && 
                (
                    this.ByteRangeRequests == input.ByteRangeRequests ||
                    (this.ByteRangeRequests != null &&
                    this.ByteRangeRequests.Equals(input.ByteRangeRequests))
                ) && 
                (
                    this.ClipEnd == input.ClipEnd ||
                    (this.ClipEnd != null &&
                    this.ClipEnd.Equals(input.ClipEnd))
                ) && 
                (
                    this.PixelFormat == input.PixelFormat ||
                    (this.PixelFormat != null &&
                    this.PixelFormat.Equals(input.PixelFormat))
                ) && 
                (
                    this.ClipLength == input.ClipLength ||
                    (this.ClipLength != null &&
                    this.ClipLength.Equals(input.ClipLength))
                ) && 
                (
                    this.ClipOffset == input.ClipOffset ||
                    (this.ClipOffset != null &&
                    this.ClipOffset.Equals(input.ClipOffset))
                ) && 
                (
                    this.ClosedCaptions == input.ClosedCaptions ||
                    (this.ClosedCaptions != null &&
                    this.ClosedCaptions.Equals(input.ClosedCaptions))
                ) && 
                (
                    this.ColorMetadata == input.ColorMetadata ||
                    (this.ColorMetadata != null &&
                    this.ColorMetadata.Equals(input.ColorMetadata))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CropInputBottom == input.CropInputBottom ||
                    (this.CropInputBottom != null &&
                    this.CropInputBottom.Equals(input.CropInputBottom))
                ) && 
                (
                    this.CropInputHeight == input.CropInputHeight ||
                    (this.CropInputHeight != null &&
                    this.CropInputHeight.Equals(input.CropInputHeight))
                ) && 
                (
                    this.CropInputLeft == input.CropInputLeft ||
                    (this.CropInputLeft != null &&
                    this.CropInputLeft.Equals(input.CropInputLeft))
                ) && 
                (
                    this.CropInputRight == input.CropInputRight ||
                    (this.CropInputRight != null &&
                    this.CropInputRight.Equals(input.CropInputRight))
                ) && 
                (
                    this.CropInputTop == input.CropInputTop ||
                    (this.CropInputTop != null &&
                    this.CropInputTop.Equals(input.CropInputTop))
                ) && 
                (
                    this.CropInputWidth == input.CropInputWidth ||
                    (this.CropInputWidth != null &&
                    this.CropInputWidth.Equals(input.CropInputWidth))
                ) && 
                (
                    this.DashProfile == input.DashProfile ||
                    (this.DashProfile != null &&
                    this.DashProfile.Equals(input.DashProfile))
                ) && 
                (
                    this.Deinterlace == input.Deinterlace ||
                    (this.Deinterlace != null &&
                    this.Deinterlace.Equals(input.Deinterlace))
                ) && 
                (
                    this.DeinterlaceFrames == input.DeinterlaceFrames ||
                    (this.DeinterlaceFrames != null &&
                    this.DeinterlaceFrames.Equals(input.DeinterlaceFrames))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DnxhdType == input.DnxhdType ||
                    (this.DnxhdType != null &&
                    this.DnxhdType.Equals(input.DnxhdType))
                ) && 
                (
                    this.Encryption == input.Encryption ||
                    (this.Encryption != null &&
                    this.Encryption.Equals(input.Encryption))
                ) && 
                (
                    this.Extname == input.Extname ||
                    (this.Extname != null &&
                    this.Extname.Equals(input.Extname))
                ) && 
                (
                    this.Fps == input.Fps ||
                    (this.Fps != null &&
                    this.Fps.Equals(input.Fps))
                ) && 
                (
                    this.FrameCount == input.FrameCount ||
                    (this.FrameCount != null &&
                    this.FrameCount.Equals(input.FrameCount))
                ) && 
                (
                    this.FrameInterval == input.FrameInterval ||
                    (this.FrameInterval != null &&
                    this.FrameInterval.Equals(input.FrameInterval))
                ) && 
                (
                    this.FrameOffsets == input.FrameOffsets ||
                    (this.FrameOffsets != null &&
                    this.FrameOffsets.Equals(input.FrameOffsets))
                ) && 
                (
                    this.H264Level == input.H264Level ||
                    (this.H264Level != null &&
                    this.H264Level.Equals(input.H264Level))
                ) && 
                (
                    this.H264Profile == input.H264Profile ||
                    (this.H264Profile != null &&
                    this.H264Profile.Equals(input.H264Profile))
                ) && 
                (
                    this.H264Tune == input.H264Tune ||
                    (this.H264Tune != null &&
                    this.H264Tune.Equals(input.H264Tune))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImxType == input.ImxType ||
                    (this.ImxType != null &&
                    this.ImxType.Equals(input.ImxType))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    (this.Inputs != null &&
                    this.Inputs.Equals(input.Inputs))
                ) && 
                (
                    this.Interlace == input.Interlace ||
                    (this.Interlace != null &&
                    this.Interlace.Equals(input.Interlace))
                ) && 
                (
                    this.KeyframeInterval == input.KeyframeInterval ||
                    (this.KeyframeInterval != null &&
                    this.KeyframeInterval.Equals(input.KeyframeInterval))
                ) && 
                (
                    this.KeyframeRate == input.KeyframeRate ||
                    (this.KeyframeRate != null &&
                    this.KeyframeRate.Equals(input.KeyframeRate))
                ) && 
                (
                    this.Lang == input.Lang ||
                    (this.Lang != null &&
                    this.Lang.Equals(input.Lang))
                ) && 
                (
                    this.MaxRate == input.MaxRate ||
                    (this.MaxRate != null &&
                    this.MaxRate.Equals(input.MaxRate))
                ) && 
                (
                    this.MergeAudioStreams == input.MergeAudioStreams ||
                    (this.MergeAudioStreams != null &&
                    this.MergeAudioStreams.Equals(input.MergeAudioStreams))
                ) && 
                (
                    this.MuteAudioTracks == input.MuteAudioTracks ||
                    (this.MuteAudioTracks != null &&
                    this.MuteAudioTracks.Equals(input.MuteAudioTracks))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Outputs == input.Outputs ||
                    (this.Outputs != null &&
                    this.Outputs.Equals(input.Outputs))
                ) && 
                (
                    this.OutputsPathFormat == input.OutputsPathFormat ||
                    (this.OutputsPathFormat != null &&
                    this.OutputsPathFormat.Equals(input.OutputsPathFormat))
                ) && 
                (
                    this.PlaylistType == input.PlaylistType ||
                    (this.PlaylistType != null &&
                    this.PlaylistType.Equals(input.PlaylistType))
                ) && 
                (
                    this.PmtPid == input.PmtPid ||
                    (this.PmtPid != null &&
                    this.PmtPid.Equals(input.PmtPid))
                ) && 
                (
                    this.PresetName == input.PresetName ||
                    (this.PresetName != null &&
                    this.PresetName.Equals(input.PresetName))
                ) && 
                (
                    this.ProresFormat == input.ProresFormat ||
                    (this.ProresFormat != null &&
                    this.ProresFormat.Equals(input.ProresFormat))
                ) && 
                (
                    this.SegmentTime == input.SegmentTime ||
                    (this.SegmentTime != null &&
                    this.SegmentTime.Equals(input.SegmentTime))
                ) && 
                (
                    this.Stack == input.Stack ||
                    (this.Stack != null &&
                    this.Stack.Equals(input.Stack))
                ) && 
                (
                    this.StartingTimecode == input.StartingTimecode ||
                    (this.StartingTimecode != null &&
                    this.StartingTimecode.Equals(input.StartingTimecode))
                ) && 
                (
                    this.TelestreamBlockSize == input.TelestreamBlockSize ||
                    (this.TelestreamBlockSize != null &&
                    this.TelestreamBlockSize.Equals(input.TelestreamBlockSize))
                ) && 
                (
                    this.TelestreamBlurScaler == input.TelestreamBlurScaler ||
                    (this.TelestreamBlurScaler != null &&
                    this.TelestreamBlurScaler.Equals(input.TelestreamBlurScaler))
                ) && 
                (
                    this.TelestreamCostScaler == input.TelestreamCostScaler ||
                    (this.TelestreamCostScaler != null &&
                    this.TelestreamCostScaler.Equals(input.TelestreamCostScaler))
                ) && 
                (
                    this.TelestreamSearchLengthScaler == input.TelestreamSearchLengthScaler ||
                    (this.TelestreamSearchLengthScaler != null &&
                    this.TelestreamSearchLengthScaler.Equals(input.TelestreamSearchLengthScaler))
                ) && 
                (
                    this.TelestreamSubpelMode == input.TelestreamSubpelMode ||
                    (this.TelestreamSubpelMode != null &&
                    this.TelestreamSubpelMode.Equals(input.TelestreamSubpelMode))
                ) && 
                (
                    this.TimeCode == input.TimeCode ||
                    (this.TimeCode != null &&
                    this.TimeCode.Equals(input.TimeCode))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Trailers == input.Trailers ||
                    (this.Trailers != null &&
                    this.Trailers.Equals(input.Trailers))
                ) && 
                (
                    this.TransportRate == input.TransportRate ||
                    (this.TransportRate != null &&
                    this.TransportRate.Equals(input.TransportRate))
                ) && 
                (
                    this.TsPids == input.TsPids ||
                    (this.TsPids != null &&
                    this.TsPids.Equals(input.TsPids))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Upscale == input.Upscale ||
                    (this.Upscale != null &&
                    this.Upscale.Equals(input.Upscale))
                ) && 
                (
                    this.UseEditlist == input.UseEditlist ||
                    (this.UseEditlist != null &&
                    this.UseEditlist.Equals(input.UseEditlist))
                ) && 
                (
                    this.Variants == input.Variants ||
                    (this.Variants != null &&
                    this.Variants.Equals(input.Variants))
                ) && 
                (
                    this.VideoBitrate == input.VideoBitrate ||
                    (this.VideoBitrate != null &&
                    this.VideoBitrate.Equals(input.VideoBitrate))
                ) && 
                (
                    this.VideoPid == input.VideoPid ||
                    (this.VideoPid != null &&
                    this.VideoPid.Equals(input.VideoPid))
                ) && 
                (
                    this.WatermarkBottom == input.WatermarkBottom ||
                    (this.WatermarkBottom != null &&
                    this.WatermarkBottom.Equals(input.WatermarkBottom))
                ) && 
                (
                    this.WatermarkBumpers == input.WatermarkBumpers ||
                    (this.WatermarkBumpers != null &&
                    this.WatermarkBumpers.Equals(input.WatermarkBumpers))
                ) && 
                (
                    this.WatermarkHeight == input.WatermarkHeight ||
                    (this.WatermarkHeight != null &&
                    this.WatermarkHeight.Equals(input.WatermarkHeight))
                ) && 
                (
                    this.WatermarkLeft == input.WatermarkLeft ||
                    (this.WatermarkLeft != null &&
                    this.WatermarkLeft.Equals(input.WatermarkLeft))
                ) && 
                (
                    this.WatermarkRight == input.WatermarkRight ||
                    (this.WatermarkRight != null &&
                    this.WatermarkRight.Equals(input.WatermarkRight))
                ) && 
                (
                    this.WatermarkTop == input.WatermarkTop ||
                    (this.WatermarkTop != null &&
                    this.WatermarkTop.Equals(input.WatermarkTop))
                ) && 
                (
                    this.WatermarkTrailers == input.WatermarkTrailers ||
                    (this.WatermarkTrailers != null &&
                    this.WatermarkTrailers.Equals(input.WatermarkTrailers))
                ) && 
                (
                    this.WatermarkUrl == input.WatermarkUrl ||
                    (this.WatermarkUrl != null &&
                    this.WatermarkUrl.Equals(input.WatermarkUrl))
                ) && 
                (
                    this.WatermarkWidth == input.WatermarkWidth ||
                    (this.WatermarkWidth != null &&
                    this.WatermarkWidth.Equals(input.WatermarkWidth))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.X264Options == input.X264Options ||
                    (this.X264Options != null &&
                    this.X264Options.Equals(input.X264Options))
                ) && 
                (
                    this.X265Options == input.X265Options ||
                    (this.X265Options != null &&
                    this.X265Options.Equals(input.X265Options))
                ) && 
                (
                    this.XdcamFormat == input.XdcamFormat ||
                    (this.XdcamFormat != null &&
                    this.XdcamFormat.Equals(input.XdcamFormat))
                ) && 
                (
                    this.TachyonAllowRemovePulldown == input.TachyonAllowRemovePulldown ||
                    (this.TachyonAllowRemovePulldown != null &&
                    this.TachyonAllowRemovePulldown.Equals(input.TachyonAllowRemovePulldown))
                ) && 
                (
                    this.TachyonEnablePostPulldownFilter == input.TachyonEnablePostPulldownFilter ||
                    (this.TachyonEnablePostPulldownFilter != null &&
                    this.TachyonEnablePostPulldownFilter.Equals(input.TachyonEnablePostPulldownFilter))
                ) && 
                (
                    this.TachyonMediaHintIsCartoon == input.TachyonMediaHintIsCartoon ||
                    (this.TachyonMediaHintIsCartoon != null &&
                    this.TachyonMediaHintIsCartoon.Equals(input.TachyonMediaHintIsCartoon))
                ) && 
                (
                    this.TachyonMediaHintHasChromaNoise == input.TachyonMediaHintHasChromaNoise ||
                    (this.TachyonMediaHintHasChromaNoise != null &&
                    this.TachyonMediaHintHasChromaNoise.Equals(input.TachyonMediaHintHasChromaNoise))
                ) && 
                (
                    this.TachyonMoreSensitiveRemovePulldown == input.TachyonMoreSensitiveRemovePulldown ||
                    (this.TachyonMoreSensitiveRemovePulldown != null &&
                    this.TachyonMoreSensitiveRemovePulldown.Equals(input.TachyonMoreSensitiveRemovePulldown))
                ) && 
                (
                    this.TachyonAllowAddStandardPd == input.TachyonAllowAddStandardPd ||
                    (this.TachyonAllowAddStandardPd != null &&
                    this.TachyonAllowAddStandardPd.Equals(input.TachyonAllowAddStandardPd))
                ) && 
                (
                    this.TachyonAllowAdd22pd == input.TachyonAllowAdd22pd ||
                    (this.TachyonAllowAdd22pd != null &&
                    this.TachyonAllowAdd22pd.Equals(input.TachyonAllowAdd22pd))
                ) && 
                (
                    this.TachyonAllowAdd44pd == input.TachyonAllowAdd44pd ||
                    (this.TachyonAllowAdd44pd != null &&
                    this.TachyonAllowAdd44pd.Equals(input.TachyonAllowAdd44pd))
                ) && 
                (
                    this.TachyonAllowAdd46pd == input.TachyonAllowAdd46pd ||
                    (this.TachyonAllowAdd46pd != null &&
                    this.TachyonAllowAdd46pd.Equals(input.TachyonAllowAdd46pd))
                ) && 
                (
                    this.TachyonAllowAddEuroPd == input.TachyonAllowAddEuroPd ||
                    (this.TachyonAllowAddEuroPd != null &&
                    this.TachyonAllowAddEuroPd.Equals(input.TachyonAllowAddEuroPd))
                ) && 
                (
                    this.TachyonAllowAddAdaptivePd == input.TachyonAllowAddAdaptivePd ||
                    (this.TachyonAllowAddAdaptivePd != null &&
                    this.TachyonAllowAddAdaptivePd.Equals(input.TachyonAllowAddAdaptivePd))
                ) && 
                (
                    this.TachyonMotionAmount == input.TachyonMotionAmount ||
                    (this.TachyonMotionAmount != null &&
                    this.TachyonMotionAmount.Equals(input.TachyonMotionAmount))
                ) && 
                (
                    this.TachyonFallbackSize == input.TachyonFallbackSize ||
                    (this.TachyonFallbackSize != null &&
                    this.TachyonFallbackSize.Equals(input.TachyonFallbackSize))
                ) && 
                (
                    this.TachyonMblockSize == input.TachyonMblockSize ||
                    (this.TachyonMblockSize != null &&
                    this.TachyonMblockSize.Equals(input.TachyonMblockSize))
                ) && 
                (
                    this.TachyonCutDetectionSensitivity == input.TachyonCutDetectionSensitivity ||
                    (this.TachyonCutDetectionSensitivity != null &&
                    this.TachyonCutDetectionSensitivity.Equals(input.TachyonCutDetectionSensitivity))
                ) && 
                (
                    this.Eac3EvolutionEnable == input.Eac3EvolutionEnable ||
                    (this.Eac3EvolutionEnable != null &&
                    this.Eac3EvolutionEnable.Equals(input.Eac3EvolutionEnable))
                ) && 
                (
                    this.Eac3BitstreamMode == input.Eac3BitstreamMode ||
                    (this.Eac3BitstreamMode != null &&
                    this.Eac3BitstreamMode.Equals(input.Eac3BitstreamMode))
                ) && 
                (
                    this.Eac3NinetyDegreePhaseShift == input.Eac3NinetyDegreePhaseShift ||
                    (this.Eac3NinetyDegreePhaseShift != null &&
                    this.Eac3NinetyDegreePhaseShift.Equals(input.Eac3NinetyDegreePhaseShift))
                ) && 
                (
                    this.Eac3ThreeDecibelAttenuation == input.Eac3ThreeDecibelAttenuation ||
                    (this.Eac3ThreeDecibelAttenuation != null &&
                    this.Eac3ThreeDecibelAttenuation.Equals(input.Eac3ThreeDecibelAttenuation))
                ) && 
                (
                    this.Eac3EnableLfeLowPassFilter == input.Eac3EnableLfeLowPassFilter ||
                    (this.Eac3EnableLfeLowPassFilter != null &&
                    this.Eac3EnableLfeLowPassFilter.Equals(input.Eac3EnableLfeLowPassFilter))
                ) && 
                (
                    this.Eac3AnalogToDigitalConverterType == input.Eac3AnalogToDigitalConverterType ||
                    (this.Eac3AnalogToDigitalConverterType != null &&
                    this.Eac3AnalogToDigitalConverterType.Equals(input.Eac3AnalogToDigitalConverterType))
                ) && 
                (
                    this.Eac3StereoDownmixPreference == input.Eac3StereoDownmixPreference ||
                    (this.Eac3StereoDownmixPreference != null &&
                    this.Eac3StereoDownmixPreference.Equals(input.Eac3StereoDownmixPreference))
                ) && 
                (
                    this.Eac3LtRtCenterMixLevel == input.Eac3LtRtCenterMixLevel ||
                    (this.Eac3LtRtCenterMixLevel != null &&
                    this.Eac3LtRtCenterMixLevel.Equals(input.Eac3LtRtCenterMixLevel))
                ) && 
                (
                    this.Eac3LtRtSurroundMixLevel == input.Eac3LtRtSurroundMixLevel ||
                    (this.Eac3LtRtSurroundMixLevel != null &&
                    this.Eac3LtRtSurroundMixLevel.Equals(input.Eac3LtRtSurroundMixLevel))
                ) && 
                (
                    this.Eac3LoRoCenterMixLevel == input.Eac3LoRoCenterMixLevel ||
                    (this.Eac3LoRoCenterMixLevel != null &&
                    this.Eac3LoRoCenterMixLevel.Equals(input.Eac3LoRoCenterMixLevel))
                ) && 
                (
                    this.Eac3LoRoSurroundMixLevel == input.Eac3LoRoSurroundMixLevel ||
                    (this.Eac3LoRoSurroundMixLevel != null &&
                    this.Eac3LoRoSurroundMixLevel.Equals(input.Eac3LoRoSurroundMixLevel))
                ) && 
                (
                    this.Eac3SurroundExMode == input.Eac3SurroundExMode ||
                    (this.Eac3SurroundExMode != null &&
                    this.Eac3SurroundExMode.Equals(input.Eac3SurroundExMode))
                ) && 
                (
                    this.Eac3DrcLineModeProfile == input.Eac3DrcLineModeProfile ||
                    (this.Eac3DrcLineModeProfile != null &&
                    this.Eac3DrcLineModeProfile.Equals(input.Eac3DrcLineModeProfile))
                ) && 
                (
                    this.Eac3DrcRfModeProfile == input.Eac3DrcRfModeProfile ||
                    (this.Eac3DrcRfModeProfile != null &&
                    this.Eac3DrcRfModeProfile.Equals(input.Eac3DrcRfModeProfile))
                ) && 
                (
                    this.Eac3DialogNormalization == input.Eac3DialogNormalization ||
                    (this.Eac3DialogNormalization != null &&
                    this.Eac3DialogNormalization.Equals(input.Eac3DialogNormalization))
                ) && 
                (
                    this.Eac3RoomType == input.Eac3RoomType ||
                    (this.Eac3RoomType != null &&
                    this.Eac3RoomType.Equals(input.Eac3RoomType))
                ) && 
                (
                    this.Eac3MixingLevel == input.Eac3MixingLevel ||
                    (this.Eac3MixingLevel != null &&
                    this.Eac3MixingLevel.Equals(input.Eac3MixingLevel))
                ) && 
                (
                    this.Eac3CopyrightProtected == input.Eac3CopyrightProtected ||
                    (this.Eac3CopyrightProtected != null &&
                    this.Eac3CopyrightProtected.Equals(input.Eac3CopyrightProtected))
                ) && 
                (
                    this.Eac3OriginalBitstream == input.Eac3OriginalBitstream ||
                    (this.Eac3OriginalBitstream != null &&
                    this.Eac3OriginalBitstream.Equals(input.Eac3OriginalBitstream))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdvancedFpsConversion != null)
                    hashCode = hashCode * 59 + this.AdvancedFpsConversion.GetHashCode();
                if (this.AspectMode != null)
                    hashCode = hashCode * 59 + this.AspectMode.GetHashCode();
                if (this.AspectRatio != null)
                    hashCode = hashCode * 59 + this.AspectRatio.GetHashCode();
                if (this.AudioBitrate != null)
                    hashCode = hashCode * 59 + this.AudioBitrate.GetHashCode();
                if (this.AudioChannels != null)
                    hashCode = hashCode * 59 + this.AudioChannels.GetHashCode();
                if (this.AudioChannelsLayout != null)
                    hashCode = hashCode * 59 + this.AudioChannelsLayout.GetHashCode();
                if (this.AudioChannelsPerTrack != null)
                    hashCode = hashCode * 59 + this.AudioChannelsPerTrack.GetHashCode();
                if (this.AudioCodec != null)
                    hashCode = hashCode * 59 + this.AudioCodec.GetHashCode();
                if (this.AudioFormat != null)
                    hashCode = hashCode * 59 + this.AudioFormat.GetHashCode();
                if (this.AudioMap != null)
                    hashCode = hashCode * 59 + this.AudioMap.GetHashCode();
                if (this.AudioPid != null)
                    hashCode = hashCode * 59 + this.AudioPid.GetHashCode();
                if (this.AudioProfile != null)
                    hashCode = hashCode * 59 + this.AudioProfile.GetHashCode();
                if (this.AudioSampleRate != null)
                    hashCode = hashCode * 59 + this.AudioSampleRate.GetHashCode();
                if (this.AudioStreamId != null)
                    hashCode = hashCode * 59 + this.AudioStreamId.GetHashCode();
                if (this.AudioStreams != null)
                    hashCode = hashCode * 59 + this.AudioStreams.GetHashCode();
                if (this.AvcintraClass != null)
                    hashCode = hashCode * 59 + this.AvcintraClass.GetHashCode();
                if (this.BufferSize != null)
                    hashCode = hashCode * 59 + this.BufferSize.GetHashCode();
                if (this.BufferSizeInPackets != null)
                    hashCode = hashCode * 59 + this.BufferSizeInPackets.GetHashCode();
                if (this.Bumpers != null)
                    hashCode = hashCode * 59 + this.Bumpers.GetHashCode();
                if (this.ByteRangeRequests != null)
                    hashCode = hashCode * 59 + this.ByteRangeRequests.GetHashCode();
                if (this.ClipEnd != null)
                    hashCode = hashCode * 59 + this.ClipEnd.GetHashCode();
                if (this.PixelFormat != null)
                    hashCode = hashCode * 59 + this.PixelFormat.GetHashCode();
                if (this.ClipLength != null)
                    hashCode = hashCode * 59 + this.ClipLength.GetHashCode();
                if (this.ClipOffset != null)
                    hashCode = hashCode * 59 + this.ClipOffset.GetHashCode();
                if (this.ClosedCaptions != null)
                    hashCode = hashCode * 59 + this.ClosedCaptions.GetHashCode();
                if (this.ColorMetadata != null)
                    hashCode = hashCode * 59 + this.ColorMetadata.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CropInputBottom != null)
                    hashCode = hashCode * 59 + this.CropInputBottom.GetHashCode();
                if (this.CropInputHeight != null)
                    hashCode = hashCode * 59 + this.CropInputHeight.GetHashCode();
                if (this.CropInputLeft != null)
                    hashCode = hashCode * 59 + this.CropInputLeft.GetHashCode();
                if (this.CropInputRight != null)
                    hashCode = hashCode * 59 + this.CropInputRight.GetHashCode();
                if (this.CropInputTop != null)
                    hashCode = hashCode * 59 + this.CropInputTop.GetHashCode();
                if (this.CropInputWidth != null)
                    hashCode = hashCode * 59 + this.CropInputWidth.GetHashCode();
                if (this.DashProfile != null)
                    hashCode = hashCode * 59 + this.DashProfile.GetHashCode();
                if (this.Deinterlace != null)
                    hashCode = hashCode * 59 + this.Deinterlace.GetHashCode();
                if (this.DeinterlaceFrames != null)
                    hashCode = hashCode * 59 + this.DeinterlaceFrames.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DnxhdType != null)
                    hashCode = hashCode * 59 + this.DnxhdType.GetHashCode();
                if (this.Encryption != null)
                    hashCode = hashCode * 59 + this.Encryption.GetHashCode();
                if (this.Extname != null)
                    hashCode = hashCode * 59 + this.Extname.GetHashCode();
                if (this.Fps != null)
                    hashCode = hashCode * 59 + this.Fps.GetHashCode();
                if (this.FrameCount != null)
                    hashCode = hashCode * 59 + this.FrameCount.GetHashCode();
                if (this.FrameInterval != null)
                    hashCode = hashCode * 59 + this.FrameInterval.GetHashCode();
                if (this.FrameOffsets != null)
                    hashCode = hashCode * 59 + this.FrameOffsets.GetHashCode();
                if (this.H264Level != null)
                    hashCode = hashCode * 59 + this.H264Level.GetHashCode();
                if (this.H264Profile != null)
                    hashCode = hashCode * 59 + this.H264Profile.GetHashCode();
                if (this.H264Tune != null)
                    hashCode = hashCode * 59 + this.H264Tune.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImxType != null)
                    hashCode = hashCode * 59 + this.ImxType.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.Interlace != null)
                    hashCode = hashCode * 59 + this.Interlace.GetHashCode();
                if (this.KeyframeInterval != null)
                    hashCode = hashCode * 59 + this.KeyframeInterval.GetHashCode();
                if (this.KeyframeRate != null)
                    hashCode = hashCode * 59 + this.KeyframeRate.GetHashCode();
                if (this.Lang != null)
                    hashCode = hashCode * 59 + this.Lang.GetHashCode();
                if (this.MaxRate != null)
                    hashCode = hashCode * 59 + this.MaxRate.GetHashCode();
                if (this.MergeAudioStreams != null)
                    hashCode = hashCode * 59 + this.MergeAudioStreams.GetHashCode();
                if (this.MuteAudioTracks != null)
                    hashCode = hashCode * 59 + this.MuteAudioTracks.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Outputs != null)
                    hashCode = hashCode * 59 + this.Outputs.GetHashCode();
                if (this.OutputsPathFormat != null)
                    hashCode = hashCode * 59 + this.OutputsPathFormat.GetHashCode();
                if (this.PlaylistType != null)
                    hashCode = hashCode * 59 + this.PlaylistType.GetHashCode();
                if (this.PmtPid != null)
                    hashCode = hashCode * 59 + this.PmtPid.GetHashCode();
                if (this.PresetName != null)
                    hashCode = hashCode * 59 + this.PresetName.GetHashCode();
                if (this.ProresFormat != null)
                    hashCode = hashCode * 59 + this.ProresFormat.GetHashCode();
                if (this.SegmentTime != null)
                    hashCode = hashCode * 59 + this.SegmentTime.GetHashCode();
                if (this.Stack != null)
                    hashCode = hashCode * 59 + this.Stack.GetHashCode();
                if (this.StartingTimecode != null)
                    hashCode = hashCode * 59 + this.StartingTimecode.GetHashCode();
                if (this.TelestreamBlockSize != null)
                    hashCode = hashCode * 59 + this.TelestreamBlockSize.GetHashCode();
                if (this.TelestreamBlurScaler != null)
                    hashCode = hashCode * 59 + this.TelestreamBlurScaler.GetHashCode();
                if (this.TelestreamCostScaler != null)
                    hashCode = hashCode * 59 + this.TelestreamCostScaler.GetHashCode();
                if (this.TelestreamSearchLengthScaler != null)
                    hashCode = hashCode * 59 + this.TelestreamSearchLengthScaler.GetHashCode();
                if (this.TelestreamSubpelMode != null)
                    hashCode = hashCode * 59 + this.TelestreamSubpelMode.GetHashCode();
                if (this.TimeCode != null)
                    hashCode = hashCode * 59 + this.TimeCode.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Trailers != null)
                    hashCode = hashCode * 59 + this.Trailers.GetHashCode();
                if (this.TransportRate != null)
                    hashCode = hashCode * 59 + this.TransportRate.GetHashCode();
                if (this.TsPids != null)
                    hashCode = hashCode * 59 + this.TsPids.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Upscale != null)
                    hashCode = hashCode * 59 + this.Upscale.GetHashCode();
                if (this.UseEditlist != null)
                    hashCode = hashCode * 59 + this.UseEditlist.GetHashCode();
                if (this.Variants != null)
                    hashCode = hashCode * 59 + this.Variants.GetHashCode();
                if (this.VideoBitrate != null)
                    hashCode = hashCode * 59 + this.VideoBitrate.GetHashCode();
                if (this.VideoPid != null)
                    hashCode = hashCode * 59 + this.VideoPid.GetHashCode();
                if (this.WatermarkBottom != null)
                    hashCode = hashCode * 59 + this.WatermarkBottom.GetHashCode();
                if (this.WatermarkBumpers != null)
                    hashCode = hashCode * 59 + this.WatermarkBumpers.GetHashCode();
                if (this.WatermarkHeight != null)
                    hashCode = hashCode * 59 + this.WatermarkHeight.GetHashCode();
                if (this.WatermarkLeft != null)
                    hashCode = hashCode * 59 + this.WatermarkLeft.GetHashCode();
                if (this.WatermarkRight != null)
                    hashCode = hashCode * 59 + this.WatermarkRight.GetHashCode();
                if (this.WatermarkTop != null)
                    hashCode = hashCode * 59 + this.WatermarkTop.GetHashCode();
                if (this.WatermarkTrailers != null)
                    hashCode = hashCode * 59 + this.WatermarkTrailers.GetHashCode();
                if (this.WatermarkUrl != null)
                    hashCode = hashCode * 59 + this.WatermarkUrl.GetHashCode();
                if (this.WatermarkWidth != null)
                    hashCode = hashCode * 59 + this.WatermarkWidth.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.X264Options != null)
                    hashCode = hashCode * 59 + this.X264Options.GetHashCode();
                if (this.X265Options != null)
                    hashCode = hashCode * 59 + this.X265Options.GetHashCode();
                if (this.XdcamFormat != null)
                    hashCode = hashCode * 59 + this.XdcamFormat.GetHashCode();
                if (this.TachyonAllowRemovePulldown != null)
                    hashCode = hashCode * 59 + this.TachyonAllowRemovePulldown.GetHashCode();
                if (this.TachyonEnablePostPulldownFilter != null)
                    hashCode = hashCode * 59 + this.TachyonEnablePostPulldownFilter.GetHashCode();
                if (this.TachyonMediaHintIsCartoon != null)
                    hashCode = hashCode * 59 + this.TachyonMediaHintIsCartoon.GetHashCode();
                if (this.TachyonMediaHintHasChromaNoise != null)
                    hashCode = hashCode * 59 + this.TachyonMediaHintHasChromaNoise.GetHashCode();
                if (this.TachyonMoreSensitiveRemovePulldown != null)
                    hashCode = hashCode * 59 + this.TachyonMoreSensitiveRemovePulldown.GetHashCode();
                if (this.TachyonAllowAddStandardPd != null)
                    hashCode = hashCode * 59 + this.TachyonAllowAddStandardPd.GetHashCode();
                if (this.TachyonAllowAdd22pd != null)
                    hashCode = hashCode * 59 + this.TachyonAllowAdd22pd.GetHashCode();
                if (this.TachyonAllowAdd44pd != null)
                    hashCode = hashCode * 59 + this.TachyonAllowAdd44pd.GetHashCode();
                if (this.TachyonAllowAdd46pd != null)
                    hashCode = hashCode * 59 + this.TachyonAllowAdd46pd.GetHashCode();
                if (this.TachyonAllowAddEuroPd != null)
                    hashCode = hashCode * 59 + this.TachyonAllowAddEuroPd.GetHashCode();
                if (this.TachyonAllowAddAdaptivePd != null)
                    hashCode = hashCode * 59 + this.TachyonAllowAddAdaptivePd.GetHashCode();
                if (this.TachyonMotionAmount != null)
                    hashCode = hashCode * 59 + this.TachyonMotionAmount.GetHashCode();
                if (this.TachyonFallbackSize != null)
                    hashCode = hashCode * 59 + this.TachyonFallbackSize.GetHashCode();
                if (this.TachyonMblockSize != null)
                    hashCode = hashCode * 59 + this.TachyonMblockSize.GetHashCode();
                if (this.TachyonCutDetectionSensitivity != null)
                    hashCode = hashCode * 59 + this.TachyonCutDetectionSensitivity.GetHashCode();
                if (this.Eac3EvolutionEnable != null)
                    hashCode = hashCode * 59 + this.Eac3EvolutionEnable.GetHashCode();
                if (this.Eac3BitstreamMode != null)
                    hashCode = hashCode * 59 + this.Eac3BitstreamMode.GetHashCode();
                if (this.Eac3NinetyDegreePhaseShift != null)
                    hashCode = hashCode * 59 + this.Eac3NinetyDegreePhaseShift.GetHashCode();
                if (this.Eac3ThreeDecibelAttenuation != null)
                    hashCode = hashCode * 59 + this.Eac3ThreeDecibelAttenuation.GetHashCode();
                if (this.Eac3EnableLfeLowPassFilter != null)
                    hashCode = hashCode * 59 + this.Eac3EnableLfeLowPassFilter.GetHashCode();
                if (this.Eac3AnalogToDigitalConverterType != null)
                    hashCode = hashCode * 59 + this.Eac3AnalogToDigitalConverterType.GetHashCode();
                if (this.Eac3StereoDownmixPreference != null)
                    hashCode = hashCode * 59 + this.Eac3StereoDownmixPreference.GetHashCode();
                if (this.Eac3LtRtCenterMixLevel != null)
                    hashCode = hashCode * 59 + this.Eac3LtRtCenterMixLevel.GetHashCode();
                if (this.Eac3LtRtSurroundMixLevel != null)
                    hashCode = hashCode * 59 + this.Eac3LtRtSurroundMixLevel.GetHashCode();
                if (this.Eac3LoRoCenterMixLevel != null)
                    hashCode = hashCode * 59 + this.Eac3LoRoCenterMixLevel.GetHashCode();
                if (this.Eac3LoRoSurroundMixLevel != null)
                    hashCode = hashCode * 59 + this.Eac3LoRoSurroundMixLevel.GetHashCode();
                if (this.Eac3SurroundExMode != null)
                    hashCode = hashCode * 59 + this.Eac3SurroundExMode.GetHashCode();
                if (this.Eac3DrcLineModeProfile != null)
                    hashCode = hashCode * 59 + this.Eac3DrcLineModeProfile.GetHashCode();
                if (this.Eac3DrcRfModeProfile != null)
                    hashCode = hashCode * 59 + this.Eac3DrcRfModeProfile.GetHashCode();
                if (this.Eac3DialogNormalization != null)
                    hashCode = hashCode * 59 + this.Eac3DialogNormalization.GetHashCode();
                if (this.Eac3RoomType != null)
                    hashCode = hashCode * 59 + this.Eac3RoomType.GetHashCode();
                if (this.Eac3MixingLevel != null)
                    hashCode = hashCode * 59 + this.Eac3MixingLevel.GetHashCode();
                if (this.Eac3CopyrightProtected != null)
                    hashCode = hashCode * 59 + this.Eac3CopyrightProtected.GetHashCode();
                if (this.Eac3OriginalBitstream != null)
                    hashCode = hashCode * 59 + this.Eac3OriginalBitstream.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
