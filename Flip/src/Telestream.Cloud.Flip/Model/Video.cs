/* 
 * Flip API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.1
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Flip.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Flip.Model
{
    /// <summary>
    /// Video
    /// </summary>
    [DataContract]
    public partial class Video :  IEquatable<Video>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Video" /> class.
        /// </summary>
        /// <param name="Id">A unique identifier of the Video..</param>
        /// <param name="AudioBitrate">audio bitrate (in bits/s).</param>
        /// <param name="AudioChannels">A number of audio channels..</param>
        /// <param name="AudioCodec">A codec that has been used to encode audio streams..</param>
        /// <param name="AudioSampleRate">A number of samples of audio carried per second..</param>
        /// <param name="CreatedAt">A date and time when the Video has been created..</param>
        /// <param name="Duration">A duration of the video in seconds..</param>
        /// <param name="EncodingsCount">A number of related Encoding objects..</param>
        /// <param name="ErrorClass">A class of an error that has occurred during the encoding process. It is present only if the encoding status is equal to &#x60;fail&#x60;..</param>
        /// <param name="ErrorMessage">A message that explains why the encoding process has resulted in an error. It is present only if the encoding status is equal to &#x60;fail&#x60;..</param>
        /// <param name="Extname">Extension of the source file..</param>
        /// <param name="FileSize">A size of the source file..</param>
        /// <param name="Fps">Number of frames per second..</param>
        /// <param name="Height">Height of the output video..</param>
        /// <param name="Width">Width of the output video..</param>
        /// <param name="MimeType">A mime type of the source file..</param>
        /// <param name="OriginalFilename">A name of the source file..</param>
        /// <param name="Path">Path.</param>
        /// <param name="Payload">Payload is an arbitrary text of length 256 or shorter that you can store along the Video. It is typically used to retain an association with one of your own DB record ID..</param>
        /// <param name="SourceUrl">An URL pointing to the source file..</param>
        /// <param name="Status">Determines at what stage of importing process the Video is at the moment..</param>
        /// <param name="UpdatedAt">A date and time when a Video has been updated last time..</param>
        /// <param name="VideoBitrate">video bitrate (in bits/s).</param>
        /// <param name="VideoCodec">A codec that has been used to encode the input file&#39;s video streams..</param>
        public Video(string Id = default(string), int? AudioBitrate = default(int?), int? AudioChannels = default(int?), string AudioCodec = default(string), int? AudioSampleRate = default(int?), string CreatedAt = default(string), int? Duration = default(int?), int? EncodingsCount = default(int?), string ErrorClass = default(string), string ErrorMessage = default(string), string Extname = default(string), int? FileSize = default(int?), decimal? Fps = default(decimal?), int? Height = default(int?), int? Width = default(int?), string MimeType = default(string), string OriginalFilename = default(string), string Path = default(string), string Payload = default(string), string SourceUrl = default(string), string Status = default(string), string UpdatedAt = default(string), string VideoBitrate = default(string), string VideoCodec = default(string))
        {
            this.Id = Id;
            this.AudioBitrate = AudioBitrate;
            this.AudioChannels = AudioChannels;
            this.AudioCodec = AudioCodec;
            this.AudioSampleRate = AudioSampleRate;
            this.CreatedAt = CreatedAt;
            this.Duration = Duration;
            this.EncodingsCount = EncodingsCount;
            this.ErrorClass = ErrorClass;
            this.ErrorMessage = ErrorMessage;
            this.Extname = Extname;
            this.FileSize = FileSize;
            this.Fps = Fps;
            this.Height = Height;
            this.Width = Width;
            this.MimeType = MimeType;
            this.OriginalFilename = OriginalFilename;
            this.Path = Path;
            this.Payload = Payload;
            this.SourceUrl = SourceUrl;
            this.Status = Status;
            this.UpdatedAt = UpdatedAt;
            this.VideoBitrate = VideoBitrate;
            this.VideoCodec = VideoCodec;
        }
        
        /// <summary>
        /// A unique identifier of the Video.
        /// </summary>
        /// <value>A unique identifier of the Video.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// audio bitrate (in bits/s)
        /// </summary>
        /// <value>audio bitrate (in bits/s)</value>
        [DataMember(Name="audio_bitrate", EmitDefaultValue=false)]
        public int? AudioBitrate { get; set; }

        /// <summary>
        /// A number of audio channels.
        /// </summary>
        /// <value>A number of audio channels.</value>
        [DataMember(Name="audio_channels", EmitDefaultValue=false)]
        public int? AudioChannels { get; set; }

        /// <summary>
        /// A codec that has been used to encode audio streams.
        /// </summary>
        /// <value>A codec that has been used to encode audio streams.</value>
        [DataMember(Name="audio_codec", EmitDefaultValue=false)]
        public string AudioCodec { get; set; }

        /// <summary>
        /// A number of samples of audio carried per second.
        /// </summary>
        /// <value>A number of samples of audio carried per second.</value>
        [DataMember(Name="audio_sample_rate", EmitDefaultValue=false)]
        public int? AudioSampleRate { get; set; }

        /// <summary>
        /// A date and time when the Video has been created.
        /// </summary>
        /// <value>A date and time when the Video has been created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// A duration of the video in seconds.
        /// </summary>
        /// <value>A duration of the video in seconds.</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// A number of related Encoding objects.
        /// </summary>
        /// <value>A number of related Encoding objects.</value>
        [DataMember(Name="encodings_count", EmitDefaultValue=false)]
        public int? EncodingsCount { get; set; }

        /// <summary>
        /// A class of an error that has occurred during the encoding process. It is present only if the encoding status is equal to &#x60;fail&#x60;.
        /// </summary>
        /// <value>A class of an error that has occurred during the encoding process. It is present only if the encoding status is equal to &#x60;fail&#x60;.</value>
        [DataMember(Name="error_class", EmitDefaultValue=false)]
        public string ErrorClass { get; set; }

        /// <summary>
        /// A message that explains why the encoding process has resulted in an error. It is present only if the encoding status is equal to &#x60;fail&#x60;.
        /// </summary>
        /// <value>A message that explains why the encoding process has resulted in an error. It is present only if the encoding status is equal to &#x60;fail&#x60;.</value>
        [DataMember(Name="error_message", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Extension of the source file.
        /// </summary>
        /// <value>Extension of the source file.</value>
        [DataMember(Name="extname", EmitDefaultValue=false)]
        public string Extname { get; set; }

        /// <summary>
        /// A size of the source file.
        /// </summary>
        /// <value>A size of the source file.</value>
        [DataMember(Name="file_size", EmitDefaultValue=false)]
        public int? FileSize { get; set; }

        /// <summary>
        /// Number of frames per second.
        /// </summary>
        /// <value>Number of frames per second.</value>
        [DataMember(Name="fps", EmitDefaultValue=false)]
        public decimal? Fps { get; set; }

        /// <summary>
        /// Height of the output video.
        /// </summary>
        /// <value>Height of the output video.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Width of the output video.
        /// </summary>
        /// <value>Width of the output video.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// A mime type of the source file.
        /// </summary>
        /// <value>A mime type of the source file.</value>
        [DataMember(Name="mime_type", EmitDefaultValue=false)]
        public string MimeType { get; set; }

        /// <summary>
        /// A name of the source file.
        /// </summary>
        /// <value>A name of the source file.</value>
        [DataMember(Name="original_filename", EmitDefaultValue=false)]
        public string OriginalFilename { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Payload is an arbitrary text of length 256 or shorter that you can store along the Video. It is typically used to retain an association with one of your own DB record ID.
        /// </summary>
        /// <value>Payload is an arbitrary text of length 256 or shorter that you can store along the Video. It is typically used to retain an association with one of your own DB record ID.</value>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public string Payload { get; set; }

        /// <summary>
        /// An URL pointing to the source file.
        /// </summary>
        /// <value>An URL pointing to the source file.</value>
        [DataMember(Name="source_url", EmitDefaultValue=false)]
        public string SourceUrl { get; set; }

        /// <summary>
        /// Determines at what stage of importing process the Video is at the moment.
        /// </summary>
        /// <value>Determines at what stage of importing process the Video is at the moment.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// A date and time when a Video has been updated last time.
        /// </summary>
        /// <value>A date and time when a Video has been updated last time.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// video bitrate (in bits/s)
        /// </summary>
        /// <value>video bitrate (in bits/s)</value>
        [DataMember(Name="video_bitrate", EmitDefaultValue=false)]
        public string VideoBitrate { get; set; }

        /// <summary>
        /// A codec that has been used to encode the input file&#39;s video streams.
        /// </summary>
        /// <value>A codec that has been used to encode the input file&#39;s video streams.</value>
        [DataMember(Name="video_codec", EmitDefaultValue=false)]
        public string VideoCodec { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Video {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AudioBitrate: ").Append(AudioBitrate).Append("\n");
            sb.Append("  AudioChannels: ").Append(AudioChannels).Append("\n");
            sb.Append("  AudioCodec: ").Append(AudioCodec).Append("\n");
            sb.Append("  AudioSampleRate: ").Append(AudioSampleRate).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  EncodingsCount: ").Append(EncodingsCount).Append("\n");
            sb.Append("  ErrorClass: ").Append(ErrorClass).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Extname: ").Append(Extname).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  Fps: ").Append(Fps).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  OriginalFilename: ").Append(OriginalFilename).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  SourceUrl: ").Append(SourceUrl).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  VideoBitrate: ").Append(VideoBitrate).Append("\n");
            sb.Append("  VideoCodec: ").Append(VideoCodec).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Video);
        }

        /// <summary>
        /// Returns true if Video instances are equal
        /// </summary>
        /// <param name="input">Instance of Video to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Video input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AudioBitrate == input.AudioBitrate ||
                    (this.AudioBitrate != null &&
                    this.AudioBitrate.Equals(input.AudioBitrate))
                ) && 
                (
                    this.AudioChannels == input.AudioChannels ||
                    (this.AudioChannels != null &&
                    this.AudioChannels.Equals(input.AudioChannels))
                ) && 
                (
                    this.AudioCodec == input.AudioCodec ||
                    (this.AudioCodec != null &&
                    this.AudioCodec.Equals(input.AudioCodec))
                ) && 
                (
                    this.AudioSampleRate == input.AudioSampleRate ||
                    (this.AudioSampleRate != null &&
                    this.AudioSampleRate.Equals(input.AudioSampleRate))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.EncodingsCount == input.EncodingsCount ||
                    (this.EncodingsCount != null &&
                    this.EncodingsCount.Equals(input.EncodingsCount))
                ) && 
                (
                    this.ErrorClass == input.ErrorClass ||
                    (this.ErrorClass != null &&
                    this.ErrorClass.Equals(input.ErrorClass))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.Extname == input.Extname ||
                    (this.Extname != null &&
                    this.Extname.Equals(input.Extname))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.Fps == input.Fps ||
                    (this.Fps != null &&
                    this.Fps.Equals(input.Fps))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.OriginalFilename == input.OriginalFilename ||
                    (this.OriginalFilename != null &&
                    this.OriginalFilename.Equals(input.OriginalFilename))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                ) && 
                (
                    this.SourceUrl == input.SourceUrl ||
                    (this.SourceUrl != null &&
                    this.SourceUrl.Equals(input.SourceUrl))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.VideoBitrate == input.VideoBitrate ||
                    (this.VideoBitrate != null &&
                    this.VideoBitrate.Equals(input.VideoBitrate))
                ) && 
                (
                    this.VideoCodec == input.VideoCodec ||
                    (this.VideoCodec != null &&
                    this.VideoCodec.Equals(input.VideoCodec))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AudioBitrate != null)
                    hashCode = hashCode * 59 + this.AudioBitrate.GetHashCode();
                if (this.AudioChannels != null)
                    hashCode = hashCode * 59 + this.AudioChannels.GetHashCode();
                if (this.AudioCodec != null)
                    hashCode = hashCode * 59 + this.AudioCodec.GetHashCode();
                if (this.AudioSampleRate != null)
                    hashCode = hashCode * 59 + this.AudioSampleRate.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.EncodingsCount != null)
                    hashCode = hashCode * 59 + this.EncodingsCount.GetHashCode();
                if (this.ErrorClass != null)
                    hashCode = hashCode * 59 + this.ErrorClass.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.Extname != null)
                    hashCode = hashCode * 59 + this.Extname.GetHashCode();
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.Fps != null)
                    hashCode = hashCode * 59 + this.Fps.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.OriginalFilename != null)
                    hashCode = hashCode * 59 + this.OriginalFilename.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                if (this.SourceUrl != null)
                    hashCode = hashCode * 59 + this.SourceUrl.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.VideoBitrate != null)
                    hashCode = hashCode * 59 + this.VideoBitrate.GetHashCode();
                if (this.VideoCodec != null)
                    hashCode = hashCode * 59 + this.VideoCodec.GetHashCode();
                return hashCode;
            }
        }
    }

}
