/* 
 * Flip API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.1
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Flip.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Flip.Model
{
    /// <summary>
    /// FactoryBody
    /// </summary>
    [DataContract]
    public partial class FactoryBody :  IEquatable<FactoryBody>
    {
        /// <summary>
        /// Specify if your files are public or private (private files need authorization url to access). By default this is not set.
        /// </summary>
        /// <value>Specify if your files are public or private (private files need authorization url to access). By default this is not set.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AclEnum
        {
            
            /// <summary>
            /// Enum Public for value: public
            /// </summary>
            [EnumMember(Value = "public")]
            Public = 1,
            
            /// <summary>
            /// Enum Private for value: private
            /// </summary>
            [EnumMember(Value = "private")]
            Private = 2
        }

        /// <summary>
        /// Specify if your files are public or private (private files need authorization url to access). By default this is not set.
        /// </summary>
        /// <value>Specify if your files are public or private (private files need authorization url to access). By default this is not set.</value>
        [DataMember(Name="acl", EmitDefaultValue=false)]
        public AclEnum? Acl { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FactoryBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FactoryBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FactoryBody" /> class.
        /// </summary>
        /// <param name="AwsAccessKey">AWS access key..</param>
        /// <param name="AwsSecretKey">AWS secret key..</param>
        /// <param name="FactoryRegion">A region where the factory is located..</param>
        /// <param name="InputBucketFilePattern">A pattern that will be used to locate files in the input bucket. Valid wildcards might be used..</param>
        /// <param name="InputBucketName">A name of an input bucket..</param>
        /// <param name="InputBucketRecursive">InputBucketRecursive.</param>
        /// <param name="InputBucketSyncEveryNMin">Determines how often the input bucket is synchronised..</param>
        /// <param name="InputBucketWatch">Determines whether the Factory should be notified about new files added to the input bucket..</param>
        /// <param name="Name">Name of the Factory. (required).</param>
        /// <param name="OutputsPathFormat">Specify the directory where the output files should be stored. By default it is not set. More info [here](https://cloud.telestream.net/docs#path-format- --know-how)..</param>
        /// <param name="ProviderSpecificSettings">ProviderSpecificSettings.</param>
        /// <param name="Acl">Specify if your files are public or private (private files need authorization url to access). By default this is not set..</param>
        /// <param name="OutputBucketName">A bucket where processed files will be stored..</param>
        /// <param name="ServerSideEncryption">Specify if you want to use multi-factor server-side 256-bit AES-256 data encryption with Amazon S3-managed encryption keys (SSE-S3). Each object is encrypted using a unique key which as an additional safeguard is encrypted itself with a master key that S3 regularly rotates. By default this is not set..</param>
        /// <param name="StorageCredentialAttributes">StorageCredentialAttributes.</param>
        /// <param name="StorageProvider">Specifies which storage provider the factory should use. Available options: S3: 0, Google Cloud Storage: 1, FTP storage: 2, Google Cloud Interoperability Storage: 5, Flip storage: 7, FASP storage: 8, Azure Blob Storage: 9.</param>
        public FactoryBody(string AwsAccessKey = default(string), string AwsSecretKey = default(string), string FactoryRegion = default(string), string InputBucketFilePattern = default(string), string InputBucketName = default(string), bool? InputBucketRecursive = default(bool?), int? InputBucketSyncEveryNMin = default(int?), bool? InputBucketWatch = default(bool?), string Name = default(string), string OutputsPathFormat = default(string), Object ProviderSpecificSettings = default(Object), AclEnum? Acl = default(AclEnum?), string OutputBucketName = default(string), bool? ServerSideEncryption = default(bool?), FactoryBodyStorageCredentialAttributes StorageCredentialAttributes = default(FactoryBodyStorageCredentialAttributes), int? StorageProvider = default(int?))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for FactoryBody and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.AwsAccessKey = AwsAccessKey;
            this.AwsSecretKey = AwsSecretKey;
            this.FactoryRegion = FactoryRegion;
            this.InputBucketFilePattern = InputBucketFilePattern;
            this.InputBucketName = InputBucketName;
            this.InputBucketRecursive = InputBucketRecursive;
            this.InputBucketSyncEveryNMin = InputBucketSyncEveryNMin;
            this.InputBucketWatch = InputBucketWatch;
            this.OutputsPathFormat = OutputsPathFormat;
            this.ProviderSpecificSettings = ProviderSpecificSettings;
            this.Acl = Acl;
            this.OutputBucketName = OutputBucketName;
            this.ServerSideEncryption = ServerSideEncryption;
            this.StorageCredentialAttributes = StorageCredentialAttributes;
            this.StorageProvider = StorageProvider;
        }
        
        /// <summary>
        /// AWS access key.
        /// </summary>
        /// <value>AWS access key.</value>
        [DataMember(Name="aws_access_key", EmitDefaultValue=false)]
        public string AwsAccessKey { get; set; }

        /// <summary>
        /// AWS secret key.
        /// </summary>
        /// <value>AWS secret key.</value>
        [DataMember(Name="aws_secret_key", EmitDefaultValue=false)]
        public string AwsSecretKey { get; set; }

        /// <summary>
        /// A region where the factory is located.
        /// </summary>
        /// <value>A region where the factory is located.</value>
        [DataMember(Name="factory_region", EmitDefaultValue=false)]
        public string FactoryRegion { get; set; }

        /// <summary>
        /// A pattern that will be used to locate files in the input bucket. Valid wildcards might be used.
        /// </summary>
        /// <value>A pattern that will be used to locate files in the input bucket. Valid wildcards might be used.</value>
        [DataMember(Name="input_bucket_file_pattern", EmitDefaultValue=false)]
        public string InputBucketFilePattern { get; set; }

        /// <summary>
        /// A name of an input bucket.
        /// </summary>
        /// <value>A name of an input bucket.</value>
        [DataMember(Name="input_bucket_name", EmitDefaultValue=false)]
        public string InputBucketName { get; set; }

        /// <summary>
        /// Gets or Sets InputBucketRecursive
        /// </summary>
        [DataMember(Name="input_bucket_recursive", EmitDefaultValue=false)]
        public bool? InputBucketRecursive { get; set; }

        /// <summary>
        /// Determines how often the input bucket is synchronised.
        /// </summary>
        /// <value>Determines how often the input bucket is synchronised.</value>
        [DataMember(Name="input_bucket_sync_every_n_min", EmitDefaultValue=false)]
        public int? InputBucketSyncEveryNMin { get; set; }

        /// <summary>
        /// Determines whether the Factory should be notified about new files added to the input bucket.
        /// </summary>
        /// <value>Determines whether the Factory should be notified about new files added to the input bucket.</value>
        [DataMember(Name="input_bucket_watch", EmitDefaultValue=false)]
        public bool? InputBucketWatch { get; set; }

        /// <summary>
        /// Name of the Factory.
        /// </summary>
        /// <value>Name of the Factory.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Specify the directory where the output files should be stored. By default it is not set. More info [here](https://cloud.telestream.net/docs#path-format- --know-how).
        /// </summary>
        /// <value>Specify the directory where the output files should be stored. By default it is not set. More info [here](https://cloud.telestream.net/docs#path-format- --know-how).</value>
        [DataMember(Name="outputs_path_format", EmitDefaultValue=false)]
        public string OutputsPathFormat { get; set; }

        /// <summary>
        /// Gets or Sets ProviderSpecificSettings
        /// </summary>
        [DataMember(Name="provider_specific_settings", EmitDefaultValue=false)]
        public Object ProviderSpecificSettings { get; set; }


        /// <summary>
        /// A bucket where processed files will be stored.
        /// </summary>
        /// <value>A bucket where processed files will be stored.</value>
        [DataMember(Name="output_bucket_name", EmitDefaultValue=false)]
        public string OutputBucketName { get; set; }

        /// <summary>
        /// Specify if you want to use multi-factor server-side 256-bit AES-256 data encryption with Amazon S3-managed encryption keys (SSE-S3). Each object is encrypted using a unique key which as an additional safeguard is encrypted itself with a master key that S3 regularly rotates. By default this is not set.
        /// </summary>
        /// <value>Specify if you want to use multi-factor server-side 256-bit AES-256 data encryption with Amazon S3-managed encryption keys (SSE-S3). Each object is encrypted using a unique key which as an additional safeguard is encrypted itself with a master key that S3 regularly rotates. By default this is not set.</value>
        [DataMember(Name="server_side_encryption", EmitDefaultValue=false)]
        public bool? ServerSideEncryption { get; set; }

        /// <summary>
        /// Gets or Sets StorageCredentialAttributes
        /// </summary>
        [DataMember(Name="storage_credential_attributes", EmitDefaultValue=false)]
        public FactoryBodyStorageCredentialAttributes StorageCredentialAttributes { get; set; }

        /// <summary>
        /// Specifies which storage provider the factory should use. Available options: S3: 0, Google Cloud Storage: 1, FTP storage: 2, Google Cloud Interoperability Storage: 5, Flip storage: 7, FASP storage: 8, Azure Blob Storage: 9
        /// </summary>
        /// <value>Specifies which storage provider the factory should use. Available options: S3: 0, Google Cloud Storage: 1, FTP storage: 2, Google Cloud Interoperability Storage: 5, Flip storage: 7, FASP storage: 8, Azure Blob Storage: 9</value>
        [DataMember(Name="storage_provider", EmitDefaultValue=false)]
        public int? StorageProvider { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FactoryBody {\n");
            sb.Append("  AwsAccessKey: ").Append(AwsAccessKey).Append("\n");
            sb.Append("  AwsSecretKey: ").Append(AwsSecretKey).Append("\n");
            sb.Append("  FactoryRegion: ").Append(FactoryRegion).Append("\n");
            sb.Append("  InputBucketFilePattern: ").Append(InputBucketFilePattern).Append("\n");
            sb.Append("  InputBucketName: ").Append(InputBucketName).Append("\n");
            sb.Append("  InputBucketRecursive: ").Append(InputBucketRecursive).Append("\n");
            sb.Append("  InputBucketSyncEveryNMin: ").Append(InputBucketSyncEveryNMin).Append("\n");
            sb.Append("  InputBucketWatch: ").Append(InputBucketWatch).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OutputsPathFormat: ").Append(OutputsPathFormat).Append("\n");
            sb.Append("  ProviderSpecificSettings: ").Append(ProviderSpecificSettings).Append("\n");
            sb.Append("  Acl: ").Append(Acl).Append("\n");
            sb.Append("  OutputBucketName: ").Append(OutputBucketName).Append("\n");
            sb.Append("  ServerSideEncryption: ").Append(ServerSideEncryption).Append("\n");
            sb.Append("  StorageCredentialAttributes: ").Append(StorageCredentialAttributes).Append("\n");
            sb.Append("  StorageProvider: ").Append(StorageProvider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactoryBody);
        }

        /// <summary>
        /// Returns true if FactoryBody instances are equal
        /// </summary>
        /// <param name="input">Instance of FactoryBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactoryBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AwsAccessKey == input.AwsAccessKey ||
                    (this.AwsAccessKey != null &&
                    this.AwsAccessKey.Equals(input.AwsAccessKey))
                ) && 
                (
                    this.AwsSecretKey == input.AwsSecretKey ||
                    (this.AwsSecretKey != null &&
                    this.AwsSecretKey.Equals(input.AwsSecretKey))
                ) && 
                (
                    this.FactoryRegion == input.FactoryRegion ||
                    (this.FactoryRegion != null &&
                    this.FactoryRegion.Equals(input.FactoryRegion))
                ) && 
                (
                    this.InputBucketFilePattern == input.InputBucketFilePattern ||
                    (this.InputBucketFilePattern != null &&
                    this.InputBucketFilePattern.Equals(input.InputBucketFilePattern))
                ) && 
                (
                    this.InputBucketName == input.InputBucketName ||
                    (this.InputBucketName != null &&
                    this.InputBucketName.Equals(input.InputBucketName))
                ) && 
                (
                    this.InputBucketRecursive == input.InputBucketRecursive ||
                    (this.InputBucketRecursive != null &&
                    this.InputBucketRecursive.Equals(input.InputBucketRecursive))
                ) && 
                (
                    this.InputBucketSyncEveryNMin == input.InputBucketSyncEveryNMin ||
                    (this.InputBucketSyncEveryNMin != null &&
                    this.InputBucketSyncEveryNMin.Equals(input.InputBucketSyncEveryNMin))
                ) && 
                (
                    this.InputBucketWatch == input.InputBucketWatch ||
                    (this.InputBucketWatch != null &&
                    this.InputBucketWatch.Equals(input.InputBucketWatch))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OutputsPathFormat == input.OutputsPathFormat ||
                    (this.OutputsPathFormat != null &&
                    this.OutputsPathFormat.Equals(input.OutputsPathFormat))
                ) && 
                (
                    this.ProviderSpecificSettings == input.ProviderSpecificSettings ||
                    (this.ProviderSpecificSettings != null &&
                    this.ProviderSpecificSettings.Equals(input.ProviderSpecificSettings))
                ) && 
                (
                    this.Acl == input.Acl ||
                    (this.Acl != null &&
                    this.Acl.Equals(input.Acl))
                ) && 
                (
                    this.OutputBucketName == input.OutputBucketName ||
                    (this.OutputBucketName != null &&
                    this.OutputBucketName.Equals(input.OutputBucketName))
                ) && 
                (
                    this.ServerSideEncryption == input.ServerSideEncryption ||
                    (this.ServerSideEncryption != null &&
                    this.ServerSideEncryption.Equals(input.ServerSideEncryption))
                ) && 
                (
                    this.StorageCredentialAttributes == input.StorageCredentialAttributes ||
                    (this.StorageCredentialAttributes != null &&
                    this.StorageCredentialAttributes.Equals(input.StorageCredentialAttributes))
                ) && 
                (
                    this.StorageProvider == input.StorageProvider ||
                    (this.StorageProvider != null &&
                    this.StorageProvider.Equals(input.StorageProvider))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AwsAccessKey != null)
                    hashCode = hashCode * 59 + this.AwsAccessKey.GetHashCode();
                if (this.AwsSecretKey != null)
                    hashCode = hashCode * 59 + this.AwsSecretKey.GetHashCode();
                if (this.FactoryRegion != null)
                    hashCode = hashCode * 59 + this.FactoryRegion.GetHashCode();
                if (this.InputBucketFilePattern != null)
                    hashCode = hashCode * 59 + this.InputBucketFilePattern.GetHashCode();
                if (this.InputBucketName != null)
                    hashCode = hashCode * 59 + this.InputBucketName.GetHashCode();
                if (this.InputBucketRecursive != null)
                    hashCode = hashCode * 59 + this.InputBucketRecursive.GetHashCode();
                if (this.InputBucketSyncEveryNMin != null)
                    hashCode = hashCode * 59 + this.InputBucketSyncEveryNMin.GetHashCode();
                if (this.InputBucketWatch != null)
                    hashCode = hashCode * 59 + this.InputBucketWatch.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OutputsPathFormat != null)
                    hashCode = hashCode * 59 + this.OutputsPathFormat.GetHashCode();
                if (this.ProviderSpecificSettings != null)
                    hashCode = hashCode * 59 + this.ProviderSpecificSettings.GetHashCode();
                if (this.Acl != null)
                    hashCode = hashCode * 59 + this.Acl.GetHashCode();
                if (this.OutputBucketName != null)
                    hashCode = hashCode * 59 + this.OutputBucketName.GetHashCode();
                if (this.ServerSideEncryption != null)
                    hashCode = hashCode * 59 + this.ServerSideEncryption.GetHashCode();
                if (this.StorageCredentialAttributes != null)
                    hashCode = hashCode * 59 + this.StorageCredentialAttributes.GetHashCode();
                if (this.StorageProvider != null)
                    hashCode = hashCode * 59 + this.StorageProvider.GetHashCode();
                return hashCode;
            }
        }
    }

}
