/* 
 * Flip API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Flip.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Flip.Model
{
    /// <summary>
    /// FactorySyncBody
    /// </summary>
    [DataContract]
    public partial class FactorySyncBody :  IEquatable<FactorySyncBody>
    {
        /// <summary>
        /// Determines whether a Factory&#39;s data will be synchronised.
        /// </summary>
        /// <value>Determines whether a Factory&#39;s data will be synchronised.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SyncEnum
        {
            
            /// <summary>
            /// Enum True for "true"
            /// </summary>
            [EnumMember(Value = "true")]
            True = 1,
            
            /// <summary>
            /// Enum False for "false"
            /// </summary>
            [EnumMember(Value = "false")]
            False = 2
        }

        /// <summary>
        /// Determines whether a Factory&#39;s data will be synchronised.
        /// </summary>
        /// <value>Determines whether a Factory&#39;s data will be synchronised.</value>
        [DataMember(Name="sync", EmitDefaultValue=false)]
        public SyncEnum Sync { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FactorySyncBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FactorySyncBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FactorySyncBody" /> class.
        /// </summary>
        /// <param name="Sync">Determines whether a Factory&#39;s data will be synchronised. (required).</param>
        public FactorySyncBody(SyncEnum Sync = default(SyncEnum))
        {
            // to ensure "Sync" is required (not null)
            if (Sync == null)
            {
                throw new InvalidDataException("Sync is a required property for FactorySyncBody and cannot be null");
            }
            else
            {
                this.Sync = Sync;
            }
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FactorySyncBody {\n");
            sb.Append("  Sync: ").Append(Sync).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactorySyncBody);
        }

        /// <summary>
        /// Returns true if FactorySyncBody instances are equal
        /// </summary>
        /// <param name="input">Instance of FactorySyncBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactorySyncBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Sync == input.Sync ||
                    (this.Sync != null &&
                    this.Sync.Equals(input.Sync))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sync != null)
                    hashCode = hashCode * 59 + this.Sync.GetHashCode();
                return hashCode;
            }
        }
    }

}
