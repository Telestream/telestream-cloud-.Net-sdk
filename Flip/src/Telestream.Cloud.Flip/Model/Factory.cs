/* 
 * Flip API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.1
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Telestream.Cloud.Flip.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Flip.Model
{
    /// <summary>
    /// Factory
    /// </summary>
    [DataContract]
    public partial class Factory :  IEquatable<Factory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Factory" /> class.
        /// </summary>
        /// <param name="Id">A unique identifier of a Factory..</param>
        /// <param name="Name">Human-readable identifier of a Factory..</param>
        /// <param name="CreatedAt">A date and time when a Factory has been created..</param>
        /// <param name="UpdatedAt">A date and time when a Factory has been updated last time..</param>
        /// <param name="Url">An URL pointing to the output_bucket_name..</param>
        /// <param name="ServerSideEncryption">Specify if you want to use multi-factor server-side 256-bit AES-256 data encryption with Amazon S3-managed encryption keys (SSE-S3). Each object is encrypted using a unique key which as an additional safeguard is encrypted itself with a master key that S3 regularly rotates. By default this is not set..</param>
        /// <param name="OutputsPathFormat">Specify the directory where the output files should be stored. By default it is not set. More info [here](https://cloud.telestream.net/docs#path-format- --know-how)..</param>
        /// <param name="StoreId">Unique ID of a store defined in the stores service that will be used as a destination for all of the outputs created.</param>
        public Factory(string Id = default(string), string Name = default(string), string CreatedAt = default(string), string UpdatedAt = default(string), string Url = default(string), bool? ServerSideEncryption = default(bool?), string OutputsPathFormat = default(string), string StoreId = default(string))
        {
            this.Id = Id;
            this.Name = Name;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
            this.Url = Url;
            this.ServerSideEncryption = ServerSideEncryption;
            this.OutputsPathFormat = OutputsPathFormat;
            this.StoreId = StoreId;
        }
        
        /// <summary>
        /// A unique identifier of a Factory.
        /// </summary>
        /// <value>A unique identifier of a Factory.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Human-readable identifier of a Factory.
        /// </summary>
        /// <value>Human-readable identifier of a Factory.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A date and time when a Factory has been created.
        /// </summary>
        /// <value>A date and time when a Factory has been created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// A date and time when a Factory has been updated last time.
        /// </summary>
        /// <value>A date and time when a Factory has been updated last time.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// An URL pointing to the output_bucket_name.
        /// </summary>
        /// <value>An URL pointing to the output_bucket_name.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Specify if you want to use multi-factor server-side 256-bit AES-256 data encryption with Amazon S3-managed encryption keys (SSE-S3). Each object is encrypted using a unique key which as an additional safeguard is encrypted itself with a master key that S3 regularly rotates. By default this is not set.
        /// </summary>
        /// <value>Specify if you want to use multi-factor server-side 256-bit AES-256 data encryption with Amazon S3-managed encryption keys (SSE-S3). Each object is encrypted using a unique key which as an additional safeguard is encrypted itself with a master key that S3 regularly rotates. By default this is not set.</value>
        [DataMember(Name="server_side_encryption", EmitDefaultValue=false)]
        public bool? ServerSideEncryption { get; set; }

        /// <summary>
        /// Specify the directory where the output files should be stored. By default it is not set. More info [here](https://cloud.telestream.net/docs#path-format- --know-how).
        /// </summary>
        /// <value>Specify the directory where the output files should be stored. By default it is not set. More info [here](https://cloud.telestream.net/docs#path-format- --know-how).</value>
        [DataMember(Name="outputs_path_format", EmitDefaultValue=false)]
        public string OutputsPathFormat { get; set; }

        /// <summary>
        /// Unique ID of a store defined in the stores service that will be used as a destination for all of the outputs created
        /// </summary>
        /// <value>Unique ID of a store defined in the stores service that will be used as a destination for all of the outputs created</value>
        [DataMember(Name="store_id", EmitDefaultValue=false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Factory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ServerSideEncryption: ").Append(ServerSideEncryption).Append("\n");
            sb.Append("  OutputsPathFormat: ").Append(OutputsPathFormat).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Factory);
        }

        /// <summary>
        /// Returns true if Factory instances are equal
        /// </summary>
        /// <param name="input">Instance of Factory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Factory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.ServerSideEncryption == input.ServerSideEncryption ||
                    (this.ServerSideEncryption != null &&
                    this.ServerSideEncryption.Equals(input.ServerSideEncryption))
                ) && 
                (
                    this.OutputsPathFormat == input.OutputsPathFormat ||
                    (this.OutputsPathFormat != null &&
                    this.OutputsPathFormat.Equals(input.OutputsPathFormat))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.ServerSideEncryption != null)
                    hashCode = hashCode * 59 + this.ServerSideEncryption.GetHashCode();
                if (this.OutputsPathFormat != null)
                    hashCode = hashCode * 59 + this.OutputsPathFormat.GetHashCode();
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
