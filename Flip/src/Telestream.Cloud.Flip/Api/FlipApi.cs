/* 
 * Flip API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.1
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Telestream.Cloud.Flip.Client;
using Telestream.Cloud.Flip.Model;

namespace Telestream.Cloud.Flip.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFlipApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancels an Encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>CanceledResponse</returns>
        CanceledResponse CancelEncoding (string id, string factoryId);

        /// <summary>
        /// Cancels an Encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of CanceledResponse</returns>
        ApiResponse<CanceledResponse> CancelEncodingWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Copies a given Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="copyProfileBody"></param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Profile</returns>
        Profile CopyProfile (string id, string factoryId, CopyProfileBody copyProfileBody, bool? expand = null);

        /// <summary>
        /// Copies a given Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="copyProfileBody"></param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of Profile</returns>
        ApiResponse<Profile> CopyProfileWithHttpInfo (string id, string factoryId, CopyProfileBody copyProfileBody, bool? expand = null);
        /// <summary>
        /// Creates an Encoding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Encoding</returns>
        Encoding CreateEncoding (string factoryId, CreateEncodingBody createEncodingBody, bool? screenshots = null, bool? preciseStatus = null);

        /// <summary>
        /// Creates an Encoding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of Encoding</returns>
        ApiResponse<Encoding> CreateEncodingWithHttpInfo (string factoryId, CreateEncodingBody createEncodingBody, bool? screenshots = null, bool? preciseStatus = null);
        /// <summary>
        /// Creates a new factory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Factory</returns>
        Factory CreateFactory (FactoryBody createFactoryBody, bool? withStorageProvider = null);

        /// <summary>
        /// Creates a new factory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>ApiResponse of Factory</returns>
        ApiResponse<Factory> CreateFactoryWithHttpInfo (FactoryBody createFactoryBody, bool? withStorageProvider = null);
        /// <summary>
        /// Creates a Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set. (optional)</param>
        /// <returns>Profile</returns>
        Profile CreateProfile (string factoryId, ProfileBody createProfileBody, bool? excludeAdvancedServices = null, bool? expand = null);

        /// <summary>
        /// Creates a Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set. (optional)</param>
        /// <returns>ApiResponse of Profile</returns>
        ApiResponse<Profile> CreateProfileWithHttpInfo (string factoryId, ProfileBody createProfileBody, bool? excludeAdvancedServices = null, bool? expand = null);
        /// <summary>
        /// Creates a Video from a provided source_url.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createVideoBody"></param>
        /// <returns>Video</returns>
        Video CreateVideo (string factoryId, CreateVideoBody createVideoBody);

        /// <summary>
        /// Creates a Video from a provided source_url.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createVideoBody"></param>
        /// <returns>ApiResponse of Video</returns>
        ApiResponse<Video> CreateVideoWithHttpInfo (string factoryId, CreateVideoBody createVideoBody);
        /// <summary>
        /// Creates a Workorder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="profileId">Id of a Profile. (optional)</param>
        /// <param name="file">Input file. (optional)</param>
        /// <param name="sourceUrl">URL pointing to an input file. (optional)</param>
        /// <returns></returns>
        void CreateWorkorder (string factoryId, string profileId = null, System.IO.Stream file = null, string sourceUrl = null);

        /// <summary>
        /// Creates a Workorder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="profileId">Id of a Profile. (optional)</param>
        /// <param name="file">Input file. (optional)</param>
        /// <param name="sourceUrl">URL pointing to an input file. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateWorkorderWithHttpInfo (string factoryId, string profileId = null, System.IO.Stream file = null, string sourceUrl = null);
        /// <summary>
        /// Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>DeletedResponse</returns>
        DeletedResponse DeleteEncoding (string id, string factoryId);

        /// <summary>
        /// Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of DeletedResponse</returns>
        ApiResponse<DeletedResponse> DeleteEncodingWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Deletes a given Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>DeletedResponse</returns>
        DeletedResponse DeleteProfile (string id, string factoryId);

        /// <summary>
        /// Deletes a given Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of DeletedResponse</returns>
        ApiResponse<DeletedResponse> DeleteProfileWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Deletes a Video object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>DeletedResponse</returns>
        DeletedResponse DeleteVideo (string id, string factoryId);

        /// <summary>
        /// Deletes a Video object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of DeletedResponse</returns>
        ApiResponse<DeletedResponse> DeleteVideoWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Delete a video&#39;s source file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>DeletedResponse</returns>
        DeletedResponse DeleteVideoSource (string id, string factoryId);

        /// <summary>
        /// Delete a video&#39;s source file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of DeletedResponse</returns>
        ApiResponse<DeletedResponse> DeleteVideoSourceWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Returns an Encoding object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Encoding</returns>
        Encoding Encoding (string id, string factoryId, bool? screenshots = null, bool? preciseStatus = null);

        /// <summary>
        /// Returns an Encoding object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of Encoding</returns>
        ApiResponse<Encoding> EncodingWithHttpInfo (string id, string factoryId, bool? screenshots = null, bool? preciseStatus = null);
        /// <summary>
        /// Returns a list of Encoding objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoId">Id of a Video. When specified, the resulting list will contain videos that belong to the Video. (optional)</param>
        /// <param name="status">One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status. (optional)</param>
        /// <param name="profileId">Filter by profile_id. (optional)</param>
        /// <param name="profileName">Filter by profile_name. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>PaginatedEncodingsCollection</returns>
        PaginatedEncodingsCollection Encodings (string factoryId, string videoId = null, string status = null, string profileId = null, string profileName = null, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null);

        /// <summary>
        /// Returns a list of Encoding objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoId">Id of a Video. When specified, the resulting list will contain videos that belong to the Video. (optional)</param>
        /// <param name="status">One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status. (optional)</param>
        /// <param name="profileId">Filter by profile_id. (optional)</param>
        /// <param name="profileName">Filter by profile_name. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of PaginatedEncodingsCollection</returns>
        ApiResponse<PaginatedEncodingsCollection> EncodingsWithHttpInfo (string factoryId, string videoId = null, string status = null, string profileId = null, string profileName = null, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null);
        /// <summary>
        /// Returns a number of Encoding objects created using a given factory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>CountResponse</returns>
        CountResponse EncodingsCount (string factoryId);

        /// <summary>
        /// Returns a number of Encoding objects created using a given factory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of CountResponse</returns>
        ApiResponse<CountResponse> EncodingsCountWithHttpInfo (string factoryId);
        /// <summary>
        /// Returns a collection of Factory objects.
        /// </summary>
        /// <remarks>
        /// Returns a collection of Factory objects.
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>PaginatedFactoryCollection</returns>
        PaginatedFactoryCollection Factories (int? page = null, int? perPage = null, bool? withStorageProvider = null);

        /// <summary>
        /// Returns a collection of Factory objects.
        /// </summary>
        /// <remarks>
        /// Returns a collection of Factory objects.
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>ApiResponse of PaginatedFactoryCollection</returns>
        ApiResponse<PaginatedFactoryCollection> FactoriesWithHttpInfo (int? page = null, int? perPage = null, bool? withStorageProvider = null);
        /// <summary>
        /// Returns a Factory object.
        /// </summary>
        /// <remarks>
        /// Returns a Factory object.
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a factory</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Factory</returns>
        Factory Factory (string id, bool? withStorageProvider = null);

        /// <summary>
        /// Returns a Factory object.
        /// </summary>
        /// <remarks>
        /// Returns a Factory object.
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a factory</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>ApiResponse of Factory</returns>
        ApiResponse<Factory> FactoryWithHttpInfo (string id, bool? withStorageProvider = null);
        /// <summary>
        /// Returns a Factory&#39;s notification settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>CloudNotificationSettings</returns>
        CloudNotificationSettings Notifications (string factoryId);

        /// <summary>
        /// Returns a Factory&#39;s notification settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of CloudNotificationSettings</returns>
        ApiResponse<CloudNotificationSettings> NotificationsWithHttpInfo (string factoryId);
        /// <summary>
        /// Returns a Profile object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">A name or an id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Profile</returns>
        Profile Profile (string idOrName, string factoryId, bool? expand = null);

        /// <summary>
        /// Returns a Profile object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">A name or an id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of Profile</returns>
        ApiResponse<Profile> ProfileWithHttpInfo (string idOrName, string factoryId, bool? expand = null);
        /// <summary>
        /// Returns a list of Encodings that belong to a Profile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">Id or name of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>PaginatedEncodingsCollection</returns>
        PaginatedEncodingsCollection ProfileEncodings (string idOrName, string factoryId);

        /// <summary>
        /// Returns a list of Encodings that belong to a Profile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">Id or name of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of PaginatedEncodingsCollection</returns>
        ApiResponse<PaginatedEncodingsCollection> ProfileEncodingsWithHttpInfo (string idOrName, string factoryId);
        /// <summary>
        /// Returns a collection of Profile objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="excludeAdvancedServices">Determine whether exclude Advanced Services profiles from the results. By default this is not set. (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>PaginatedProfilesCollection</returns>
        PaginatedProfilesCollection Profiles (string factoryId, bool? excludeAdvancedServices = null, bool? expand = null, int? page = null, int? perPage = null);

        /// <summary>
        /// Returns a collection of Profile objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="excludeAdvancedServices">Determine whether exclude Advanced Services profiles from the results. By default this is not set. (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>ApiResponse of PaginatedProfilesCollection</returns>
        ApiResponse<PaginatedProfilesCollection> ProfilesWithHttpInfo (string factoryId, bool? excludeAdvancedServices = null, bool? expand = null, int? page = null, int? perPage = null);
        /// <summary>
        /// Returns a collection of Video objects queued for encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>PaginatedVideoCollection</returns>
        PaginatedVideoCollection QueuedVideos (string factoryId, int? page = null, int? perPage = null);

        /// <summary>
        /// Returns a collection of Video objects queued for encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>ApiResponse of PaginatedVideoCollection</returns>
        ApiResponse<PaginatedVideoCollection> QueuedVideosWithHttpInfo (string factoryId, int? page = null, int? perPage = null);
        /// <summary>
        /// Resubmits a video to encode.
        /// </summary>
        /// <remarks>
        /// Resubmits the video to encode. Please note that this option will work only for videos in &#x60;success&#x60; status.
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="resubmitVideoBody"></param>
        /// <returns></returns>
        void ResubmitVideo (string factoryId, ResubmitVideoBody resubmitVideoBody);

        /// <summary>
        /// Resubmits a video to encode.
        /// </summary>
        /// <remarks>
        /// Resubmits the video to encode. Please note that this option will work only for videos in &#x60;success&#x60; status.
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="resubmitVideoBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResubmitVideoWithHttpInfo (string factoryId, ResubmitVideoBody resubmitVideoBody);
        /// <summary>
        /// Retries a failed encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>RetriedResponse</returns>
        RetriedResponse RetryEncoding (string id, string factoryId);

        /// <summary>
        /// Retries a failed encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of RetriedResponse</returns>
        ApiResponse<RetriedResponse> RetryEncodingWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Returns a signed url pointing to an Encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>EncodingSignedUrl</returns>
        EncodingSignedUrl SignedEncodingUrl (string id, string factoryId);

        /// <summary>
        /// Returns a signed url pointing to an Encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of EncodingSignedUrl</returns>
        ApiResponse<EncodingSignedUrl> SignedEncodingUrlWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Returns a list of signed urls pointing to an Encoding&#39;s outputs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>EncodingSignedUrls</returns>
        EncodingSignedUrls SignedEncodingUrls (string id, string factoryId);

        /// <summary>
        /// Returns a list of signed urls pointing to an Encoding&#39;s outputs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of EncodingSignedUrls</returns>
        ApiResponse<EncodingSignedUrls> SignedEncodingUrlsWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Returns a signed url pointing to a Video.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>SignedVideoUrl</returns>
        SignedVideoUrl SignedVideoUrl (string id, string factoryId);

        /// <summary>
        /// Returns a signed url pointing to a Video.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of SignedVideoUrl</returns>
        ApiResponse<SignedVideoUrl> SignedVideoUrlWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Toggles synchronisation settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="factorySyncBody"></param>
        /// <returns>FactorySync</returns>
        FactorySync ToggleFactorySync (string id, FactorySyncBody factorySyncBody);

        /// <summary>
        /// Toggles synchronisation settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="factorySyncBody"></param>
        /// <returns>ApiResponse of FactorySync</returns>
        ApiResponse<FactorySync> ToggleFactorySyncWithHttpInfo (string id, FactorySyncBody factorySyncBody);
        /// <summary>
        /// Updates an Encoding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Encoding</returns>
        Encoding UpdateEncoding (string id, string factoryId, UpdateEncodingBody updateEncodingBody, bool? screenshots = null, bool? preciseStatus = null);

        /// <summary>
        /// Updates an Encoding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of Encoding</returns>
        ApiResponse<Encoding> UpdateEncodingWithHttpInfo (string id, string factoryId, UpdateEncodingBody updateEncodingBody, bool? screenshots = null, bool? preciseStatus = null);
        /// <summary>
        /// Updates a Factory&#39;s settings. Returns a Factory object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="updateFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Factory</returns>
        Factory UpdateFactory (string id, FactoryBody updateFactoryBody, bool? withStorageProvider = null);

        /// <summary>
        /// Updates a Factory&#39;s settings. Returns a Factory object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="updateFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>ApiResponse of Factory</returns>
        ApiResponse<Factory> UpdateFactoryWithHttpInfo (string id, FactoryBody updateFactoryBody, bool? withStorageProvider = null);
        /// <summary>
        /// Updates a Factory&#39;s notification settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="cloudNotificationSettingsBody"></param>
        /// <returns>CloudNotificationSettings</returns>
        CloudNotificationSettings UpdateNotifications (string factoryId, CloudNotificationSettings cloudNotificationSettingsBody);

        /// <summary>
        /// Updates a Factory&#39;s notification settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="cloudNotificationSettingsBody"></param>
        /// <returns>ApiResponse of CloudNotificationSettings</returns>
        ApiResponse<CloudNotificationSettings> UpdateNotificationsWithHttpInfo (string factoryId, CloudNotificationSettings cloudNotificationSettingsBody);
        /// <summary>
        /// Updates a given Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Profile</returns>
        Profile UpdateProfile (string id, string factoryId, ProfileBody updateProfileBody, bool? excludeAdvancedServices = null, bool? expand = null);

        /// <summary>
        /// Updates a given Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of Profile</returns>
        ApiResponse<Profile> UpdateProfileWithHttpInfo (string id, string factoryId, ProfileBody updateProfileBody, bool? excludeAdvancedServices = null, bool? expand = null);
        /// <summary>
        /// Creates an upload session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>UploadSession</returns>
        UploadSession UploadVideo (string factoryId, VideoUploadBody videoUploadBody);

        /// <summary>
        /// Creates an upload session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>ApiResponse of UploadSession</returns>
        ApiResponse<UploadSession> UploadVideoWithHttpInfo (string factoryId, VideoUploadBody videoUploadBody);
        /// <summary>
        /// Returns a Video object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Video</returns>
        Video Video (string id, string factoryId);

        /// <summary>
        /// Returns a Video object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of Video</returns>
        ApiResponse<Video> VideoWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Returns a list of Encodings that belong to a Video.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>PaginatedEncodingsCollection</returns>
        PaginatedEncodingsCollection VideoEncodings (string id, string factoryId, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null);

        /// <summary>
        /// Returns a list of Encodings that belong to a Video.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of PaginatedEncodingsCollection</returns>
        ApiResponse<PaginatedEncodingsCollection> VideoEncodingsWithHttpInfo (string id, string factoryId, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null);
        /// <summary>
        /// Returns a Video&#39;s metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>VideoMetadata</returns>
        VideoMetadata VideoMetadata (string id, string factoryId);

        /// <summary>
        /// Returns a Video&#39;s metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of VideoMetadata</returns>
        ApiResponse<VideoMetadata> VideoMetadataWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Returns a collection of Video objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>PaginatedVideoCollection</returns>
        PaginatedVideoCollection Videos (string factoryId, int? page = null, int? perPage = null);

        /// <summary>
        /// Returns a collection of Video objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>ApiResponse of PaginatedVideoCollection</returns>
        ApiResponse<PaginatedVideoCollection> VideosWithHttpInfo (string factoryId, int? page = null, int? perPage = null);
        /// <summary>
        /// Returns a collection of Workflows that belong to a Factory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>PaginatedWorkflowsCollection</returns>
        PaginatedWorkflowsCollection Workflows (string factoryId, int? page = null, int? perPage = null);

        /// <summary>
        /// Returns a collection of Workflows that belong to a Factory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>ApiResponse of PaginatedWorkflowsCollection</returns>
        ApiResponse<PaginatedWorkflowsCollection> WorkflowsWithHttpInfo (string factoryId, int? page = null, int? perPage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancels an Encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of CanceledResponse</returns>
        System.Threading.Tasks.Task<CanceledResponse> CancelEncodingAsync (string id, string factoryId);

        /// <summary>
        /// Cancels an Encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (CanceledResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CanceledResponse>> CancelEncodingAsyncWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Copies a given Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="copyProfileBody"></param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Task of Profile</returns>
        System.Threading.Tasks.Task<Profile> CopyProfileAsync (string id, string factoryId, CopyProfileBody copyProfileBody, bool? expand = null);

        /// <summary>
        /// Copies a given Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="copyProfileBody"></param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (Profile)</returns>
        System.Threading.Tasks.Task<ApiResponse<Profile>> CopyProfileAsyncWithHttpInfo (string id, string factoryId, CopyProfileBody copyProfileBody, bool? expand = null);
        /// <summary>
        /// Creates an Encoding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of Encoding</returns>
        System.Threading.Tasks.Task<Encoding> CreateEncodingAsync (string factoryId, CreateEncodingBody createEncodingBody, bool? screenshots = null, bool? preciseStatus = null);

        /// <summary>
        /// Creates an Encoding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (Encoding)</returns>
        System.Threading.Tasks.Task<ApiResponse<Encoding>> CreateEncodingAsyncWithHttpInfo (string factoryId, CreateEncodingBody createEncodingBody, bool? screenshots = null, bool? preciseStatus = null);
        /// <summary>
        /// Creates a new factory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of Factory</returns>
        System.Threading.Tasks.Task<Factory> CreateFactoryAsync (FactoryBody createFactoryBody, bool? withStorageProvider = null);

        /// <summary>
        /// Creates a new factory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of ApiResponse (Factory)</returns>
        System.Threading.Tasks.Task<ApiResponse<Factory>> CreateFactoryAsyncWithHttpInfo (FactoryBody createFactoryBody, bool? withStorageProvider = null);
        /// <summary>
        /// Creates a Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set. (optional)</param>
        /// <returns>Task of Profile</returns>
        System.Threading.Tasks.Task<Profile> CreateProfileAsync (string factoryId, ProfileBody createProfileBody, bool? excludeAdvancedServices = null, bool? expand = null);

        /// <summary>
        /// Creates a Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set. (optional)</param>
        /// <returns>Task of ApiResponse (Profile)</returns>
        System.Threading.Tasks.Task<ApiResponse<Profile>> CreateProfileAsyncWithHttpInfo (string factoryId, ProfileBody createProfileBody, bool? excludeAdvancedServices = null, bool? expand = null);
        /// <summary>
        /// Creates a Video from a provided source_url.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createVideoBody"></param>
        /// <returns>Task of Video</returns>
        System.Threading.Tasks.Task<Video> CreateVideoAsync (string factoryId, CreateVideoBody createVideoBody);

        /// <summary>
        /// Creates a Video from a provided source_url.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createVideoBody"></param>
        /// <returns>Task of ApiResponse (Video)</returns>
        System.Threading.Tasks.Task<ApiResponse<Video>> CreateVideoAsyncWithHttpInfo (string factoryId, CreateVideoBody createVideoBody);
        /// <summary>
        /// Creates a Workorder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="profileId">Id of a Profile. (optional)</param>
        /// <param name="file">Input file. (optional)</param>
        /// <param name="sourceUrl">URL pointing to an input file. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateWorkorderAsync (string factoryId, string profileId = null, System.IO.Stream file = null, string sourceUrl = null);

        /// <summary>
        /// Creates a Workorder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="profileId">Id of a Profile. (optional)</param>
        /// <param name="file">Input file. (optional)</param>
        /// <param name="sourceUrl">URL pointing to an input file. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateWorkorderAsyncWithHttpInfo (string factoryId, string profileId = null, System.IO.Stream file = null, string sourceUrl = null);
        /// <summary>
        /// Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of DeletedResponse</returns>
        System.Threading.Tasks.Task<DeletedResponse> DeleteEncodingAsync (string id, string factoryId);

        /// <summary>
        /// Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (DeletedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedResponse>> DeleteEncodingAsyncWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Deletes a given Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of DeletedResponse</returns>
        System.Threading.Tasks.Task<DeletedResponse> DeleteProfileAsync (string id, string factoryId);

        /// <summary>
        /// Deletes a given Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (DeletedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedResponse>> DeleteProfileAsyncWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Deletes a Video object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of DeletedResponse</returns>
        System.Threading.Tasks.Task<DeletedResponse> DeleteVideoAsync (string id, string factoryId);

        /// <summary>
        /// Deletes a Video object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (DeletedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedResponse>> DeleteVideoAsyncWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Delete a video&#39;s source file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of DeletedResponse</returns>
        System.Threading.Tasks.Task<DeletedResponse> DeleteVideoSourceAsync (string id, string factoryId);

        /// <summary>
        /// Delete a video&#39;s source file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (DeletedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedResponse>> DeleteVideoSourceAsyncWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Returns an Encoding object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of Encoding</returns>
        System.Threading.Tasks.Task<Encoding> EncodingAsync (string id, string factoryId, bool? screenshots = null, bool? preciseStatus = null);

        /// <summary>
        /// Returns an Encoding object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (Encoding)</returns>
        System.Threading.Tasks.Task<ApiResponse<Encoding>> EncodingAsyncWithHttpInfo (string id, string factoryId, bool? screenshots = null, bool? preciseStatus = null);
        /// <summary>
        /// Returns a list of Encoding objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoId">Id of a Video. When specified, the resulting list will contain videos that belong to the Video. (optional)</param>
        /// <param name="status">One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status. (optional)</param>
        /// <param name="profileId">Filter by profile_id. (optional)</param>
        /// <param name="profileName">Filter by profile_name. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of PaginatedEncodingsCollection</returns>
        System.Threading.Tasks.Task<PaginatedEncodingsCollection> EncodingsAsync (string factoryId, string videoId = null, string status = null, string profileId = null, string profileName = null, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null);

        /// <summary>
        /// Returns a list of Encoding objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoId">Id of a Video. When specified, the resulting list will contain videos that belong to the Video. (optional)</param>
        /// <param name="status">One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status. (optional)</param>
        /// <param name="profileId">Filter by profile_id. (optional)</param>
        /// <param name="profileName">Filter by profile_name. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedEncodingsCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedEncodingsCollection>> EncodingsAsyncWithHttpInfo (string factoryId, string videoId = null, string status = null, string profileId = null, string profileName = null, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null);
        /// <summary>
        /// Returns a number of Encoding objects created using a given factory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of CountResponse</returns>
        System.Threading.Tasks.Task<CountResponse> EncodingsCountAsync (string factoryId);

        /// <summary>
        /// Returns a number of Encoding objects created using a given factory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (CountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResponse>> EncodingsCountAsyncWithHttpInfo (string factoryId);
        /// <summary>
        /// Returns a collection of Factory objects.
        /// </summary>
        /// <remarks>
        /// Returns a collection of Factory objects.
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of PaginatedFactoryCollection</returns>
        System.Threading.Tasks.Task<PaginatedFactoryCollection> FactoriesAsync (int? page = null, int? perPage = null, bool? withStorageProvider = null);

        /// <summary>
        /// Returns a collection of Factory objects.
        /// </summary>
        /// <remarks>
        /// Returns a collection of Factory objects.
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedFactoryCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedFactoryCollection>> FactoriesAsyncWithHttpInfo (int? page = null, int? perPage = null, bool? withStorageProvider = null);
        /// <summary>
        /// Returns a Factory object.
        /// </summary>
        /// <remarks>
        /// Returns a Factory object.
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a factory</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of Factory</returns>
        System.Threading.Tasks.Task<Factory> FactoryAsync (string id, bool? withStorageProvider = null);

        /// <summary>
        /// Returns a Factory object.
        /// </summary>
        /// <remarks>
        /// Returns a Factory object.
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a factory</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of ApiResponse (Factory)</returns>
        System.Threading.Tasks.Task<ApiResponse<Factory>> FactoryAsyncWithHttpInfo (string id, bool? withStorageProvider = null);
        /// <summary>
        /// Returns a Factory&#39;s notification settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of CloudNotificationSettings</returns>
        System.Threading.Tasks.Task<CloudNotificationSettings> NotificationsAsync (string factoryId);

        /// <summary>
        /// Returns a Factory&#39;s notification settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (CloudNotificationSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudNotificationSettings>> NotificationsAsyncWithHttpInfo (string factoryId);
        /// <summary>
        /// Returns a Profile object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">A name or an id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Task of Profile</returns>
        System.Threading.Tasks.Task<Profile> ProfileAsync (string idOrName, string factoryId, bool? expand = null);

        /// <summary>
        /// Returns a Profile object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">A name or an id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (Profile)</returns>
        System.Threading.Tasks.Task<ApiResponse<Profile>> ProfileAsyncWithHttpInfo (string idOrName, string factoryId, bool? expand = null);
        /// <summary>
        /// Returns a list of Encodings that belong to a Profile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">Id or name of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of PaginatedEncodingsCollection</returns>
        System.Threading.Tasks.Task<PaginatedEncodingsCollection> ProfileEncodingsAsync (string idOrName, string factoryId);

        /// <summary>
        /// Returns a list of Encodings that belong to a Profile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">Id or name of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (PaginatedEncodingsCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedEncodingsCollection>> ProfileEncodingsAsyncWithHttpInfo (string idOrName, string factoryId);
        /// <summary>
        /// Returns a collection of Profile objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="excludeAdvancedServices">Determine whether exclude Advanced Services profiles from the results. By default this is not set. (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of PaginatedProfilesCollection</returns>
        System.Threading.Tasks.Task<PaginatedProfilesCollection> ProfilesAsync (string factoryId, bool? excludeAdvancedServices = null, bool? expand = null, int? page = null, int? perPage = null);

        /// <summary>
        /// Returns a collection of Profile objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="excludeAdvancedServices">Determine whether exclude Advanced Services profiles from the results. By default this is not set. (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedProfilesCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedProfilesCollection>> ProfilesAsyncWithHttpInfo (string factoryId, bool? excludeAdvancedServices = null, bool? expand = null, int? page = null, int? perPage = null);
        /// <summary>
        /// Returns a collection of Video objects queued for encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of PaginatedVideoCollection</returns>
        System.Threading.Tasks.Task<PaginatedVideoCollection> QueuedVideosAsync (string factoryId, int? page = null, int? perPage = null);

        /// <summary>
        /// Returns a collection of Video objects queued for encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedVideoCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedVideoCollection>> QueuedVideosAsyncWithHttpInfo (string factoryId, int? page = null, int? perPage = null);
        /// <summary>
        /// Resubmits a video to encode.
        /// </summary>
        /// <remarks>
        /// Resubmits the video to encode. Please note that this option will work only for videos in &#x60;success&#x60; status.
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="resubmitVideoBody"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResubmitVideoAsync (string factoryId, ResubmitVideoBody resubmitVideoBody);

        /// <summary>
        /// Resubmits a video to encode.
        /// </summary>
        /// <remarks>
        /// Resubmits the video to encode. Please note that this option will work only for videos in &#x60;success&#x60; status.
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="resubmitVideoBody"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResubmitVideoAsyncWithHttpInfo (string factoryId, ResubmitVideoBody resubmitVideoBody);
        /// <summary>
        /// Retries a failed encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of RetriedResponse</returns>
        System.Threading.Tasks.Task<RetriedResponse> RetryEncodingAsync (string id, string factoryId);

        /// <summary>
        /// Retries a failed encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (RetriedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetriedResponse>> RetryEncodingAsyncWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Returns a signed url pointing to an Encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of EncodingSignedUrl</returns>
        System.Threading.Tasks.Task<EncodingSignedUrl> SignedEncodingUrlAsync (string id, string factoryId);

        /// <summary>
        /// Returns a signed url pointing to an Encoding.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (EncodingSignedUrl)</returns>
        System.Threading.Tasks.Task<ApiResponse<EncodingSignedUrl>> SignedEncodingUrlAsyncWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Returns a list of signed urls pointing to an Encoding&#39;s outputs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of EncodingSignedUrls</returns>
        System.Threading.Tasks.Task<EncodingSignedUrls> SignedEncodingUrlsAsync (string id, string factoryId);

        /// <summary>
        /// Returns a list of signed urls pointing to an Encoding&#39;s outputs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (EncodingSignedUrls)</returns>
        System.Threading.Tasks.Task<ApiResponse<EncodingSignedUrls>> SignedEncodingUrlsAsyncWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Returns a signed url pointing to a Video.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of SignedVideoUrl</returns>
        System.Threading.Tasks.Task<SignedVideoUrl> SignedVideoUrlAsync (string id, string factoryId);

        /// <summary>
        /// Returns a signed url pointing to a Video.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (SignedVideoUrl)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignedVideoUrl>> SignedVideoUrlAsyncWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Toggles synchronisation settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="factorySyncBody"></param>
        /// <returns>Task of FactorySync</returns>
        System.Threading.Tasks.Task<FactorySync> ToggleFactorySyncAsync (string id, FactorySyncBody factorySyncBody);

        /// <summary>
        /// Toggles synchronisation settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="factorySyncBody"></param>
        /// <returns>Task of ApiResponse (FactorySync)</returns>
        System.Threading.Tasks.Task<ApiResponse<FactorySync>> ToggleFactorySyncAsyncWithHttpInfo (string id, FactorySyncBody factorySyncBody);
        /// <summary>
        /// Updates an Encoding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of Encoding</returns>
        System.Threading.Tasks.Task<Encoding> UpdateEncodingAsync (string id, string factoryId, UpdateEncodingBody updateEncodingBody, bool? screenshots = null, bool? preciseStatus = null);

        /// <summary>
        /// Updates an Encoding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (Encoding)</returns>
        System.Threading.Tasks.Task<ApiResponse<Encoding>> UpdateEncodingAsyncWithHttpInfo (string id, string factoryId, UpdateEncodingBody updateEncodingBody, bool? screenshots = null, bool? preciseStatus = null);
        /// <summary>
        /// Updates a Factory&#39;s settings. Returns a Factory object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="updateFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of Factory</returns>
        System.Threading.Tasks.Task<Factory> UpdateFactoryAsync (string id, FactoryBody updateFactoryBody, bool? withStorageProvider = null);

        /// <summary>
        /// Updates a Factory&#39;s settings. Returns a Factory object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="updateFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of ApiResponse (Factory)</returns>
        System.Threading.Tasks.Task<ApiResponse<Factory>> UpdateFactoryAsyncWithHttpInfo (string id, FactoryBody updateFactoryBody, bool? withStorageProvider = null);
        /// <summary>
        /// Updates a Factory&#39;s notification settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="cloudNotificationSettingsBody"></param>
        /// <returns>Task of CloudNotificationSettings</returns>
        System.Threading.Tasks.Task<CloudNotificationSettings> UpdateNotificationsAsync (string factoryId, CloudNotificationSettings cloudNotificationSettingsBody);

        /// <summary>
        /// Updates a Factory&#39;s notification settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="cloudNotificationSettingsBody"></param>
        /// <returns>Task of ApiResponse (CloudNotificationSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudNotificationSettings>> UpdateNotificationsAsyncWithHttpInfo (string factoryId, CloudNotificationSettings cloudNotificationSettingsBody);
        /// <summary>
        /// Updates a given Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Task of Profile</returns>
        System.Threading.Tasks.Task<Profile> UpdateProfileAsync (string id, string factoryId, ProfileBody updateProfileBody, bool? excludeAdvancedServices = null, bool? expand = null);

        /// <summary>
        /// Updates a given Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (Profile)</returns>
        System.Threading.Tasks.Task<ApiResponse<Profile>> UpdateProfileAsyncWithHttpInfo (string id, string factoryId, ProfileBody updateProfileBody, bool? excludeAdvancedServices = null, bool? expand = null);
        /// <summary>
        /// Creates an upload session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>Task of UploadSession</returns>
        System.Threading.Tasks.Task<UploadSession> UploadVideoAsync (string factoryId, VideoUploadBody videoUploadBody);

        /// <summary>
        /// Creates an upload session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>Task of ApiResponse (UploadSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadSession>> UploadVideoAsyncWithHttpInfo (string factoryId, VideoUploadBody videoUploadBody);
        /// <summary>
        /// Returns a Video object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of Video</returns>
        System.Threading.Tasks.Task<Video> VideoAsync (string id, string factoryId);

        /// <summary>
        /// Returns a Video object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        System.Threading.Tasks.Task<ApiResponse<Video>> VideoAsyncWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Returns a list of Encodings that belong to a Video.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of PaginatedEncodingsCollection</returns>
        System.Threading.Tasks.Task<PaginatedEncodingsCollection> VideoEncodingsAsync (string id, string factoryId, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null);

        /// <summary>
        /// Returns a list of Encodings that belong to a Video.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedEncodingsCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedEncodingsCollection>> VideoEncodingsAsyncWithHttpInfo (string id, string factoryId, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null);
        /// <summary>
        /// Returns a Video&#39;s metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of VideoMetadata</returns>
        System.Threading.Tasks.Task<VideoMetadata> VideoMetadataAsync (string id, string factoryId);

        /// <summary>
        /// Returns a Video&#39;s metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (VideoMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoMetadata>> VideoMetadataAsyncWithHttpInfo (string id, string factoryId);
        /// <summary>
        /// Returns a collection of Video objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of PaginatedVideoCollection</returns>
        System.Threading.Tasks.Task<PaginatedVideoCollection> VideosAsync (string factoryId, int? page = null, int? perPage = null);

        /// <summary>
        /// Returns a collection of Video objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedVideoCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedVideoCollection>> VideosAsyncWithHttpInfo (string factoryId, int? page = null, int? perPage = null);
        /// <summary>
        /// Returns a collection of Workflows that belong to a Factory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of PaginatedWorkflowsCollection</returns>
        System.Threading.Tasks.Task<PaginatedWorkflowsCollection> WorkflowsAsync (string factoryId, int? page = null, int? perPage = null);

        /// <summary>
        /// Returns a collection of Workflows that belong to a Factory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedWorkflowsCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedWorkflowsCollection>> WorkflowsAsyncWithHttpInfo (string factoryId, int? page = null, int? perPage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FlipApi : IFlipApi
    {
        private Telestream.Cloud.Flip.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FlipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FlipApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Telestream.Cloud.Flip.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlipApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FlipApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Telestream.Cloud.Flip.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Telestream.Cloud.Flip.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancels an Encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>CanceledResponse</returns>
        public CanceledResponse CancelEncoding (string id, string factoryId)
        {
             ApiResponse<CanceledResponse> localVarResponse = CancelEncodingWithHttpInfo(id, factoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels an Encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of CanceledResponse</returns>
        public ApiResponse< CanceledResponse > CancelEncodingWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->CancelEncoding");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->CancelEncoding");

            var localVarPath = "./encodings/{id}/cancel.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelEncoding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CanceledResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CanceledResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CanceledResponse)));
        }

        /// <summary>
        /// Cancels an Encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of CanceledResponse</returns>
        public async System.Threading.Tasks.Task<CanceledResponse> CancelEncodingAsync (string id, string factoryId)
        {
             ApiResponse<CanceledResponse> localVarResponse = await CancelEncodingAsyncWithHttpInfo(id, factoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancels an Encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (CanceledResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CanceledResponse>> CancelEncodingAsyncWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->CancelEncoding");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->CancelEncoding");

            var localVarPath = "./encodings/{id}/cancel.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelEncoding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CanceledResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CanceledResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CanceledResponse)));
        }

        /// <summary>
        /// Copies a given Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="copyProfileBody"></param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Profile</returns>
        public Profile CopyProfile (string id, string factoryId, CopyProfileBody copyProfileBody, bool? expand = null)
        {
             ApiResponse<Profile> localVarResponse = CopyProfileWithHttpInfo(id, factoryId, copyProfileBody, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copies a given Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="copyProfileBody"></param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of Profile</returns>
        public ApiResponse< Profile > CopyProfileWithHttpInfo (string id, string factoryId, CopyProfileBody copyProfileBody, bool? expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->CopyProfile");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->CopyProfile");
            // verify the required parameter 'copyProfileBody' is set
            if (copyProfileBody == null)
                throw new ApiException(400, "Missing required parameter 'copyProfileBody' when calling FlipApi->CopyProfile");

            var localVarPath = "./profiles/{id}/copy.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (copyProfileBody != null && copyProfileBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(copyProfileBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = copyProfileBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Profile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Profile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Profile)));
        }

        /// <summary>
        /// Copies a given Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="copyProfileBody"></param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Task of Profile</returns>
        public async System.Threading.Tasks.Task<Profile> CopyProfileAsync (string id, string factoryId, CopyProfileBody copyProfileBody, bool? expand = null)
        {
             ApiResponse<Profile> localVarResponse = await CopyProfileAsyncWithHttpInfo(id, factoryId, copyProfileBody, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copies a given Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="copyProfileBody"></param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (Profile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Profile>> CopyProfileAsyncWithHttpInfo (string id, string factoryId, CopyProfileBody copyProfileBody, bool? expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->CopyProfile");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->CopyProfile");
            // verify the required parameter 'copyProfileBody' is set
            if (copyProfileBody == null)
                throw new ApiException(400, "Missing required parameter 'copyProfileBody' when calling FlipApi->CopyProfile");

            var localVarPath = "./profiles/{id}/copy.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (copyProfileBody != null && copyProfileBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(copyProfileBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = copyProfileBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Profile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Profile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Profile)));
        }

        /// <summary>
        /// Creates an Encoding 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Encoding</returns>
        public Encoding CreateEncoding (string factoryId, CreateEncodingBody createEncodingBody, bool? screenshots = null, bool? preciseStatus = null)
        {
             ApiResponse<Encoding> localVarResponse = CreateEncodingWithHttpInfo(factoryId, createEncodingBody, screenshots, preciseStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an Encoding 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of Encoding</returns>
        public ApiResponse< Encoding > CreateEncodingWithHttpInfo (string factoryId, CreateEncodingBody createEncodingBody, bool? screenshots = null, bool? preciseStatus = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->CreateEncoding");
            // verify the required parameter 'createEncodingBody' is set
            if (createEncodingBody == null)
                throw new ApiException(400, "Missing required parameter 'createEncodingBody' when calling FlipApi->CreateEncoding");

            var localVarPath = "./encodings.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (screenshots != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "screenshots", screenshots)); // query parameter
            if (preciseStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "precise_status", preciseStatus)); // query parameter
            if (createEncodingBody != null && createEncodingBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createEncodingBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createEncodingBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEncoding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Encoding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Encoding) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Encoding)));
        }

        /// <summary>
        /// Creates an Encoding 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of Encoding</returns>
        public async System.Threading.Tasks.Task<Encoding> CreateEncodingAsync (string factoryId, CreateEncodingBody createEncodingBody, bool? screenshots = null, bool? preciseStatus = null)
        {
             ApiResponse<Encoding> localVarResponse = await CreateEncodingAsyncWithHttpInfo(factoryId, createEncodingBody, screenshots, preciseStatus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an Encoding 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (Encoding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Encoding>> CreateEncodingAsyncWithHttpInfo (string factoryId, CreateEncodingBody createEncodingBody, bool? screenshots = null, bool? preciseStatus = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->CreateEncoding");
            // verify the required parameter 'createEncodingBody' is set
            if (createEncodingBody == null)
                throw new ApiException(400, "Missing required parameter 'createEncodingBody' when calling FlipApi->CreateEncoding");

            var localVarPath = "./encodings.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (screenshots != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "screenshots", screenshots)); // query parameter
            if (preciseStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "precise_status", preciseStatus)); // query parameter
            if (createEncodingBody != null && createEncodingBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createEncodingBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createEncodingBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEncoding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Encoding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Encoding) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Encoding)));
        }

        /// <summary>
        /// Creates a new factory 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Factory</returns>
        public Factory CreateFactory (FactoryBody createFactoryBody, bool? withStorageProvider = null)
        {
             ApiResponse<Factory> localVarResponse = CreateFactoryWithHttpInfo(createFactoryBody, withStorageProvider);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new factory 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>ApiResponse of Factory</returns>
        public ApiResponse< Factory > CreateFactoryWithHttpInfo (FactoryBody createFactoryBody, bool? withStorageProvider = null)
        {
            // verify the required parameter 'createFactoryBody' is set
            if (createFactoryBody == null)
                throw new ApiException(400, "Missing required parameter 'createFactoryBody' when calling FlipApi->CreateFactory");

            var localVarPath = "./factories.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (withStorageProvider != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "with_storage_provider", withStorageProvider)); // query parameter
            if (createFactoryBody != null && createFactoryBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createFactoryBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createFactoryBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFactory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Factory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Factory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Factory)));
        }

        /// <summary>
        /// Creates a new factory 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of Factory</returns>
        public async System.Threading.Tasks.Task<Factory> CreateFactoryAsync (FactoryBody createFactoryBody, bool? withStorageProvider = null)
        {
             ApiResponse<Factory> localVarResponse = await CreateFactoryAsyncWithHttpInfo(createFactoryBody, withStorageProvider);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new factory 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of ApiResponse (Factory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Factory>> CreateFactoryAsyncWithHttpInfo (FactoryBody createFactoryBody, bool? withStorageProvider = null)
        {
            // verify the required parameter 'createFactoryBody' is set
            if (createFactoryBody == null)
                throw new ApiException(400, "Missing required parameter 'createFactoryBody' when calling FlipApi->CreateFactory");

            var localVarPath = "./factories.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (withStorageProvider != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "with_storage_provider", withStorageProvider)); // query parameter
            if (createFactoryBody != null && createFactoryBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createFactoryBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createFactoryBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFactory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Factory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Factory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Factory)));
        }

        /// <summary>
        /// Creates a Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set. (optional)</param>
        /// <returns>Profile</returns>
        public Profile CreateProfile (string factoryId, ProfileBody createProfileBody, bool? excludeAdvancedServices = null, bool? expand = null)
        {
             ApiResponse<Profile> localVarResponse = CreateProfileWithHttpInfo(factoryId, createProfileBody, excludeAdvancedServices, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set. (optional)</param>
        /// <returns>ApiResponse of Profile</returns>
        public ApiResponse< Profile > CreateProfileWithHttpInfo (string factoryId, ProfileBody createProfileBody, bool? excludeAdvancedServices = null, bool? expand = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->CreateProfile");
            // verify the required parameter 'createProfileBody' is set
            if (createProfileBody == null)
                throw new ApiException(400, "Missing required parameter 'createProfileBody' when calling FlipApi->CreateProfile");

            var localVarPath = "./profiles.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (excludeAdvancedServices != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_advanced_services", excludeAdvancedServices)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (createProfileBody != null && createProfileBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createProfileBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createProfileBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Profile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Profile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Profile)));
        }

        /// <summary>
        /// Creates a Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set. (optional)</param>
        /// <returns>Task of Profile</returns>
        public async System.Threading.Tasks.Task<Profile> CreateProfileAsync (string factoryId, ProfileBody createProfileBody, bool? excludeAdvancedServices = null, bool? expand = null)
        {
             ApiResponse<Profile> localVarResponse = await CreateProfileAsyncWithHttpInfo(factoryId, createProfileBody, excludeAdvancedServices, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set. (optional)</param>
        /// <returns>Task of ApiResponse (Profile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Profile>> CreateProfileAsyncWithHttpInfo (string factoryId, ProfileBody createProfileBody, bool? excludeAdvancedServices = null, bool? expand = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->CreateProfile");
            // verify the required parameter 'createProfileBody' is set
            if (createProfileBody == null)
                throw new ApiException(400, "Missing required parameter 'createProfileBody' when calling FlipApi->CreateProfile");

            var localVarPath = "./profiles.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (excludeAdvancedServices != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_advanced_services", excludeAdvancedServices)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (createProfileBody != null && createProfileBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createProfileBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createProfileBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Profile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Profile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Profile)));
        }

        /// <summary>
        /// Creates a Video from a provided source_url. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createVideoBody"></param>
        /// <returns>Video</returns>
        public Video CreateVideo (string factoryId, CreateVideoBody createVideoBody)
        {
             ApiResponse<Video> localVarResponse = CreateVideoWithHttpInfo(factoryId, createVideoBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Video from a provided source_url. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createVideoBody"></param>
        /// <returns>ApiResponse of Video</returns>
        public ApiResponse< Video > CreateVideoWithHttpInfo (string factoryId, CreateVideoBody createVideoBody)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->CreateVideo");
            // verify the required parameter 'createVideoBody' is set
            if (createVideoBody == null)
                throw new ApiException(400, "Missing required parameter 'createVideoBody' when calling FlipApi->CreateVideo");

            var localVarPath = "./videos.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (createVideoBody != null && createVideoBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createVideoBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createVideoBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVideo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Video) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Video)));
        }

        /// <summary>
        /// Creates a Video from a provided source_url. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createVideoBody"></param>
        /// <returns>Task of Video</returns>
        public async System.Threading.Tasks.Task<Video> CreateVideoAsync (string factoryId, CreateVideoBody createVideoBody)
        {
             ApiResponse<Video> localVarResponse = await CreateVideoAsyncWithHttpInfo(factoryId, createVideoBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Video from a provided source_url. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="createVideoBody"></param>
        /// <returns>Task of ApiResponse (Video)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Video>> CreateVideoAsyncWithHttpInfo (string factoryId, CreateVideoBody createVideoBody)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->CreateVideo");
            // verify the required parameter 'createVideoBody' is set
            if (createVideoBody == null)
                throw new ApiException(400, "Missing required parameter 'createVideoBody' when calling FlipApi->CreateVideo");

            var localVarPath = "./videos.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (createVideoBody != null && createVideoBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createVideoBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createVideoBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVideo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Video) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Video)));
        }

        /// <summary>
        /// Creates a Workorder. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="profileId">Id of a Profile. (optional)</param>
        /// <param name="file">Input file. (optional)</param>
        /// <param name="sourceUrl">URL pointing to an input file. (optional)</param>
        /// <returns></returns>
        public void CreateWorkorder (string factoryId, string profileId = null, System.IO.Stream file = null, string sourceUrl = null)
        {
             CreateWorkorderWithHttpInfo(factoryId, profileId, file, sourceUrl);
        }

        /// <summary>
        /// Creates a Workorder. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="profileId">Id of a Profile. (optional)</param>
        /// <param name="file">Input file. (optional)</param>
        /// <param name="sourceUrl">URL pointing to an input file. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateWorkorderWithHttpInfo (string factoryId, string profileId = null, System.IO.Stream file = null, string sourceUrl = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->CreateWorkorder");

            var localVarPath = "./workorders.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (profileId != null) localVarFormParams.Add("profile_id", Configuration.ApiClient.ParameterToString(profileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (sourceUrl != null) localVarFormParams.Add("source_url", Configuration.ApiClient.ParameterToString(sourceUrl)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWorkorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a Workorder. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="profileId">Id of a Profile. (optional)</param>
        /// <param name="file">Input file. (optional)</param>
        /// <param name="sourceUrl">URL pointing to an input file. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateWorkorderAsync (string factoryId, string profileId = null, System.IO.Stream file = null, string sourceUrl = null)
        {
             await CreateWorkorderAsyncWithHttpInfo(factoryId, profileId, file, sourceUrl);

        }

        /// <summary>
        /// Creates a Workorder. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="profileId">Id of a Profile. (optional)</param>
        /// <param name="file">Input file. (optional)</param>
        /// <param name="sourceUrl">URL pointing to an input file. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateWorkorderAsyncWithHttpInfo (string factoryId, string profileId = null, System.IO.Stream file = null, string sourceUrl = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->CreateWorkorder");

            var localVarPath = "./workorders.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (profileId != null) localVarFormParams.Add("profile_id", Configuration.ApiClient.ParameterToString(profileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (sourceUrl != null) localVarFormParams.Add("source_url", Configuration.ApiClient.ParameterToString(sourceUrl)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWorkorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>DeletedResponse</returns>
        public DeletedResponse DeleteEncoding (string id, string factoryId)
        {
             ApiResponse<DeletedResponse> localVarResponse = DeleteEncodingWithHttpInfo(id, factoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of DeletedResponse</returns>
        public ApiResponse< DeletedResponse > DeleteEncodingWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->DeleteEncoding");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->DeleteEncoding");

            var localVarPath = "./encodings/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEncoding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DeletedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedResponse)));
        }

        /// <summary>
        /// Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of DeletedResponse</returns>
        public async System.Threading.Tasks.Task<DeletedResponse> DeleteEncodingAsync (string id, string factoryId)
        {
             ApiResponse<DeletedResponse> localVarResponse = await DeleteEncodingAsyncWithHttpInfo(id, factoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (DeletedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedResponse>> DeleteEncodingAsyncWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->DeleteEncoding");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->DeleteEncoding");

            var localVarPath = "./encodings/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEncoding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DeletedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedResponse)));
        }

        /// <summary>
        /// Deletes a given Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>DeletedResponse</returns>
        public DeletedResponse DeleteProfile (string id, string factoryId)
        {
             ApiResponse<DeletedResponse> localVarResponse = DeleteProfileWithHttpInfo(id, factoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a given Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of DeletedResponse</returns>
        public ApiResponse< DeletedResponse > DeleteProfileWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->DeleteProfile");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->DeleteProfile");

            var localVarPath = "./profiles/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DeletedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedResponse)));
        }

        /// <summary>
        /// Deletes a given Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of DeletedResponse</returns>
        public async System.Threading.Tasks.Task<DeletedResponse> DeleteProfileAsync (string id, string factoryId)
        {
             ApiResponse<DeletedResponse> localVarResponse = await DeleteProfileAsyncWithHttpInfo(id, factoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a given Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Profile</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (DeletedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedResponse>> DeleteProfileAsyncWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->DeleteProfile");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->DeleteProfile");

            var localVarPath = "./profiles/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DeletedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedResponse)));
        }

        /// <summary>
        /// Deletes a Video object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>DeletedResponse</returns>
        public DeletedResponse DeleteVideo (string id, string factoryId)
        {
             ApiResponse<DeletedResponse> localVarResponse = DeleteVideoWithHttpInfo(id, factoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a Video object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of DeletedResponse</returns>
        public ApiResponse< DeletedResponse > DeleteVideoWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->DeleteVideo");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->DeleteVideo");

            var localVarPath = "./videos/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVideo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DeletedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedResponse)));
        }

        /// <summary>
        /// Deletes a Video object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of DeletedResponse</returns>
        public async System.Threading.Tasks.Task<DeletedResponse> DeleteVideoAsync (string id, string factoryId)
        {
             ApiResponse<DeletedResponse> localVarResponse = await DeleteVideoAsyncWithHttpInfo(id, factoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a Video object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (DeletedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedResponse>> DeleteVideoAsyncWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->DeleteVideo");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->DeleteVideo");

            var localVarPath = "./videos/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVideo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DeletedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedResponse)));
        }

        /// <summary>
        /// Delete a video&#39;s source file. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>DeletedResponse</returns>
        public DeletedResponse DeleteVideoSource (string id, string factoryId)
        {
             ApiResponse<DeletedResponse> localVarResponse = DeleteVideoSourceWithHttpInfo(id, factoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a video&#39;s source file. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of DeletedResponse</returns>
        public ApiResponse< DeletedResponse > DeleteVideoSourceWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->DeleteVideoSource");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->DeleteVideoSource");

            var localVarPath = "./videos/{id}/source.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVideoSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DeletedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedResponse)));
        }

        /// <summary>
        /// Delete a video&#39;s source file. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of DeletedResponse</returns>
        public async System.Threading.Tasks.Task<DeletedResponse> DeleteVideoSourceAsync (string id, string factoryId)
        {
             ApiResponse<DeletedResponse> localVarResponse = await DeleteVideoSourceAsyncWithHttpInfo(id, factoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a video&#39;s source file. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (DeletedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedResponse>> DeleteVideoSourceAsyncWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->DeleteVideoSource");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->DeleteVideoSource");

            var localVarPath = "./videos/{id}/source.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVideoSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DeletedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedResponse)));
        }

        /// <summary>
        /// Returns an Encoding object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Encoding</returns>
        public Encoding Encoding (string id, string factoryId, bool? screenshots = null, bool? preciseStatus = null)
        {
             ApiResponse<Encoding> localVarResponse = EncodingWithHttpInfo(id, factoryId, screenshots, preciseStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an Encoding object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of Encoding</returns>
        public ApiResponse< Encoding > EncodingWithHttpInfo (string id, string factoryId, bool? screenshots = null, bool? preciseStatus = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->Encoding");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Encoding");

            var localVarPath = "./encodings/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (screenshots != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "screenshots", screenshots)); // query parameter
            if (preciseStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "precise_status", preciseStatus)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Encoding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Encoding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Encoding) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Encoding)));
        }

        /// <summary>
        /// Returns an Encoding object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of Encoding</returns>
        public async System.Threading.Tasks.Task<Encoding> EncodingAsync (string id, string factoryId, bool? screenshots = null, bool? preciseStatus = null)
        {
             ApiResponse<Encoding> localVarResponse = await EncodingAsyncWithHttpInfo(id, factoryId, screenshots, preciseStatus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns an Encoding object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (Encoding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Encoding>> EncodingAsyncWithHttpInfo (string id, string factoryId, bool? screenshots = null, bool? preciseStatus = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->Encoding");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Encoding");

            var localVarPath = "./encodings/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (screenshots != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "screenshots", screenshots)); // query parameter
            if (preciseStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "precise_status", preciseStatus)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Encoding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Encoding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Encoding) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Encoding)));
        }

        /// <summary>
        /// Returns a list of Encoding objects 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoId">Id of a Video. When specified, the resulting list will contain videos that belong to the Video. (optional)</param>
        /// <param name="status">One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status. (optional)</param>
        /// <param name="profileId">Filter by profile_id. (optional)</param>
        /// <param name="profileName">Filter by profile_name. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>PaginatedEncodingsCollection</returns>
        public PaginatedEncodingsCollection Encodings (string factoryId, string videoId = null, string status = null, string profileId = null, string profileName = null, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null)
        {
             ApiResponse<PaginatedEncodingsCollection> localVarResponse = EncodingsWithHttpInfo(factoryId, videoId, status, profileId, profileName, page, perPage, screenshots, preciseStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of Encoding objects 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoId">Id of a Video. When specified, the resulting list will contain videos that belong to the Video. (optional)</param>
        /// <param name="status">One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status. (optional)</param>
        /// <param name="profileId">Filter by profile_id. (optional)</param>
        /// <param name="profileName">Filter by profile_name. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of PaginatedEncodingsCollection</returns>
        public ApiResponse< PaginatedEncodingsCollection > EncodingsWithHttpInfo (string factoryId, string videoId = null, string status = null, string profileId = null, string profileName = null, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Encodings");

            var localVarPath = "./encodings.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (videoId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "video_id", videoId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (profileId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "profile_id", profileId)); // query parameter
            if (profileName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "profile_name", profileName)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (screenshots != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "screenshots", screenshots)); // query parameter
            if (preciseStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "precise_status", preciseStatus)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Encodings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedEncodingsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedEncodingsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedEncodingsCollection)));
        }

        /// <summary>
        /// Returns a list of Encoding objects 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoId">Id of a Video. When specified, the resulting list will contain videos that belong to the Video. (optional)</param>
        /// <param name="status">One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status. (optional)</param>
        /// <param name="profileId">Filter by profile_id. (optional)</param>
        /// <param name="profileName">Filter by profile_name. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of PaginatedEncodingsCollection</returns>
        public async System.Threading.Tasks.Task<PaginatedEncodingsCollection> EncodingsAsync (string factoryId, string videoId = null, string status = null, string profileId = null, string profileName = null, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null)
        {
             ApiResponse<PaginatedEncodingsCollection> localVarResponse = await EncodingsAsyncWithHttpInfo(factoryId, videoId, status, profileId, profileName, page, perPage, screenshots, preciseStatus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of Encoding objects 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoId">Id of a Video. When specified, the resulting list will contain videos that belong to the Video. (optional)</param>
        /// <param name="status">One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status. (optional)</param>
        /// <param name="profileId">Filter by profile_id. (optional)</param>
        /// <param name="profileName">Filter by profile_name. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedEncodingsCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedEncodingsCollection>> EncodingsAsyncWithHttpInfo (string factoryId, string videoId = null, string status = null, string profileId = null, string profileName = null, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Encodings");

            var localVarPath = "./encodings.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (videoId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "video_id", videoId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (profileId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "profile_id", profileId)); // query parameter
            if (profileName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "profile_name", profileName)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (screenshots != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "screenshots", screenshots)); // query parameter
            if (preciseStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "precise_status", preciseStatus)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Encodings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedEncodingsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedEncodingsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedEncodingsCollection)));
        }

        /// <summary>
        /// Returns a number of Encoding objects created using a given factory. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>CountResponse</returns>
        public CountResponse EncodingsCount (string factoryId)
        {
             ApiResponse<CountResponse> localVarResponse = EncodingsCountWithHttpInfo(factoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a number of Encoding objects created using a given factory. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of CountResponse</returns>
        public ApiResponse< CountResponse > EncodingsCountWithHttpInfo (string factoryId)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->EncodingsCount");

            var localVarPath = "./encodings/count.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EncodingsCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CountResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountResponse)));
        }

        /// <summary>
        /// Returns a number of Encoding objects created using a given factory. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of CountResponse</returns>
        public async System.Threading.Tasks.Task<CountResponse> EncodingsCountAsync (string factoryId)
        {
             ApiResponse<CountResponse> localVarResponse = await EncodingsCountAsyncWithHttpInfo(factoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a number of Encoding objects created using a given factory. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (CountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountResponse>> EncodingsCountAsyncWithHttpInfo (string factoryId)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->EncodingsCount");

            var localVarPath = "./encodings/count.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EncodingsCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CountResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountResponse)));
        }

        /// <summary>
        /// Returns a collection of Factory objects. Returns a collection of Factory objects.
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>PaginatedFactoryCollection</returns>
        public PaginatedFactoryCollection Factories (int? page = null, int? perPage = null, bool? withStorageProvider = null)
        {
             ApiResponse<PaginatedFactoryCollection> localVarResponse = FactoriesWithHttpInfo(page, perPage, withStorageProvider);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of Factory objects. Returns a collection of Factory objects.
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>ApiResponse of PaginatedFactoryCollection</returns>
        public ApiResponse< PaginatedFactoryCollection > FactoriesWithHttpInfo (int? page = null, int? perPage = null, bool? withStorageProvider = null)
        {

            var localVarPath = "./factories.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (withStorageProvider != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "with_storage_provider", withStorageProvider)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Factories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedFactoryCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedFactoryCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedFactoryCollection)));
        }

        /// <summary>
        /// Returns a collection of Factory objects. Returns a collection of Factory objects.
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of PaginatedFactoryCollection</returns>
        public async System.Threading.Tasks.Task<PaginatedFactoryCollection> FactoriesAsync (int? page = null, int? perPage = null, bool? withStorageProvider = null)
        {
             ApiResponse<PaginatedFactoryCollection> localVarResponse = await FactoriesAsyncWithHttpInfo(page, perPage, withStorageProvider);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of Factory objects. Returns a collection of Factory objects.
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedFactoryCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedFactoryCollection>> FactoriesAsyncWithHttpInfo (int? page = null, int? perPage = null, bool? withStorageProvider = null)
        {

            var localVarPath = "./factories.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (withStorageProvider != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "with_storage_provider", withStorageProvider)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Factories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedFactoryCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedFactoryCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedFactoryCollection)));
        }

        /// <summary>
        /// Returns a Factory object. Returns a Factory object.
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a factory</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Factory</returns>
        public Factory Factory (string id, bool? withStorageProvider = null)
        {
             ApiResponse<Factory> localVarResponse = FactoryWithHttpInfo(id, withStorageProvider);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a Factory object. Returns a Factory object.
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a factory</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>ApiResponse of Factory</returns>
        public ApiResponse< Factory > FactoryWithHttpInfo (string id, bool? withStorageProvider = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->Factory");

            var localVarPath = "./factories/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (withStorageProvider != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "with_storage_provider", withStorageProvider)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Factory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Factory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Factory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Factory)));
        }

        /// <summary>
        /// Returns a Factory object. Returns a Factory object.
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a factory</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of Factory</returns>
        public async System.Threading.Tasks.Task<Factory> FactoryAsync (string id, bool? withStorageProvider = null)
        {
             ApiResponse<Factory> localVarResponse = await FactoryAsyncWithHttpInfo(id, withStorageProvider);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a Factory object. Returns a Factory object.
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a factory</param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of ApiResponse (Factory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Factory>> FactoryAsyncWithHttpInfo (string id, bool? withStorageProvider = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->Factory");

            var localVarPath = "./factories/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (withStorageProvider != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "with_storage_provider", withStorageProvider)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Factory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Factory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Factory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Factory)));
        }

        /// <summary>
        /// Returns a Factory&#39;s notification settings. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>CloudNotificationSettings</returns>
        public CloudNotificationSettings Notifications (string factoryId)
        {
             ApiResponse<CloudNotificationSettings> localVarResponse = NotificationsWithHttpInfo(factoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a Factory&#39;s notification settings. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of CloudNotificationSettings</returns>
        public ApiResponse< CloudNotificationSettings > NotificationsWithHttpInfo (string factoryId)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Notifications");

            var localVarPath = "./notifications.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Notifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudNotificationSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CloudNotificationSettings) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudNotificationSettings)));
        }

        /// <summary>
        /// Returns a Factory&#39;s notification settings. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of CloudNotificationSettings</returns>
        public async System.Threading.Tasks.Task<CloudNotificationSettings> NotificationsAsync (string factoryId)
        {
             ApiResponse<CloudNotificationSettings> localVarResponse = await NotificationsAsyncWithHttpInfo(factoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a Factory&#39;s notification settings. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (CloudNotificationSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudNotificationSettings>> NotificationsAsyncWithHttpInfo (string factoryId)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Notifications");

            var localVarPath = "./notifications.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Notifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudNotificationSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CloudNotificationSettings) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudNotificationSettings)));
        }

        /// <summary>
        /// Returns a Profile object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">A name or an id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Profile</returns>
        public Profile Profile (string idOrName, string factoryId, bool? expand = null)
        {
             ApiResponse<Profile> localVarResponse = ProfileWithHttpInfo(idOrName, factoryId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a Profile object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">A name or an id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of Profile</returns>
        public ApiResponse< Profile > ProfileWithHttpInfo (string idOrName, string factoryId, bool? expand = null)
        {
            // verify the required parameter 'idOrName' is set
            if (idOrName == null)
                throw new ApiException(400, "Missing required parameter 'idOrName' when calling FlipApi->Profile");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Profile");

            var localVarPath = "./profiles/{id_or_name}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idOrName != null) localVarPathParams.Add("id_or_name", Configuration.ApiClient.ParameterToString(idOrName)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Profile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Profile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Profile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Profile)));
        }

        /// <summary>
        /// Returns a Profile object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">A name or an id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Task of Profile</returns>
        public async System.Threading.Tasks.Task<Profile> ProfileAsync (string idOrName, string factoryId, bool? expand = null)
        {
             ApiResponse<Profile> localVarResponse = await ProfileAsyncWithHttpInfo(idOrName, factoryId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a Profile object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">A name or an id of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (Profile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Profile>> ProfileAsyncWithHttpInfo (string idOrName, string factoryId, bool? expand = null)
        {
            // verify the required parameter 'idOrName' is set
            if (idOrName == null)
                throw new ApiException(400, "Missing required parameter 'idOrName' when calling FlipApi->Profile");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Profile");

            var localVarPath = "./profiles/{id_or_name}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idOrName != null) localVarPathParams.Add("id_or_name", Configuration.ApiClient.ParameterToString(idOrName)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Profile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Profile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Profile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Profile)));
        }

        /// <summary>
        /// Returns a list of Encodings that belong to a Profile. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">Id or name of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>PaginatedEncodingsCollection</returns>
        public PaginatedEncodingsCollection ProfileEncodings (string idOrName, string factoryId)
        {
             ApiResponse<PaginatedEncodingsCollection> localVarResponse = ProfileEncodingsWithHttpInfo(idOrName, factoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of Encodings that belong to a Profile. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">Id or name of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of PaginatedEncodingsCollection</returns>
        public ApiResponse< PaginatedEncodingsCollection > ProfileEncodingsWithHttpInfo (string idOrName, string factoryId)
        {
            // verify the required parameter 'idOrName' is set
            if (idOrName == null)
                throw new ApiException(400, "Missing required parameter 'idOrName' when calling FlipApi->ProfileEncodings");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->ProfileEncodings");

            var localVarPath = "./profiles/{id_or_name}/encodings.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idOrName != null) localVarPathParams.Add("id_or_name", Configuration.ApiClient.ParameterToString(idOrName)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfileEncodings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedEncodingsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedEncodingsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedEncodingsCollection)));
        }

        /// <summary>
        /// Returns a list of Encodings that belong to a Profile. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">Id or name of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of PaginatedEncodingsCollection</returns>
        public async System.Threading.Tasks.Task<PaginatedEncodingsCollection> ProfileEncodingsAsync (string idOrName, string factoryId)
        {
             ApiResponse<PaginatedEncodingsCollection> localVarResponse = await ProfileEncodingsAsyncWithHttpInfo(idOrName, factoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of Encodings that belong to a Profile. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrName">Id or name of a Profile.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (PaginatedEncodingsCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedEncodingsCollection>> ProfileEncodingsAsyncWithHttpInfo (string idOrName, string factoryId)
        {
            // verify the required parameter 'idOrName' is set
            if (idOrName == null)
                throw new ApiException(400, "Missing required parameter 'idOrName' when calling FlipApi->ProfileEncodings");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->ProfileEncodings");

            var localVarPath = "./profiles/{id_or_name}/encodings.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idOrName != null) localVarPathParams.Add("id_or_name", Configuration.ApiClient.ParameterToString(idOrName)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfileEncodings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedEncodingsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedEncodingsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedEncodingsCollection)));
        }

        /// <summary>
        /// Returns a collection of Profile objects. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="excludeAdvancedServices">Determine whether exclude Advanced Services profiles from the results. By default this is not set. (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>PaginatedProfilesCollection</returns>
        public PaginatedProfilesCollection Profiles (string factoryId, bool? excludeAdvancedServices = null, bool? expand = null, int? page = null, int? perPage = null)
        {
             ApiResponse<PaginatedProfilesCollection> localVarResponse = ProfilesWithHttpInfo(factoryId, excludeAdvancedServices, expand, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of Profile objects. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="excludeAdvancedServices">Determine whether exclude Advanced Services profiles from the results. By default this is not set. (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>ApiResponse of PaginatedProfilesCollection</returns>
        public ApiResponse< PaginatedProfilesCollection > ProfilesWithHttpInfo (string factoryId, bool? excludeAdvancedServices = null, bool? expand = null, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Profiles");

            var localVarPath = "./profiles.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (excludeAdvancedServices != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_advanced_services", excludeAdvancedServices)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Profiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedProfilesCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedProfilesCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedProfilesCollection)));
        }

        /// <summary>
        /// Returns a collection of Profile objects. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="excludeAdvancedServices">Determine whether exclude Advanced Services profiles from the results. By default this is not set. (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of PaginatedProfilesCollection</returns>
        public async System.Threading.Tasks.Task<PaginatedProfilesCollection> ProfilesAsync (string factoryId, bool? excludeAdvancedServices = null, bool? expand = null, int? page = null, int? perPage = null)
        {
             ApiResponse<PaginatedProfilesCollection> localVarResponse = await ProfilesAsyncWithHttpInfo(factoryId, excludeAdvancedServices, expand, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of Profile objects. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="excludeAdvancedServices">Determine whether exclude Advanced Services profiles from the results. By default this is not set. (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedProfilesCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedProfilesCollection>> ProfilesAsyncWithHttpInfo (string factoryId, bool? excludeAdvancedServices = null, bool? expand = null, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Profiles");

            var localVarPath = "./profiles.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (excludeAdvancedServices != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_advanced_services", excludeAdvancedServices)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Profiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedProfilesCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedProfilesCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedProfilesCollection)));
        }

        /// <summary>
        /// Returns a collection of Video objects queued for encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>PaginatedVideoCollection</returns>
        public PaginatedVideoCollection QueuedVideos (string factoryId, int? page = null, int? perPage = null)
        {
             ApiResponse<PaginatedVideoCollection> localVarResponse = QueuedVideosWithHttpInfo(factoryId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of Video objects queued for encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>ApiResponse of PaginatedVideoCollection</returns>
        public ApiResponse< PaginatedVideoCollection > QueuedVideosWithHttpInfo (string factoryId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->QueuedVideos");

            var localVarPath = "./videos/queued.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueuedVideos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedVideoCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedVideoCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedVideoCollection)));
        }

        /// <summary>
        /// Returns a collection of Video objects queued for encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of PaginatedVideoCollection</returns>
        public async System.Threading.Tasks.Task<PaginatedVideoCollection> QueuedVideosAsync (string factoryId, int? page = null, int? perPage = null)
        {
             ApiResponse<PaginatedVideoCollection> localVarResponse = await QueuedVideosAsyncWithHttpInfo(factoryId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of Video objects queued for encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedVideoCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedVideoCollection>> QueuedVideosAsyncWithHttpInfo (string factoryId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->QueuedVideos");

            var localVarPath = "./videos/queued.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueuedVideos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedVideoCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedVideoCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedVideoCollection)));
        }

        /// <summary>
        /// Resubmits a video to encode. Resubmits the video to encode. Please note that this option will work only for videos in &#x60;success&#x60; status.
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="resubmitVideoBody"></param>
        /// <returns></returns>
        public void ResubmitVideo (string factoryId, ResubmitVideoBody resubmitVideoBody)
        {
             ResubmitVideoWithHttpInfo(factoryId, resubmitVideoBody);
        }

        /// <summary>
        /// Resubmits a video to encode. Resubmits the video to encode. Please note that this option will work only for videos in &#x60;success&#x60; status.
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="resubmitVideoBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ResubmitVideoWithHttpInfo (string factoryId, ResubmitVideoBody resubmitVideoBody)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->ResubmitVideo");
            // verify the required parameter 'resubmitVideoBody' is set
            if (resubmitVideoBody == null)
                throw new ApiException(400, "Missing required parameter 'resubmitVideoBody' when calling FlipApi->ResubmitVideo");

            var localVarPath = "./videos/resubmit.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (resubmitVideoBody != null && resubmitVideoBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resubmitVideoBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resubmitVideoBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResubmitVideo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Resubmits a video to encode. Resubmits the video to encode. Please note that this option will work only for videos in &#x60;success&#x60; status.
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="resubmitVideoBody"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResubmitVideoAsync (string factoryId, ResubmitVideoBody resubmitVideoBody)
        {
             await ResubmitVideoAsyncWithHttpInfo(factoryId, resubmitVideoBody);

        }

        /// <summary>
        /// Resubmits a video to encode. Resubmits the video to encode. Please note that this option will work only for videos in &#x60;success&#x60; status.
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="resubmitVideoBody"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResubmitVideoAsyncWithHttpInfo (string factoryId, ResubmitVideoBody resubmitVideoBody)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->ResubmitVideo");
            // verify the required parameter 'resubmitVideoBody' is set
            if (resubmitVideoBody == null)
                throw new ApiException(400, "Missing required parameter 'resubmitVideoBody' when calling FlipApi->ResubmitVideo");

            var localVarPath = "./videos/resubmit.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (resubmitVideoBody != null && resubmitVideoBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resubmitVideoBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resubmitVideoBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResubmitVideo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retries a failed encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>RetriedResponse</returns>
        public RetriedResponse RetryEncoding (string id, string factoryId)
        {
             ApiResponse<RetriedResponse> localVarResponse = RetryEncodingWithHttpInfo(id, factoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retries a failed encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of RetriedResponse</returns>
        public ApiResponse< RetriedResponse > RetryEncodingWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->RetryEncoding");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->RetryEncoding");

            var localVarPath = "./encodings/{id}/retry.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetryEncoding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetriedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RetriedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetriedResponse)));
        }

        /// <summary>
        /// Retries a failed encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of RetriedResponse</returns>
        public async System.Threading.Tasks.Task<RetriedResponse> RetryEncodingAsync (string id, string factoryId)
        {
             ApiResponse<RetriedResponse> localVarResponse = await RetryEncodingAsyncWithHttpInfo(id, factoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retries a failed encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (RetriedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetriedResponse>> RetryEncodingAsyncWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->RetryEncoding");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->RetryEncoding");

            var localVarPath = "./encodings/{id}/retry.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetryEncoding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetriedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RetriedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetriedResponse)));
        }

        /// <summary>
        /// Returns a signed url pointing to an Encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>EncodingSignedUrl</returns>
        public EncodingSignedUrl SignedEncodingUrl (string id, string factoryId)
        {
             ApiResponse<EncodingSignedUrl> localVarResponse = SignedEncodingUrlWithHttpInfo(id, factoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a signed url pointing to an Encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of EncodingSignedUrl</returns>
        public ApiResponse< EncodingSignedUrl > SignedEncodingUrlWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->SignedEncodingUrl");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->SignedEncodingUrl");

            var localVarPath = "./encodings/{id}/signed-url.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignedEncodingUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EncodingSignedUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EncodingSignedUrl) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EncodingSignedUrl)));
        }

        /// <summary>
        /// Returns a signed url pointing to an Encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of EncodingSignedUrl</returns>
        public async System.Threading.Tasks.Task<EncodingSignedUrl> SignedEncodingUrlAsync (string id, string factoryId)
        {
             ApiResponse<EncodingSignedUrl> localVarResponse = await SignedEncodingUrlAsyncWithHttpInfo(id, factoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a signed url pointing to an Encoding. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (EncodingSignedUrl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EncodingSignedUrl>> SignedEncodingUrlAsyncWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->SignedEncodingUrl");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->SignedEncodingUrl");

            var localVarPath = "./encodings/{id}/signed-url.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignedEncodingUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EncodingSignedUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EncodingSignedUrl) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EncodingSignedUrl)));
        }

        /// <summary>
        /// Returns a list of signed urls pointing to an Encoding&#39;s outputs. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>EncodingSignedUrls</returns>
        public EncodingSignedUrls SignedEncodingUrls (string id, string factoryId)
        {
             ApiResponse<EncodingSignedUrls> localVarResponse = SignedEncodingUrlsWithHttpInfo(id, factoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of signed urls pointing to an Encoding&#39;s outputs. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of EncodingSignedUrls</returns>
        public ApiResponse< EncodingSignedUrls > SignedEncodingUrlsWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->SignedEncodingUrls");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->SignedEncodingUrls");

            var localVarPath = "./encodings/{id}/signed-urls.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignedEncodingUrls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EncodingSignedUrls>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EncodingSignedUrls) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EncodingSignedUrls)));
        }

        /// <summary>
        /// Returns a list of signed urls pointing to an Encoding&#39;s outputs. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of EncodingSignedUrls</returns>
        public async System.Threading.Tasks.Task<EncodingSignedUrls> SignedEncodingUrlsAsync (string id, string factoryId)
        {
             ApiResponse<EncodingSignedUrls> localVarResponse = await SignedEncodingUrlsAsyncWithHttpInfo(id, factoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of signed urls pointing to an Encoding&#39;s outputs. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (EncodingSignedUrls)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EncodingSignedUrls>> SignedEncodingUrlsAsyncWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->SignedEncodingUrls");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->SignedEncodingUrls");

            var localVarPath = "./encodings/{id}/signed-urls.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignedEncodingUrls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EncodingSignedUrls>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EncodingSignedUrls) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EncodingSignedUrls)));
        }

        /// <summary>
        /// Returns a signed url pointing to a Video. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>SignedVideoUrl</returns>
        public SignedVideoUrl SignedVideoUrl (string id, string factoryId)
        {
             ApiResponse<SignedVideoUrl> localVarResponse = SignedVideoUrlWithHttpInfo(id, factoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a signed url pointing to a Video. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of SignedVideoUrl</returns>
        public ApiResponse< SignedVideoUrl > SignedVideoUrlWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->SignedVideoUrl");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->SignedVideoUrl");

            var localVarPath = "./videos/{id}/signed-url.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignedVideoUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignedVideoUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SignedVideoUrl) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignedVideoUrl)));
        }

        /// <summary>
        /// Returns a signed url pointing to a Video. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of SignedVideoUrl</returns>
        public async System.Threading.Tasks.Task<SignedVideoUrl> SignedVideoUrlAsync (string id, string factoryId)
        {
             ApiResponse<SignedVideoUrl> localVarResponse = await SignedVideoUrlAsyncWithHttpInfo(id, factoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a signed url pointing to a Video. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (SignedVideoUrl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignedVideoUrl>> SignedVideoUrlAsyncWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->SignedVideoUrl");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->SignedVideoUrl");

            var localVarPath = "./videos/{id}/signed-url.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignedVideoUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignedVideoUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SignedVideoUrl) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignedVideoUrl)));
        }

        /// <summary>
        /// Toggles synchronisation settings. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="factorySyncBody"></param>
        /// <returns>FactorySync</returns>
        public FactorySync ToggleFactorySync (string id, FactorySyncBody factorySyncBody)
        {
             ApiResponse<FactorySync> localVarResponse = ToggleFactorySyncWithHttpInfo(id, factorySyncBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Toggles synchronisation settings. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="factorySyncBody"></param>
        /// <returns>ApiResponse of FactorySync</returns>
        public ApiResponse< FactorySync > ToggleFactorySyncWithHttpInfo (string id, FactorySyncBody factorySyncBody)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->ToggleFactorySync");
            // verify the required parameter 'factorySyncBody' is set
            if (factorySyncBody == null)
                throw new ApiException(400, "Missing required parameter 'factorySyncBody' when calling FlipApi->ToggleFactorySync");

            var localVarPath = "./factories/{id}/sync.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factorySyncBody != null && factorySyncBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(factorySyncBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = factorySyncBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ToggleFactorySync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FactorySync>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FactorySync) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FactorySync)));
        }

        /// <summary>
        /// Toggles synchronisation settings. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="factorySyncBody"></param>
        /// <returns>Task of FactorySync</returns>
        public async System.Threading.Tasks.Task<FactorySync> ToggleFactorySyncAsync (string id, FactorySyncBody factorySyncBody)
        {
             ApiResponse<FactorySync> localVarResponse = await ToggleFactorySyncAsyncWithHttpInfo(id, factorySyncBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Toggles synchronisation settings. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="factorySyncBody"></param>
        /// <returns>Task of ApiResponse (FactorySync)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FactorySync>> ToggleFactorySyncAsyncWithHttpInfo (string id, FactorySyncBody factorySyncBody)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->ToggleFactorySync");
            // verify the required parameter 'factorySyncBody' is set
            if (factorySyncBody == null)
                throw new ApiException(400, "Missing required parameter 'factorySyncBody' when calling FlipApi->ToggleFactorySync");

            var localVarPath = "./factories/{id}/sync.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factorySyncBody != null && factorySyncBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(factorySyncBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = factorySyncBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ToggleFactorySync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FactorySync>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FactorySync) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FactorySync)));
        }

        /// <summary>
        /// Updates an Encoding 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Encoding</returns>
        public Encoding UpdateEncoding (string id, string factoryId, UpdateEncodingBody updateEncodingBody, bool? screenshots = null, bool? preciseStatus = null)
        {
             ApiResponse<Encoding> localVarResponse = UpdateEncodingWithHttpInfo(id, factoryId, updateEncodingBody, screenshots, preciseStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an Encoding 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of Encoding</returns>
        public ApiResponse< Encoding > UpdateEncodingWithHttpInfo (string id, string factoryId, UpdateEncodingBody updateEncodingBody, bool? screenshots = null, bool? preciseStatus = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->UpdateEncoding");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->UpdateEncoding");
            // verify the required parameter 'updateEncodingBody' is set
            if (updateEncodingBody == null)
                throw new ApiException(400, "Missing required parameter 'updateEncodingBody' when calling FlipApi->UpdateEncoding");

            var localVarPath = "./encodings/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (screenshots != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "screenshots", screenshots)); // query parameter
            if (preciseStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "precise_status", preciseStatus)); // query parameter
            if (updateEncodingBody != null && updateEncodingBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateEncodingBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateEncodingBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEncoding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Encoding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Encoding) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Encoding)));
        }

        /// <summary>
        /// Updates an Encoding 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of Encoding</returns>
        public async System.Threading.Tasks.Task<Encoding> UpdateEncodingAsync (string id, string factoryId, UpdateEncodingBody updateEncodingBody, bool? screenshots = null, bool? preciseStatus = null)
        {
             ApiResponse<Encoding> localVarResponse = await UpdateEncodingAsyncWithHttpInfo(id, factoryId, updateEncodingBody, screenshots, preciseStatus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an Encoding 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of an Encoding.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateEncodingBody"></param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (Encoding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Encoding>> UpdateEncodingAsyncWithHttpInfo (string id, string factoryId, UpdateEncodingBody updateEncodingBody, bool? screenshots = null, bool? preciseStatus = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->UpdateEncoding");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->UpdateEncoding");
            // verify the required parameter 'updateEncodingBody' is set
            if (updateEncodingBody == null)
                throw new ApiException(400, "Missing required parameter 'updateEncodingBody' when calling FlipApi->UpdateEncoding");

            var localVarPath = "./encodings/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (screenshots != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "screenshots", screenshots)); // query parameter
            if (preciseStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "precise_status", preciseStatus)); // query parameter
            if (updateEncodingBody != null && updateEncodingBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateEncodingBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateEncodingBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEncoding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Encoding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Encoding) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Encoding)));
        }

        /// <summary>
        /// Updates a Factory&#39;s settings. Returns a Factory object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="updateFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Factory</returns>
        public Factory UpdateFactory (string id, FactoryBody updateFactoryBody, bool? withStorageProvider = null)
        {
             ApiResponse<Factory> localVarResponse = UpdateFactoryWithHttpInfo(id, updateFactoryBody, withStorageProvider);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Factory&#39;s settings. Returns a Factory object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="updateFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>ApiResponse of Factory</returns>
        public ApiResponse< Factory > UpdateFactoryWithHttpInfo (string id, FactoryBody updateFactoryBody, bool? withStorageProvider = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->UpdateFactory");
            // verify the required parameter 'updateFactoryBody' is set
            if (updateFactoryBody == null)
                throw new ApiException(400, "Missing required parameter 'updateFactoryBody' when calling FlipApi->UpdateFactory");

            var localVarPath = "./factories/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (withStorageProvider != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "with_storage_provider", withStorageProvider)); // query parameter
            if (updateFactoryBody != null && updateFactoryBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateFactoryBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateFactoryBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFactory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Factory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Factory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Factory)));
        }

        /// <summary>
        /// Updates a Factory&#39;s settings. Returns a Factory object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="updateFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of Factory</returns>
        public async System.Threading.Tasks.Task<Factory> UpdateFactoryAsync (string id, FactoryBody updateFactoryBody, bool? withStorageProvider = null)
        {
             ApiResponse<Factory> localVarResponse = await UpdateFactoryAsyncWithHttpInfo(id, updateFactoryBody, withStorageProvider);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a Factory&#39;s settings. Returns a Factory object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the factory</param>
        /// <param name="updateFactoryBody"></param>
        /// <param name="withStorageProvider">if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)</param>
        /// <returns>Task of ApiResponse (Factory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Factory>> UpdateFactoryAsyncWithHttpInfo (string id, FactoryBody updateFactoryBody, bool? withStorageProvider = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->UpdateFactory");
            // verify the required parameter 'updateFactoryBody' is set
            if (updateFactoryBody == null)
                throw new ApiException(400, "Missing required parameter 'updateFactoryBody' when calling FlipApi->UpdateFactory");

            var localVarPath = "./factories/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (withStorageProvider != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "with_storage_provider", withStorageProvider)); // query parameter
            if (updateFactoryBody != null && updateFactoryBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateFactoryBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateFactoryBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFactory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Factory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Factory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Factory)));
        }

        /// <summary>
        /// Updates a Factory&#39;s notification settings. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="cloudNotificationSettingsBody"></param>
        /// <returns>CloudNotificationSettings</returns>
        public CloudNotificationSettings UpdateNotifications (string factoryId, CloudNotificationSettings cloudNotificationSettingsBody)
        {
             ApiResponse<CloudNotificationSettings> localVarResponse = UpdateNotificationsWithHttpInfo(factoryId, cloudNotificationSettingsBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Factory&#39;s notification settings. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="cloudNotificationSettingsBody"></param>
        /// <returns>ApiResponse of CloudNotificationSettings</returns>
        public ApiResponse< CloudNotificationSettings > UpdateNotificationsWithHttpInfo (string factoryId, CloudNotificationSettings cloudNotificationSettingsBody)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->UpdateNotifications");
            // verify the required parameter 'cloudNotificationSettingsBody' is set
            if (cloudNotificationSettingsBody == null)
                throw new ApiException(400, "Missing required parameter 'cloudNotificationSettingsBody' when calling FlipApi->UpdateNotifications");

            var localVarPath = "./notifications.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (cloudNotificationSettingsBody != null && cloudNotificationSettingsBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cloudNotificationSettingsBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloudNotificationSettingsBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudNotificationSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CloudNotificationSettings) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudNotificationSettings)));
        }

        /// <summary>
        /// Updates a Factory&#39;s notification settings. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="cloudNotificationSettingsBody"></param>
        /// <returns>Task of CloudNotificationSettings</returns>
        public async System.Threading.Tasks.Task<CloudNotificationSettings> UpdateNotificationsAsync (string factoryId, CloudNotificationSettings cloudNotificationSettingsBody)
        {
             ApiResponse<CloudNotificationSettings> localVarResponse = await UpdateNotificationsAsyncWithHttpInfo(factoryId, cloudNotificationSettingsBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a Factory&#39;s notification settings. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="cloudNotificationSettingsBody"></param>
        /// <returns>Task of ApiResponse (CloudNotificationSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudNotificationSettings>> UpdateNotificationsAsyncWithHttpInfo (string factoryId, CloudNotificationSettings cloudNotificationSettingsBody)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->UpdateNotifications");
            // verify the required parameter 'cloudNotificationSettingsBody' is set
            if (cloudNotificationSettingsBody == null)
                throw new ApiException(400, "Missing required parameter 'cloudNotificationSettingsBody' when calling FlipApi->UpdateNotifications");

            var localVarPath = "./notifications.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (cloudNotificationSettingsBody != null && cloudNotificationSettingsBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cloudNotificationSettingsBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloudNotificationSettingsBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudNotificationSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CloudNotificationSettings) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudNotificationSettings)));
        }

        /// <summary>
        /// Updates a given Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Profile</returns>
        public Profile UpdateProfile (string id, string factoryId, ProfileBody updateProfileBody, bool? excludeAdvancedServices = null, bool? expand = null)
        {
             ApiResponse<Profile> localVarResponse = UpdateProfileWithHttpInfo(id, factoryId, updateProfileBody, excludeAdvancedServices, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a given Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of Profile</returns>
        public ApiResponse< Profile > UpdateProfileWithHttpInfo (string id, string factoryId, ProfileBody updateProfileBody, bool? excludeAdvancedServices = null, bool? expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->UpdateProfile");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->UpdateProfile");
            // verify the required parameter 'updateProfileBody' is set
            if (updateProfileBody == null)
                throw new ApiException(400, "Missing required parameter 'updateProfileBody' when calling FlipApi->UpdateProfile");

            var localVarPath = "./profiles/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (excludeAdvancedServices != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_advanced_services", excludeAdvancedServices)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (updateProfileBody != null && updateProfileBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateProfileBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateProfileBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Profile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Profile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Profile)));
        }

        /// <summary>
        /// Updates a given Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Task of Profile</returns>
        public async System.Threading.Tasks.Task<Profile> UpdateProfileAsync (string id, string factoryId, ProfileBody updateProfileBody, bool? excludeAdvancedServices = null, bool? expand = null)
        {
             ApiResponse<Profile> localVarResponse = await UpdateProfileAsyncWithHttpInfo(id, factoryId, updateProfileBody, excludeAdvancedServices, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a given Profile 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="updateProfileBody"></param>
        /// <param name="excludeAdvancedServices"> (optional)</param>
        /// <param name="expand">If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (Profile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Profile>> UpdateProfileAsyncWithHttpInfo (string id, string factoryId, ProfileBody updateProfileBody, bool? excludeAdvancedServices = null, bool? expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->UpdateProfile");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->UpdateProfile");
            // verify the required parameter 'updateProfileBody' is set
            if (updateProfileBody == null)
                throw new ApiException(400, "Missing required parameter 'updateProfileBody' when calling FlipApi->UpdateProfile");

            var localVarPath = "./profiles/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (excludeAdvancedServices != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_advanced_services", excludeAdvancedServices)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (updateProfileBody != null && updateProfileBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateProfileBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateProfileBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Profile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Profile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Profile)));
        }

        /// <summary>
        /// Creates an upload session. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>UploadSession</returns>
        public UploadSession UploadVideo (string factoryId, VideoUploadBody videoUploadBody)
        {
             ApiResponse<UploadSession> localVarResponse = UploadVideoWithHttpInfo(factoryId, videoUploadBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an upload session. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>ApiResponse of UploadSession</returns>
        public ApiResponse< UploadSession > UploadVideoWithHttpInfo (string factoryId, VideoUploadBody videoUploadBody)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->UploadVideo");
            // verify the required parameter 'videoUploadBody' is set
            if (videoUploadBody == null)
                throw new ApiException(400, "Missing required parameter 'videoUploadBody' when calling FlipApi->UploadVideo");

            var localVarPath = "./videos/upload.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (videoUploadBody != null && videoUploadBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(videoUploadBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoUploadBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadVideo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UploadSession) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSession)));
        }

        /// <summary>
        /// Creates an upload session. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>Task of UploadSession</returns>
        public async System.Threading.Tasks.Task<UploadSession> UploadVideoAsync (string factoryId, VideoUploadBody videoUploadBody)
        {
             ApiResponse<UploadSession> localVarResponse = await UploadVideoAsyncWithHttpInfo(factoryId, videoUploadBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an upload session. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>Task of ApiResponse (UploadSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadSession>> UploadVideoAsyncWithHttpInfo (string factoryId, VideoUploadBody videoUploadBody)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->UploadVideo");
            // verify the required parameter 'videoUploadBody' is set
            if (videoUploadBody == null)
                throw new ApiException(400, "Missing required parameter 'videoUploadBody' when calling FlipApi->UploadVideo");

            var localVarPath = "./videos/upload.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (videoUploadBody != null && videoUploadBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(videoUploadBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoUploadBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadVideo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UploadSession) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSession)));
        }

        /// <summary>
        /// Returns a Video object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Video</returns>
        public Video Video (string id, string factoryId)
        {
             ApiResponse<Video> localVarResponse = VideoWithHttpInfo(id, factoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a Video object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of Video</returns>
        public ApiResponse< Video > VideoWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->Video");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Video");

            var localVarPath = "./videos/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Video", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Video) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Video)));
        }

        /// <summary>
        /// Returns a Video object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of Video</returns>
        public async System.Threading.Tasks.Task<Video> VideoAsync (string id, string factoryId)
        {
             ApiResponse<Video> localVarResponse = await VideoAsyncWithHttpInfo(id, factoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a Video object. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Video>> VideoAsyncWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->Video");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Video");

            var localVarPath = "./videos/{id}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Video", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Video>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Video) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Video)));
        }

        /// <summary>
        /// Returns a list of Encodings that belong to a Video. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>PaginatedEncodingsCollection</returns>
        public PaginatedEncodingsCollection VideoEncodings (string id, string factoryId, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null)
        {
             ApiResponse<PaginatedEncodingsCollection> localVarResponse = VideoEncodingsWithHttpInfo(id, factoryId, page, perPage, screenshots, preciseStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of Encodings that belong to a Video. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>ApiResponse of PaginatedEncodingsCollection</returns>
        public ApiResponse< PaginatedEncodingsCollection > VideoEncodingsWithHttpInfo (string id, string factoryId, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->VideoEncodings");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->VideoEncodings");

            var localVarPath = "./videos/{id}/encodings.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (screenshots != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "screenshots", screenshots)); // query parameter
            if (preciseStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "precise_status", preciseStatus)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoEncodings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedEncodingsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedEncodingsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedEncodingsCollection)));
        }

        /// <summary>
        /// Returns a list of Encodings that belong to a Video. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of PaginatedEncodingsCollection</returns>
        public async System.Threading.Tasks.Task<PaginatedEncodingsCollection> VideoEncodingsAsync (string id, string factoryId, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null)
        {
             ApiResponse<PaginatedEncodingsCollection> localVarResponse = await VideoEncodingsAsyncWithHttpInfo(id, factoryId, page, perPage, screenshots, preciseStatus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of Encodings that belong to a Video. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <param name="screenshots">Determines whether the response will include screenshots. By default this is not set. (optional)</param>
        /// <param name="preciseStatus">Determines whether the response will include a precise status. By default this is not set. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedEncodingsCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedEncodingsCollection>> VideoEncodingsAsyncWithHttpInfo (string id, string factoryId, int? page = null, int? perPage = null, bool? screenshots = null, bool? preciseStatus = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->VideoEncodings");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->VideoEncodings");

            var localVarPath = "./videos/{id}/encodings.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (screenshots != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "screenshots", screenshots)); // query parameter
            if (preciseStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "precise_status", preciseStatus)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoEncodings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedEncodingsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedEncodingsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedEncodingsCollection)));
        }

        /// <summary>
        /// Returns a Video&#39;s metadata 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>VideoMetadata</returns>
        public VideoMetadata VideoMetadata (string id, string factoryId)
        {
             ApiResponse<VideoMetadata> localVarResponse = VideoMetadataWithHttpInfo(id, factoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a Video&#39;s metadata 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>ApiResponse of VideoMetadata</returns>
        public ApiResponse< VideoMetadata > VideoMetadataWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->VideoMetadata");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->VideoMetadata");

            var localVarPath = "./videos/{id}/metadata.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (VideoMetadata) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoMetadata)));
        }

        /// <summary>
        /// Returns a Video&#39;s metadata 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of VideoMetadata</returns>
        public async System.Threading.Tasks.Task<VideoMetadata> VideoMetadataAsync (string id, string factoryId)
        {
             ApiResponse<VideoMetadata> localVarResponse = await VideoMetadataAsyncWithHttpInfo(id, factoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a Video&#39;s metadata 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of a Video.</param>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <returns>Task of ApiResponse (VideoMetadata)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VideoMetadata>> VideoMetadataAsyncWithHttpInfo (string id, string factoryId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlipApi->VideoMetadata");
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->VideoMetadata");

            var localVarPath = "./videos/{id}/metadata.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (VideoMetadata) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoMetadata)));
        }

        /// <summary>
        /// Returns a collection of Video objects. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>PaginatedVideoCollection</returns>
        public PaginatedVideoCollection Videos (string factoryId, int? page = null, int? perPage = null)
        {
             ApiResponse<PaginatedVideoCollection> localVarResponse = VideosWithHttpInfo(factoryId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of Video objects. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>ApiResponse of PaginatedVideoCollection</returns>
        public ApiResponse< PaginatedVideoCollection > VideosWithHttpInfo (string factoryId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Videos");

            var localVarPath = "./videos.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Videos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedVideoCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedVideoCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedVideoCollection)));
        }

        /// <summary>
        /// Returns a collection of Video objects. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of PaginatedVideoCollection</returns>
        public async System.Threading.Tasks.Task<PaginatedVideoCollection> VideosAsync (string factoryId, int? page = null, int? perPage = null)
        {
             ApiResponse<PaginatedVideoCollection> localVarResponse = await VideosAsyncWithHttpInfo(factoryId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of Video objects. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedVideoCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedVideoCollection>> VideosAsyncWithHttpInfo (string factoryId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Videos");

            var localVarPath = "./videos.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Videos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedVideoCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedVideoCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedVideoCollection)));
        }

        /// <summary>
        /// Returns a collection of Workflows that belong to a Factory. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>PaginatedWorkflowsCollection</returns>
        public PaginatedWorkflowsCollection Workflows (string factoryId, int? page = null, int? perPage = null)
        {
             ApiResponse<PaginatedWorkflowsCollection> localVarResponse = WorkflowsWithHttpInfo(factoryId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of Workflows that belong to a Factory. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>ApiResponse of PaginatedWorkflowsCollection</returns>
        public ApiResponse< PaginatedWorkflowsCollection > WorkflowsWithHttpInfo (string factoryId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Workflows");

            var localVarPath = "./workflows.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Workflows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedWorkflowsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedWorkflowsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedWorkflowsCollection)));
        }

        /// <summary>
        /// Returns a collection of Workflows that belong to a Factory. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of PaginatedWorkflowsCollection</returns>
        public async System.Threading.Tasks.Task<PaginatedWorkflowsCollection> WorkflowsAsync (string factoryId, int? page = null, int? perPage = null)
        {
             ApiResponse<PaginatedWorkflowsCollection> localVarResponse = await WorkflowsAsyncWithHttpInfo(factoryId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of Workflows that belong to a Factory. 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Flip.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factoryId">Id of a Factory.</param>
        /// <param name="page">A page to be fetched. Default is &#x60;1&#x60;. (optional)</param>
        /// <param name="perPage">A number of results per page. Default is &#x60;100&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedWorkflowsCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedWorkflowsCollection>> WorkflowsAsyncWithHttpInfo (string factoryId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'factoryId' is set
            if (factoryId == null)
                throw new ApiException(400, "Missing required parameter 'factoryId' when calling FlipApi->Workflows");

            var localVarPath = "./workflows.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (factoryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "factory_id", factoryId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Workflows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedWorkflowsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedWorkflowsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedWorkflowsCollection)));
        }

    }
}
