/* 
 * Flip API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.1
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Telestream.Cloud.Flip.Client;
using Telestream.Cloud.Flip.Api;
using Telestream.Cloud.Flip.Model;

namespace Telestream.Cloud.Flip.Test
{
    /// <summary>
    ///  Class for testing FlipApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FlipApiTests
    {
        private FlipApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FlipApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FlipApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FlipApi
            //Assert.IsInstanceOfType(typeof(FlipApi), instance, "instance is a FlipApi");
        }

        
        /// <summary>
        /// Test CancelEncoding
        /// </summary>
        [Test]
        public void CancelEncodingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //var response = instance.CancelEncoding(id, factoryId);
            //Assert.IsInstanceOf<CanceledResponse> (response, "response is CanceledResponse");
        }
        
        /// <summary>
        /// Test CancelVideo
        /// </summary>
        [Test]
        public void CancelVideoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //var response = instance.CancelVideo(id, factoryId);
            //Assert.IsInstanceOf<CanceledResponse> (response, "response is CanceledResponse");
        }
        
        /// <summary>
        /// Test CopyProfile
        /// </summary>
        [Test]
        public void CopyProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //CopyProfileBody copyProfileBody = null;
            //bool? expand = null;
            //var response = instance.CopyProfile(id, factoryId, copyProfileBody, expand);
            //Assert.IsInstanceOf<Profile> (response, "response is Profile");
        }
        
        /// <summary>
        /// Test CreateEncoding
        /// </summary>
        [Test]
        public void CreateEncodingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string factoryId = null;
            //CreateEncodingBody createEncodingBody = null;
            //bool? screenshots = null;
            //bool? preciseStatus = null;
            //var response = instance.CreateEncoding(factoryId, createEncodingBody, screenshots, preciseStatus);
            //Assert.IsInstanceOf<Encoding> (response, "response is Encoding");
        }
        
        /// <summary>
        /// Test CreateFactory
        /// </summary>
        [Test]
        public void CreateFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Factory createFactoryBody = null;
            //bool? withStorageProvider = null;
            //var response = instance.CreateFactory(createFactoryBody, withStorageProvider);
            //Assert.IsInstanceOf<Factory> (response, "response is Factory");
        }
        
        /// <summary>
        /// Test CreateProfile
        /// </summary>
        [Test]
        public void CreateProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string factoryId = null;
            //ProfileBody createProfileBody = null;
            //bool? excludeAdvancedServices = null;
            //bool? expand = null;
            //var response = instance.CreateProfile(factoryId, createProfileBody, excludeAdvancedServices, expand);
            //Assert.IsInstanceOf<Profile> (response, "response is Profile");
        }
        
        /// <summary>
        /// Test CreateVideo
        /// </summary>
        [Test]
        public void CreateVideoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string factoryId = null;
            //CreateVideoBody createVideoBody = null;
            //var response = instance.CreateVideo(factoryId, createVideoBody);
            //Assert.IsInstanceOf<Video> (response, "response is Video");
        }
        
        /// <summary>
        /// Test CreateWorkorder
        /// </summary>
        [Test]
        public void CreateWorkorderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string factoryId = null;
            //string profileId = null;
            //System.IO.Stream file = null;
            //string sourceUrl = null;
            //instance.CreateWorkorder(factoryId, profileId, file, sourceUrl);
            
        }
        
        /// <summary>
        /// Test DeleteEncoding
        /// </summary>
        [Test]
        public void DeleteEncodingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //var response = instance.DeleteEncoding(id, factoryId);
            //Assert.IsInstanceOf<DeletedResponse> (response, "response is DeletedResponse");
        }
        
        /// <summary>
        /// Test DeleteProfile
        /// </summary>
        [Test]
        public void DeleteProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //var response = instance.DeleteProfile(id, factoryId);
            //Assert.IsInstanceOf<DeletedResponse> (response, "response is DeletedResponse");
        }
        
        /// <summary>
        /// Test DeleteVideo
        /// </summary>
        [Test]
        public void DeleteVideoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //var response = instance.DeleteVideo(id, factoryId);
            //Assert.IsInstanceOf<DeletedResponse> (response, "response is DeletedResponse");
        }
        
        /// <summary>
        /// Test DeleteVideoSource
        /// </summary>
        [Test]
        public void DeleteVideoSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //var response = instance.DeleteVideoSource(id, factoryId);
            //Assert.IsInstanceOf<DeletedResponse> (response, "response is DeletedResponse");
        }
        
        /// <summary>
        /// Test Encoding
        /// </summary>
        [Test]
        public void EncodingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //bool? screenshots = null;
            //bool? preciseStatus = null;
            //var response = instance.Encoding(id, factoryId, screenshots, preciseStatus);
            //Assert.IsInstanceOf<Encoding> (response, "response is Encoding");
        }
        
        /// <summary>
        /// Test Encodings
        /// </summary>
        [Test]
        public void EncodingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string factoryId = null;
            //string videoId = null;
            //string status = null;
            //string profileId = null;
            //string profileName = null;
            //int? page = null;
            //int? perPage = null;
            //bool? screenshots = null;
            //bool? preciseStatus = null;
            //var response = instance.Encodings(factoryId, videoId, status, profileId, profileName, page, perPage, screenshots, preciseStatus);
            //Assert.IsInstanceOf<PaginatedEncodingsCollection> (response, "response is PaginatedEncodingsCollection");
        }
        
        /// <summary>
        /// Test EncodingsCount
        /// </summary>
        [Test]
        public void EncodingsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string factoryId = null;
            //var response = instance.EncodingsCount(factoryId);
            //Assert.IsInstanceOf<CountResponse> (response, "response is CountResponse");
        }
        
        /// <summary>
        /// Test Factories
        /// </summary>
        [Test]
        public void FactoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //bool? withStorageProvider = null;
            //var response = instance.Factories(page, perPage, withStorageProvider);
            //Assert.IsInstanceOf<PaginatedFactoryCollection> (response, "response is PaginatedFactoryCollection");
        }
        
        /// <summary>
        /// Test Factory
        /// </summary>
        [Test]
        public void FactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? withStorageProvider = null;
            //var response = instance.Factory(id, withStorageProvider);
            //Assert.IsInstanceOf<Factory> (response, "response is Factory");
        }
        
        /// <summary>
        /// Test Profile
        /// </summary>
        [Test]
        public void ProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idOrName = null;
            //string factoryId = null;
            //bool? expand = null;
            //var response = instance.Profile(idOrName, factoryId, expand);
            //Assert.IsInstanceOf<Profile> (response, "response is Profile");
        }
        
        /// <summary>
        /// Test ProfileEncodings
        /// </summary>
        [Test]
        public void ProfileEncodingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idOrName = null;
            //string factoryId = null;
            //var response = instance.ProfileEncodings(idOrName, factoryId);
            //Assert.IsInstanceOf<PaginatedEncodingsCollection> (response, "response is PaginatedEncodingsCollection");
        }
        
        /// <summary>
        /// Test Profiles
        /// </summary>
        [Test]
        public void ProfilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string factoryId = null;
            //bool? excludeAdvancedServices = null;
            //bool? expand = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.Profiles(factoryId, excludeAdvancedServices, expand, page, perPage);
            //Assert.IsInstanceOf<PaginatedProfilesCollection> (response, "response is PaginatedProfilesCollection");
        }
        
        /// <summary>
        /// Test QueuedVideos
        /// </summary>
        [Test]
        public void QueuedVideosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string factoryId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.QueuedVideos(factoryId, page, perPage);
            //Assert.IsInstanceOf<PaginatedVideoCollection> (response, "response is PaginatedVideoCollection");
        }
        
        /// <summary>
        /// Test ResubmitVideo
        /// </summary>
        [Test]
        public void ResubmitVideoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string factoryId = null;
            //ResubmitVideoBody resubmitVideoBody = null;
            //instance.ResubmitVideo(factoryId, resubmitVideoBody);
            
        }
        
        /// <summary>
        /// Test RetryEncoding
        /// </summary>
        [Test]
        public void RetryEncodingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //var response = instance.RetryEncoding(id, factoryId);
            //Assert.IsInstanceOf<RetriedResponse> (response, "response is RetriedResponse");
        }
        
        /// <summary>
        /// Test SignedEncodingUrl
        /// </summary>
        [Test]
        public void SignedEncodingUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //int? expires = null;
            //var response = instance.SignedEncodingUrl(id, factoryId, expires);
            //Assert.IsInstanceOf<EncodingSignedUrl> (response, "response is EncodingSignedUrl");
        }
        
        /// <summary>
        /// Test SignedEncodingUrls
        /// </summary>
        [Test]
        public void SignedEncodingUrlsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //var response = instance.SignedEncodingUrls(id, factoryId);
            //Assert.IsInstanceOf<EncodingSignedUrls> (response, "response is EncodingSignedUrls");
        }
        
        /// <summary>
        /// Test SignedVideoUrl
        /// </summary>
        [Test]
        public void SignedVideoUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //var response = instance.SignedVideoUrl(id, factoryId);
            //Assert.IsInstanceOf<SignedVideoUrl> (response, "response is SignedVideoUrl");
        }
        
        /// <summary>
        /// Test UpdateEncoding
        /// </summary>
        [Test]
        public void UpdateEncodingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //UpdateEncodingBody updateEncodingBody = null;
            //bool? screenshots = null;
            //bool? preciseStatus = null;
            //var response = instance.UpdateEncoding(id, factoryId, updateEncodingBody, screenshots, preciseStatus);
            //Assert.IsInstanceOf<Encoding> (response, "response is Encoding");
        }
        
        /// <summary>
        /// Test UpdateFactory
        /// </summary>
        [Test]
        public void UpdateFactoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Factory updateFactoryBody = null;
            //bool? withStorageProvider = null;
            //var response = instance.UpdateFactory(id, updateFactoryBody, withStorageProvider);
            //Assert.IsInstanceOf<Factory> (response, "response is Factory");
        }
        
        /// <summary>
        /// Test UpdateProfile
        /// </summary>
        [Test]
        public void UpdateProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //ProfileBody updateProfileBody = null;
            //bool? excludeAdvancedServices = null;
            //bool? expand = null;
            //var response = instance.UpdateProfile(id, factoryId, updateProfileBody, excludeAdvancedServices, expand);
            //Assert.IsInstanceOf<Profile> (response, "response is Profile");
        }
        
        /// <summary>
        /// Test UploadVideo
        /// </summary>
        [Test]
        public void UploadVideoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string factoryId = null;
            //VideoUploadBody videoUploadBody = null;
            //var response = instance.UploadVideo(factoryId, videoUploadBody);
            //Assert.IsInstanceOf<UploadSession> (response, "response is UploadSession");
        }
        
        /// <summary>
        /// Test Video
        /// </summary>
        [Test]
        public void VideoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //var response = instance.Video(id, factoryId);
            //Assert.IsInstanceOf<Video> (response, "response is Video");
        }
        
        /// <summary>
        /// Test VideoEncodings
        /// </summary>
        [Test]
        public void VideoEncodingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //int? page = null;
            //int? perPage = null;
            //bool? screenshots = null;
            //bool? preciseStatus = null;
            //var response = instance.VideoEncodings(id, factoryId, page, perPage, screenshots, preciseStatus);
            //Assert.IsInstanceOf<PaginatedEncodingsCollection> (response, "response is PaginatedEncodingsCollection");
        }
        
        /// <summary>
        /// Test VideoMetadata
        /// </summary>
        [Test]
        public void VideoMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string factoryId = null;
            //var response = instance.VideoMetadata(id, factoryId);
            //Assert.IsInstanceOf<VideoMetadata> (response, "response is VideoMetadata");
        }
        
        /// <summary>
        /// Test Videos
        /// </summary>
        [Test]
        public void VideosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string factoryId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.Videos(factoryId, page, perPage);
            //Assert.IsInstanceOf<PaginatedVideoCollection> (response, "response is PaginatedVideoCollection");
        }
        
        /// <summary>
        /// Test Workflows
        /// </summary>
        [Test]
        public void WorkflowsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string factoryId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.Workflows(factoryId, page, perPage);
            //Assert.IsInstanceOf<PaginatedWorkflowsCollection> (response, "response is PaginatedWorkflowsCollection");
        }
        
    }

}
