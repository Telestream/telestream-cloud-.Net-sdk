/* 
 * Qc API
 *
 * QC API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Telestream.Cloud.Qc.Client;
using Telestream.Cloud.Qc.Model;

namespace Telestream.Cloud.Qc.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQcApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns></returns>
        void CancelJob (string project, string job);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelJobWithHttpInfo (string project, string job);
        /// <summary>
        /// Create a new job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="data"></param>
        /// <returns>Job</returns>
        Job CreateJob (string project, JobData data);

        /// <summary>
        /// Create a new job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> CreateJobWithHttpInfo (string project, JobData data);
        /// <summary>
        /// Create a new project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"> (optional)</param>
        /// <returns>Project</returns>
        Project CreateProject (Data data = null);

        /// <summary>
        /// Create a new project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> CreateProjectWithHttpInfo (Data data = null);
        /// <summary>
        /// Get QC job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Job</returns>
        Job GetJob (string project, string job);

        /// <summary>
        /// Get QC job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> GetJobWithHttpInfo (string project, string job);
        /// <summary>
        /// Get project by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <returns>Project</returns>
        Project GetProject (string project);

        /// <summary>
        /// Get project by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> GetProjectWithHttpInfo (string project);
        /// <summary>
        /// Get jobs form projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="expand">Expand details of job (optional)</param>
        /// <param name="status">Filter jobs by status (optional)</param>
        /// <param name="perPage">Limit number of listed jobs (optional, default to 30)</param>
        /// <param name="page">Index of jobs page to be listed (optional)</param>
        /// <returns>JobsCollection</returns>
        JobsCollection ListJobs (string project, bool? expand = null, string status = null, int? perPage = null, int? page = null);

        /// <summary>
        /// Get jobs form projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="expand">Expand details of job (optional)</param>
        /// <param name="status">Filter jobs by status (optional)</param>
        /// <param name="perPage">Limit number of listed jobs (optional, default to 30)</param>
        /// <param name="page">Index of jobs page to be listed (optional)</param>
        /// <returns>ApiResponse of JobsCollection</returns>
        ApiResponse<JobsCollection> ListJobsWithHttpInfo (string project, bool? expand = null, string status = null, int? perPage = null, int? page = null);
        /// <summary>
        /// List all projects for an account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Project&gt;</returns>
        List<Project> ListProjects ();

        /// <summary>
        /// List all projects for an account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Project&gt;</returns>
        ApiResponse<List<Project>> ListProjectsWithHttpInfo ();
        /// <summary>
        /// Modify project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Project</returns>
        Project ModifyProject (string project, Data1 data = null);

        /// <summary>
        /// Modify project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> ModifyProjectWithHttpInfo (string project, Data1 data = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Proxy</returns>
        Proxy Proxy (string project, string job);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>ApiResponse of Proxy</returns>
        ApiResponse<Proxy> ProxyWithHttpInfo (string project, string job);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns></returns>
        void RemoveJob (string project, string job);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveJobWithHttpInfo (string project, string job);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns></returns>
        void RemoveProject (string project);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveProjectWithHttpInfo (string project);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> SignedUrls (string project, string job);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> SignedUrlsWithHttpInfo (string project, string job);
        /// <summary>
        /// Creates an upload session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>UploadSession</returns>
        UploadSession UploadVideo (string project, VideoUploadBody videoUploadBody);

        /// <summary>
        /// Creates an upload session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>ApiResponse of UploadSession</returns>
        ApiResponse<UploadSession> UploadVideoWithHttpInfo (string project, VideoUploadBody videoUploadBody);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelJobAsync (string project, string job);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelJobAsyncWithHttpInfo (string project, string job);
        /// <summary>
        /// Create a new job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="data"></param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> CreateJobAsync (string project, JobData data);

        /// <summary>
        /// Create a new job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> CreateJobAsyncWithHttpInfo (string project, JobData data);
        /// <summary>
        /// Create a new project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> CreateProjectAsync (Data data = null);

        /// <summary>
        /// Create a new project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> CreateProjectAsyncWithHttpInfo (Data data = null);
        /// <summary>
        /// Get QC job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> GetJobAsync (string project, string job);

        /// <summary>
        /// Get QC job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> GetJobAsyncWithHttpInfo (string project, string job);
        /// <summary>
        /// Get project by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> GetProjectAsync (string project);

        /// <summary>
        /// Get project by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> GetProjectAsyncWithHttpInfo (string project);
        /// <summary>
        /// Get jobs form projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="expand">Expand details of job (optional)</param>
        /// <param name="status">Filter jobs by status (optional)</param>
        /// <param name="perPage">Limit number of listed jobs (optional, default to 30)</param>
        /// <param name="page">Index of jobs page to be listed (optional)</param>
        /// <returns>Task of JobsCollection</returns>
        System.Threading.Tasks.Task<JobsCollection> ListJobsAsync (string project, bool? expand = null, string status = null, int? perPage = null, int? page = null);

        /// <summary>
        /// Get jobs form projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="expand">Expand details of job (optional)</param>
        /// <param name="status">Filter jobs by status (optional)</param>
        /// <param name="perPage">Limit number of listed jobs (optional, default to 30)</param>
        /// <param name="page">Index of jobs page to be listed (optional)</param>
        /// <returns>Task of ApiResponse (JobsCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobsCollection>> ListJobsAsyncWithHttpInfo (string project, bool? expand = null, string status = null, int? perPage = null, int? page = null);
        /// <summary>
        /// List all projects for an account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Project&gt;</returns>
        System.Threading.Tasks.Task<List<Project>> ListProjectsAsync ();

        /// <summary>
        /// List all projects for an account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Project&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Project>>> ListProjectsAsyncWithHttpInfo ();
        /// <summary>
        /// Modify project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> ModifyProjectAsync (string project, Data1 data = null);

        /// <summary>
        /// Modify project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> ModifyProjectAsyncWithHttpInfo (string project, Data1 data = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of Proxy</returns>
        System.Threading.Tasks.Task<Proxy> ProxyAsync (string project, string job);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of ApiResponse (Proxy)</returns>
        System.Threading.Tasks.Task<ApiResponse<Proxy>> ProxyAsyncWithHttpInfo (string project, string job);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveJobAsync (string project, string job);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveJobAsyncWithHttpInfo (string project, string job);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveProjectAsync (string project);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveProjectAsyncWithHttpInfo (string project);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> SignedUrlsAsync (string project, string job);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> SignedUrlsAsyncWithHttpInfo (string project, string job);
        /// <summary>
        /// Creates an upload session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>Task of UploadSession</returns>
        System.Threading.Tasks.Task<UploadSession> UploadVideoAsync (string project, VideoUploadBody videoUploadBody);

        /// <summary>
        /// Creates an upload session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>Task of ApiResponse (UploadSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadSession>> UploadVideoAsyncWithHttpInfo (string project, VideoUploadBody videoUploadBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QcApi : IQcApi
    {
        private Telestream.Cloud.Qc.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QcApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QcApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Telestream.Cloud.Qc.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QcApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QcApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Telestream.Cloud.Qc.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Telestream.Cloud.Qc.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns></returns>
        public void CancelJob (string project, string job)
        {
             CancelJobWithHttpInfo(project, job);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelJobWithHttpInfo (string project, string job)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->CancelJob");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling QcApi->CancelJob");

            var localVarPath = "./projects/{project}/jobs/{job}/cancel.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (job != null) localVarPathParams.Add("job", Configuration.ApiClient.ParameterToString(job)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelJobAsync (string project, string job)
        {
             await CancelJobAsyncWithHttpInfo(project, job);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelJobAsyncWithHttpInfo (string project, string job)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->CancelJob");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling QcApi->CancelJob");

            var localVarPath = "./projects/{project}/jobs/{job}/cancel.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (job != null) localVarPathParams.Add("job", Configuration.ApiClient.ParameterToString(job)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new job 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="data"></param>
        /// <returns>Job</returns>
        public Job CreateJob (string project, JobData data)
        {
             ApiResponse<Job> localVarResponse = CreateJobWithHttpInfo(project, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new job 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > CreateJobWithHttpInfo (string project, JobData data)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->CreateJob");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling QcApi->CreateJob");

            var localVarPath = "./projects/{project}/jobs.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Create a new job 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="data"></param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> CreateJobAsync (string project, JobData data)
        {
             ApiResponse<Job> localVarResponse = await CreateJobAsyncWithHttpInfo(project, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new job 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> CreateJobAsyncWithHttpInfo (string project, JobData data)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->CreateJob");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling QcApi->CreateJob");

            var localVarPath = "./projects/{project}/jobs.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Create a new project 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"> (optional)</param>
        /// <returns>Project</returns>
        public Project CreateProject (Data data = null)
        {
             ApiResponse<Project> localVarResponse = CreateProjectWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new project 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Project</returns>
        public ApiResponse< Project > CreateProjectWithHttpInfo (Data data = null)
        {

            var localVarPath = "./projects.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Project>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Project) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
        }

        /// <summary>
        /// Create a new project 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> CreateProjectAsync (Data data = null)
        {
             ApiResponse<Project> localVarResponse = await CreateProjectAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new project 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Project>> CreateProjectAsyncWithHttpInfo (Data data = null)
        {

            var localVarPath = "./projects.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Project>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Project) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
        }

        /// <summary>
        /// Get QC job 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Job</returns>
        public Job GetJob (string project, string job)
        {
             ApiResponse<Job> localVarResponse = GetJobWithHttpInfo(project, job);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get QC job 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > GetJobWithHttpInfo (string project, string job)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->GetJob");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling QcApi->GetJob");

            var localVarPath = "./projects/{project}/jobs/{job}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (job != null) localVarPathParams.Add("job", Configuration.ApiClient.ParameterToString(job)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Get QC job 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> GetJobAsync (string project, string job)
        {
             ApiResponse<Job> localVarResponse = await GetJobAsyncWithHttpInfo(project, job);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get QC job 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> GetJobAsyncWithHttpInfo (string project, string job)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->GetJob");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling QcApi->GetJob");

            var localVarPath = "./projects/{project}/jobs/{job}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (job != null) localVarPathParams.Add("job", Configuration.ApiClient.ParameterToString(job)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Get project by Id 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <returns>Project</returns>
        public Project GetProject (string project)
        {
             ApiResponse<Project> localVarResponse = GetProjectWithHttpInfo(project);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get project by Id 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <returns>ApiResponse of Project</returns>
        public ApiResponse< Project > GetProjectWithHttpInfo (string project)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->GetProject");

            var localVarPath = "./projects/{project}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Project>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Project) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
        }

        /// <summary>
        /// Get project by Id 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> GetProjectAsync (string project)
        {
             ApiResponse<Project> localVarResponse = await GetProjectAsyncWithHttpInfo(project);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get project by Id 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Project>> GetProjectAsyncWithHttpInfo (string project)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->GetProject");

            var localVarPath = "./projects/{project}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Project>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Project) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
        }

        /// <summary>
        /// Get jobs form projects 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="expand">Expand details of job (optional)</param>
        /// <param name="status">Filter jobs by status (optional)</param>
        /// <param name="perPage">Limit number of listed jobs (optional, default to 30)</param>
        /// <param name="page">Index of jobs page to be listed (optional)</param>
        /// <returns>JobsCollection</returns>
        public JobsCollection ListJobs (string project, bool? expand = null, string status = null, int? perPage = null, int? page = null)
        {
             ApiResponse<JobsCollection> localVarResponse = ListJobsWithHttpInfo(project, expand, status, perPage, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get jobs form projects 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="expand">Expand details of job (optional)</param>
        /// <param name="status">Filter jobs by status (optional)</param>
        /// <param name="perPage">Limit number of listed jobs (optional, default to 30)</param>
        /// <param name="page">Index of jobs page to be listed (optional)</param>
        /// <returns>ApiResponse of JobsCollection</returns>
        public ApiResponse< JobsCollection > ListJobsWithHttpInfo (string project, bool? expand = null, string status = null, int? perPage = null, int? page = null)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->ListJobs");

            var localVarPath = "./projects/{project}/jobs.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (status != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (JobsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobsCollection)));
        }

        /// <summary>
        /// Get jobs form projects 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="expand">Expand details of job (optional)</param>
        /// <param name="status">Filter jobs by status (optional)</param>
        /// <param name="perPage">Limit number of listed jobs (optional, default to 30)</param>
        /// <param name="page">Index of jobs page to be listed (optional)</param>
        /// <returns>Task of JobsCollection</returns>
        public async System.Threading.Tasks.Task<JobsCollection> ListJobsAsync (string project, bool? expand = null, string status = null, int? perPage = null, int? page = null)
        {
             ApiResponse<JobsCollection> localVarResponse = await ListJobsAsyncWithHttpInfo(project, expand, status, perPage, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get jobs form projects 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="expand">Expand details of job (optional)</param>
        /// <param name="status">Filter jobs by status (optional)</param>
        /// <param name="perPage">Limit number of listed jobs (optional, default to 30)</param>
        /// <param name="page">Index of jobs page to be listed (optional)</param>
        /// <returns>Task of ApiResponse (JobsCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobsCollection>> ListJobsAsyncWithHttpInfo (string project, bool? expand = null, string status = null, int? perPage = null, int? page = null)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->ListJobs");

            var localVarPath = "./projects/{project}/jobs.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (status != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (JobsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobsCollection)));
        }

        /// <summary>
        /// List all projects for an account 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Project&gt;</returns>
        public List<Project> ListProjects ()
        {
             ApiResponse<List<Project>> localVarResponse = ListProjectsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all projects for an account 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Project&gt;</returns>
        public ApiResponse< List<Project> > ListProjectsWithHttpInfo ()
        {

            var localVarPath = "./projects.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Project>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Project>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Project>)));
        }

        /// <summary>
        /// List all projects for an account 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Project&gt;</returns>
        public async System.Threading.Tasks.Task<List<Project>> ListProjectsAsync ()
        {
             ApiResponse<List<Project>> localVarResponse = await ListProjectsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all projects for an account 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Project&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Project>>> ListProjectsAsyncWithHttpInfo ()
        {

            var localVarPath = "./projects.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Project>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Project>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Project>)));
        }

        /// <summary>
        /// Modify project 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Project</returns>
        public Project ModifyProject (string project, Data1 data = null)
        {
             ApiResponse<Project> localVarResponse = ModifyProjectWithHttpInfo(project, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify project 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Project</returns>
        public ApiResponse< Project > ModifyProjectWithHttpInfo (string project, Data1 data = null)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->ModifyProject");

            var localVarPath = "./projects/{project}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Project>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Project) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
        }

        /// <summary>
        /// Modify project 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> ModifyProjectAsync (string project, Data1 data = null)
        {
             ApiResponse<Project> localVarResponse = await ModifyProjectAsyncWithHttpInfo(project, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify project 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Project>> ModifyProjectAsyncWithHttpInfo (string project, Data1 data = null)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->ModifyProject");

            var localVarPath = "./projects/{project}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Project>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Project) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Proxy</returns>
        public Proxy Proxy (string project, string job)
        {
             ApiResponse<Proxy> localVarResponse = ProxyWithHttpInfo(project, job);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>ApiResponse of Proxy</returns>
        public ApiResponse< Proxy > ProxyWithHttpInfo (string project, string job)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->Proxy");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling QcApi->Proxy");

            var localVarPath = "./projects/{project}/jobs/{job}/proxy.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (job != null) localVarPathParams.Add("job", Configuration.ApiClient.ParameterToString(job)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Proxy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Proxy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Proxy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Proxy)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of Proxy</returns>
        public async System.Threading.Tasks.Task<Proxy> ProxyAsync (string project, string job)
        {
             ApiResponse<Proxy> localVarResponse = await ProxyAsyncWithHttpInfo(project, job);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of ApiResponse (Proxy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Proxy>> ProxyAsyncWithHttpInfo (string project, string job)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->Proxy");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling QcApi->Proxy");

            var localVarPath = "./projects/{project}/jobs/{job}/proxy.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (job != null) localVarPathParams.Add("job", Configuration.ApiClient.ParameterToString(job)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Proxy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Proxy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Proxy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Proxy)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns></returns>
        public void RemoveJob (string project, string job)
        {
             RemoveJobWithHttpInfo(project, job);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveJobWithHttpInfo (string project, string job)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->RemoveJob");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling QcApi->RemoveJob");

            var localVarPath = "./projects/{project}/jobs/{job}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (job != null) localVarPathParams.Add("job", Configuration.ApiClient.ParameterToString(job)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveJobAsync (string project, string job)
        {
             await RemoveJobAsyncWithHttpInfo(project, job);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveJobAsyncWithHttpInfo (string project, string job)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->RemoveJob");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling QcApi->RemoveJob");

            var localVarPath = "./projects/{project}/jobs/{job}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (job != null) localVarPathParams.Add("job", Configuration.ApiClient.ParameterToString(job)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns></returns>
        public void RemoveProject (string project)
        {
             RemoveProjectWithHttpInfo(project);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveProjectWithHttpInfo (string project)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->RemoveProject");

            var localVarPath = "./projects/{project}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveProjectAsync (string project)
        {
             await RemoveProjectAsyncWithHttpInfo(project);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveProjectAsyncWithHttpInfo (string project)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->RemoveProject");

            var localVarPath = "./projects/{project}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> SignedUrls (string project, string job)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = SignedUrlsWithHttpInfo(project, job);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public ApiResponse< Dictionary<string, string> > SignedUrlsWithHttpInfo (string project, string job)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->SignedUrls");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling QcApi->SignedUrls");

            var localVarPath = "./projects/{project}/jobs/{job}/signed-urls.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (job != null) localVarPathParams.Add("job", Configuration.ApiClient.ParameterToString(job)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignedUrls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Dictionary<string, string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> SignedUrlsAsync (string project, string job)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = await SignedUrlsAsyncWithHttpInfo(project, job);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="job">A unique identifier of a Job.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> SignedUrlsAsyncWithHttpInfo (string project, string job)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->SignedUrls");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling QcApi->SignedUrls");

            var localVarPath = "./projects/{project}/jobs/{job}/signed-urls.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (job != null) localVarPathParams.Add("job", Configuration.ApiClient.ParameterToString(job)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignedUrls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Dictionary<string, string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
        }

        /// <summary>
        /// Creates an upload session 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>UploadSession</returns>
        public UploadSession UploadVideo (string project, VideoUploadBody videoUploadBody)
        {
             ApiResponse<UploadSession> localVarResponse = UploadVideoWithHttpInfo(project, videoUploadBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an upload session 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>ApiResponse of UploadSession</returns>
        public ApiResponse< UploadSession > UploadVideoWithHttpInfo (string project, VideoUploadBody videoUploadBody)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->UploadVideo");
            // verify the required parameter 'videoUploadBody' is set
            if (videoUploadBody == null)
                throw new ApiException(400, "Missing required parameter 'videoUploadBody' when calling QcApi->UploadVideo");

            var localVarPath = "./projects/{project}/upload.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (videoUploadBody != null && videoUploadBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(videoUploadBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoUploadBody; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadVideo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UploadSession) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSession)));
        }

        /// <summary>
        /// Creates an upload session 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>Task of UploadSession</returns>
        public async System.Threading.Tasks.Task<UploadSession> UploadVideoAsync (string project, VideoUploadBody videoUploadBody)
        {
             ApiResponse<UploadSession> localVarResponse = await UploadVideoAsyncWithHttpInfo(project, videoUploadBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an upload session 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Qc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">A unique identifier of a Project.</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>Task of ApiResponse (UploadSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadSession>> UploadVideoAsyncWithHttpInfo (string project, VideoUploadBody videoUploadBody)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling QcApi->UploadVideo");
            // verify the required parameter 'videoUploadBody' is set
            if (videoUploadBody == null)
                throw new ApiException(400, "Missing required parameter 'videoUploadBody' when calling QcApi->UploadVideo");

            var localVarPath = "./projects/{project}/upload.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null) localVarPathParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // path parameter
            if (videoUploadBody != null && videoUploadBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(videoUploadBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoUploadBody; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadVideo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UploadSession) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSession)));
        }

    }
}
