/* 
 * Qc API
 *
 * QC API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Qc.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Qc.Model
{
    /// <summary>
    /// Template
    /// </summary>
    [DataContract]
    public partial class Template :  IEquatable<Template>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Template" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Produces">Produces.</param>
        /// <param name="Takes">Takes.</param>
        public Template(string Name = default(string), string Type = default(string), string Description = default(string), Dictionary<string, string> Produces = default(Dictionary<string, string>), Dictionary<string, string> Takes = default(Dictionary<string, string>))
        {
            this.Name = Name;
            this.Type = Type;
            this.Description = Description;
            this.Produces = Produces;
            this.Takes = Takes;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Produces
        /// </summary>
        [DataMember(Name="produces", EmitDefaultValue=false)]
        public Dictionary<string, string> Produces { get; set; }

        /// <summary>
        /// Gets or Sets Takes
        /// </summary>
        [DataMember(Name="takes", EmitDefaultValue=false)]
        public Dictionary<string, string> Takes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Template {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Produces: ").Append(Produces).Append("\n");
            sb.Append("  Takes: ").Append(Takes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Template);
        }

        /// <summary>
        /// Returns true if Template instances are equal
        /// </summary>
        /// <param name="input">Instance of Template to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Template input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Produces == input.Produces ||
                    this.Produces != null &&
                    this.Produces.SequenceEqual(input.Produces)
                ) && 
                (
                    this.Takes == input.Takes ||
                    this.Takes != null &&
                    this.Takes.SequenceEqual(input.Takes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Produces != null)
                    hashCode = hashCode * 59 + this.Produces.GetHashCode();
                if (this.Takes != null)
                    hashCode = hashCode * 59 + this.Takes.GetHashCode();
                return hashCode;
            }
        }
    }

}
