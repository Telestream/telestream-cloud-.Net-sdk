/* 
 * Qc API
 *
 * QC API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Qc.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Qc.Model
{
    /// <summary>
    /// VideoStream
    /// </summary>
    [DataContract]
    public partial class VideoStream :  IEquatable<VideoStream>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoStream" /> class.
        /// </summary>
        /// <param name="Duration">Video stream duration measured in seconds..</param>
        /// <param name="Codec">Codec.</param>
        /// <param name="Width">Width.</param>
        /// <param name="Height">Height.</param>
        /// <param name="Bitrate">Video stream bitrate measured in bps.</param>
        /// <param name="Fps">Fps.</param>
        public VideoStream(int? Duration = default(int?), string Codec = default(string), int? Width = default(int?), int? Height = default(int?), int? Bitrate = default(int?), decimal? Fps = default(decimal?))
        {
            this.Duration = Duration;
            this.Codec = Codec;
            this.Width = Width;
            this.Height = Height;
            this.Bitrate = Bitrate;
            this.Fps = Fps;
        }
        
        /// <summary>
        /// Video stream duration measured in seconds.
        /// </summary>
        /// <value>Video stream duration measured in seconds.</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// Gets or Sets Codec
        /// </summary>
        [DataMember(Name="codec", EmitDefaultValue=false)]
        public string Codec { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Video stream bitrate measured in bps
        /// </summary>
        /// <value>Video stream bitrate measured in bps</value>
        [DataMember(Name="bitrate", EmitDefaultValue=false)]
        public int? Bitrate { get; set; }

        /// <summary>
        /// Gets or Sets Fps
        /// </summary>
        [DataMember(Name="fps", EmitDefaultValue=false)]
        public decimal? Fps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VideoStream {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Codec: ").Append(Codec).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Bitrate: ").Append(Bitrate).Append("\n");
            sb.Append("  Fps: ").Append(Fps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VideoStream);
        }

        /// <summary>
        /// Returns true if VideoStream instances are equal
        /// </summary>
        /// <param name="input">Instance of VideoStream to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoStream input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Codec == input.Codec ||
                    (this.Codec != null &&
                    this.Codec.Equals(input.Codec))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Bitrate == input.Bitrate ||
                    (this.Bitrate != null &&
                    this.Bitrate.Equals(input.Bitrate))
                ) && 
                (
                    this.Fps == input.Fps ||
                    (this.Fps != null &&
                    this.Fps.Equals(input.Fps))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Codec != null)
                    hashCode = hashCode * 59 + this.Codec.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Bitrate != null)
                    hashCode = hashCode * 59 + this.Bitrate.GetHashCode();
                if (this.Fps != null)
                    hashCode = hashCode * 59 + this.Fps.GetHashCode();
                return hashCode;
            }
        }
    }

}
