/* 
 * Qc API
 *
 * QC API
 *
 * OpenAPI spec version: 2.0.3
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Qc.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Qc.Model
{
    /// <summary>
    /// Summary
    /// </summary>
    [DataContract]
    public partial class Summary :  IEquatable<Summary>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Summary" /> class.
        /// </summary>
        /// <param name="NumSyncEvents">Total number of synchronization detection events considered for summary..</param>
        /// <param name="AvsyncAnalysis">AvsyncAnalysis.</param>
        /// <param name="AvsyncInference">AvsyncInference.</param>
        /// <param name="Confidence">Confidence of avsync_inference and avsync_analysis. &#39;confidence&#39; is a value between 0 and 100. confidence &gt;&#x3D; 90  - Very high confidence. 80 &lt;&#x3D; confidence &lt; 90   - High confidence. 70 &lt;&#x3D; confidence &lt; 80   - Should be reviewed by human. .</param>
        /// <param name="Skew">Skew estimate in #frames; Skew is the number of frames that audio is delayed to the video.</param>
        /// <param name="TotalLength">TotalLength.</param>
        public Summary(int? NumSyncEvents = default(int?), string AvsyncAnalysis = default(string), string AvsyncInference = default(string), decimal? Confidence = default(decimal?), int? Skew = default(int?), decimal? TotalLength = default(decimal?))
        {
            this.NumSyncEvents = NumSyncEvents;
            this.AvsyncAnalysis = AvsyncAnalysis;
            this.AvsyncInference = AvsyncInference;
            this.Confidence = Confidence;
            this.Skew = Skew;
            this.TotalLength = TotalLength;
        }
        
        /// <summary>
        /// Total number of synchronization detection events considered for summary.
        /// </summary>
        /// <value>Total number of synchronization detection events considered for summary.</value>
        [DataMember(Name="num_sync_events", EmitDefaultValue=false)]
        public int? NumSyncEvents { get; set; }

        /// <summary>
        /// Gets or Sets AvsyncAnalysis
        /// </summary>
        [DataMember(Name="avsync_analysis", EmitDefaultValue=false)]
        public string AvsyncAnalysis { get; set; }

        /// <summary>
        /// Gets or Sets AvsyncInference
        /// </summary>
        [DataMember(Name="avsync_inference", EmitDefaultValue=false)]
        public string AvsyncInference { get; set; }

        /// <summary>
        /// Confidence of avsync_inference and avsync_analysis. &#39;confidence&#39; is a value between 0 and 100. confidence &gt;&#x3D; 90  - Very high confidence. 80 &lt;&#x3D; confidence &lt; 90   - High confidence. 70 &lt;&#x3D; confidence &lt; 80   - Should be reviewed by human. 
        /// </summary>
        /// <value>Confidence of avsync_inference and avsync_analysis. &#39;confidence&#39; is a value between 0 and 100. confidence &gt;&#x3D; 90  - Very high confidence. 80 &lt;&#x3D; confidence &lt; 90   - High confidence. 70 &lt;&#x3D; confidence &lt; 80   - Should be reviewed by human. </value>
        [DataMember(Name="confidence", EmitDefaultValue=false)]
        public decimal? Confidence { get; set; }

        /// <summary>
        /// Skew estimate in #frames; Skew is the number of frames that audio is delayed to the video
        /// </summary>
        /// <value>Skew estimate in #frames; Skew is the number of frames that audio is delayed to the video</value>
        [DataMember(Name="skew", EmitDefaultValue=false)]
        public int? Skew { get; set; }

        /// <summary>
        /// Gets or Sets TotalLength
        /// </summary>
        [DataMember(Name="total_length", EmitDefaultValue=false)]
        public decimal? TotalLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Summary {\n");
            sb.Append("  NumSyncEvents: ").Append(NumSyncEvents).Append("\n");
            sb.Append("  AvsyncAnalysis: ").Append(AvsyncAnalysis).Append("\n");
            sb.Append("  AvsyncInference: ").Append(AvsyncInference).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  Skew: ").Append(Skew).Append("\n");
            sb.Append("  TotalLength: ").Append(TotalLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Summary);
        }

        /// <summary>
        /// Returns true if Summary instances are equal
        /// </summary>
        /// <param name="input">Instance of Summary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Summary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumSyncEvents == input.NumSyncEvents ||
                    (this.NumSyncEvents != null &&
                    this.NumSyncEvents.Equals(input.NumSyncEvents))
                ) && 
                (
                    this.AvsyncAnalysis == input.AvsyncAnalysis ||
                    (this.AvsyncAnalysis != null &&
                    this.AvsyncAnalysis.Equals(input.AvsyncAnalysis))
                ) && 
                (
                    this.AvsyncInference == input.AvsyncInference ||
                    (this.AvsyncInference != null &&
                    this.AvsyncInference.Equals(input.AvsyncInference))
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    (this.Confidence != null &&
                    this.Confidence.Equals(input.Confidence))
                ) && 
                (
                    this.Skew == input.Skew ||
                    (this.Skew != null &&
                    this.Skew.Equals(input.Skew))
                ) && 
                (
                    this.TotalLength == input.TotalLength ||
                    (this.TotalLength != null &&
                    this.TotalLength.Equals(input.TotalLength))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumSyncEvents != null)
                    hashCode = hashCode * 59 + this.NumSyncEvents.GetHashCode();
                if (this.AvsyncAnalysis != null)
                    hashCode = hashCode * 59 + this.AvsyncAnalysis.GetHashCode();
                if (this.AvsyncInference != null)
                    hashCode = hashCode * 59 + this.AvsyncInference.GetHashCode();
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                if (this.Skew != null)
                    hashCode = hashCode * 59 + this.Skew.GetHashCode();
                if (this.TotalLength != null)
                    hashCode = hashCode * 59 + this.TotalLength.GetHashCode();
                return hashCode;
            }
        }
    }

}
