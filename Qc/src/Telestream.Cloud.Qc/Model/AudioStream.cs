/* 
 * Qc API
 *
 * QC API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Qc.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Qc.Model
{
    /// <summary>
    /// AudioStream
    /// </summary>
    [DataContract]
    public partial class AudioStream :  IEquatable<AudioStream>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AudioStream" /> class.
        /// </summary>
        /// <param name="Duration">Audio duration measured in seconds..</param>
        /// <param name="Codec">Audio codec name..</param>
        /// <param name="Channels">Number of audio channels..</param>
        /// <param name="Program">Program.</param>
        /// <param name="Bitrate">Audio bitrate measured in bps.</param>
        /// <param name="SampleRate">Sample rate measured in Hz..</param>
        public AudioStream(decimal? Duration = default(decimal?), string Codec = default(string), int? Channels = default(int?), string Program = default(string), int? Bitrate = default(int?), int? SampleRate = default(int?))
        {
            this.Duration = Duration;
            this.Codec = Codec;
            this.Channels = Channels;
            this.Program = Program;
            this.Bitrate = Bitrate;
            this.SampleRate = SampleRate;
        }
        
        /// <summary>
        /// Audio duration measured in seconds.
        /// </summary>
        /// <value>Audio duration measured in seconds.</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public decimal? Duration { get; set; }

        /// <summary>
        /// Audio codec name.
        /// </summary>
        /// <value>Audio codec name.</value>
        [DataMember(Name="codec", EmitDefaultValue=false)]
        public string Codec { get; set; }

        /// <summary>
        /// Number of audio channels.
        /// </summary>
        /// <value>Number of audio channels.</value>
        [DataMember(Name="channels", EmitDefaultValue=false)]
        public int? Channels { get; set; }

        /// <summary>
        /// Gets or Sets Program
        /// </summary>
        [DataMember(Name="program", EmitDefaultValue=false)]
        public string Program { get; set; }

        /// <summary>
        /// Audio bitrate measured in bps
        /// </summary>
        /// <value>Audio bitrate measured in bps</value>
        [DataMember(Name="bitrate", EmitDefaultValue=false)]
        public int? Bitrate { get; set; }

        /// <summary>
        /// Sample rate measured in Hz.
        /// </summary>
        /// <value>Sample rate measured in Hz.</value>
        [DataMember(Name="sample_rate", EmitDefaultValue=false)]
        public int? SampleRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudioStream {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Codec: ").Append(Codec).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("  Program: ").Append(Program).Append("\n");
            sb.Append("  Bitrate: ").Append(Bitrate).Append("\n");
            sb.Append("  SampleRate: ").Append(SampleRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudioStream);
        }

        /// <summary>
        /// Returns true if AudioStream instances are equal
        /// </summary>
        /// <param name="input">Instance of AudioStream to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudioStream input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Codec == input.Codec ||
                    (this.Codec != null &&
                    this.Codec.Equals(input.Codec))
                ) && 
                (
                    this.Channels == input.Channels ||
                    (this.Channels != null &&
                    this.Channels.Equals(input.Channels))
                ) && 
                (
                    this.Program == input.Program ||
                    (this.Program != null &&
                    this.Program.Equals(input.Program))
                ) && 
                (
                    this.Bitrate == input.Bitrate ||
                    (this.Bitrate != null &&
                    this.Bitrate.Equals(input.Bitrate))
                ) && 
                (
                    this.SampleRate == input.SampleRate ||
                    (this.SampleRate != null &&
                    this.SampleRate.Equals(input.SampleRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Codec != null)
                    hashCode = hashCode * 59 + this.Codec.GetHashCode();
                if (this.Channels != null)
                    hashCode = hashCode * 59 + this.Channels.GetHashCode();
                if (this.Program != null)
                    hashCode = hashCode * 59 + this.Program.GetHashCode();
                if (this.Bitrate != null)
                    hashCode = hashCode * 59 + this.Bitrate.GetHashCode();
                if (this.SampleRate != null)
                    hashCode = hashCode * 59 + this.SampleRate.GetHashCode();
                return hashCode;
            }
        }
    }

}
