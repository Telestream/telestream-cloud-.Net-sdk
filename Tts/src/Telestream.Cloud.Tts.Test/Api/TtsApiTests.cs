/* 
 * Tts API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Telestream.Cloud.Tts.Client;
using Telestream.Cloud.Tts.Api;
using Telestream.Cloud.Tts.Model;

namespace Telestream.Cloud.Tts.Test
{
    /// <summary>
    ///  Class for testing TtsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TtsApiTests
    {
        private TtsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TtsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TtsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TtsApi
            //Assert.IsInstanceOfType(typeof(TtsApi), instance, "instance is a TtsApi");
        }

        
        /// <summary>
        /// Test Corpora
        /// </summary>
        [Test]
        public void CorporaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //var response = instance.Corpora(projectID);
            //Assert.IsInstanceOf<CorporaCollection> (response, "response is CorporaCollection");
        }
        
        /// <summary>
        /// Test Corpus
        /// </summary>
        [Test]
        public void CorpusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //string name = null;
            //var response = instance.Corpus(projectID, name);
            //Assert.IsInstanceOf<Corpus> (response, "response is Corpus");
        }
        
        /// <summary>
        /// Test CreateCorpus
        /// </summary>
        [Test]
        public void CreateCorpusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //string name = null;
            //string body = null;
            //instance.CreateCorpus(projectID, name, body);
            
        }
        
        /// <summary>
        /// Test CreateJob
        /// </summary>
        [Test]
        public void CreateJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //Job job = null;
            //var response = instance.CreateJob(projectID, job);
            //Assert.IsInstanceOf<Job> (response, "response is Job");
        }
        
        /// <summary>
        /// Test CreateProject
        /// </summary>
        [Test]
        public void CreateProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Project project = null;
            //var response = instance.CreateProject(project);
            //Assert.IsInstanceOf<Project> (response, "response is Project");
        }
        
        /// <summary>
        /// Test DeleteCorpus
        /// </summary>
        [Test]
        public void DeleteCorpusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //string name = null;
            //instance.DeleteCorpus(projectID, name);
            
        }
        
        /// <summary>
        /// Test DeleteJob
        /// </summary>
        [Test]
        public void DeleteJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //string jobID = null;
            //instance.DeleteJob(projectID, jobID);
            
        }
        
        /// <summary>
        /// Test DeleteProject
        /// </summary>
        [Test]
        public void DeleteProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //instance.DeleteProject(projectID);
            
        }
        
        /// <summary>
        /// Test Job
        /// </summary>
        [Test]
        public void JobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //string jobID = null;
            //var response = instance.Job(projectID, jobID);
            //Assert.IsInstanceOf<Job> (response, "response is Job");
        }
        
        /// <summary>
        /// Test JobOutputs
        /// </summary>
        [Test]
        public void JobOutputsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //string jobID = null;
            //var response = instance.JobOutputs(projectID, jobID);
            //Assert.IsInstanceOf<List<JobOutput>> (response, "response is List<JobOutput>");
        }
        
        /// <summary>
        /// Test JobResult
        /// </summary>
        [Test]
        public void JobResultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //string jobID = null;
            //var response = instance.JobResult(projectID, jobID);
            //Assert.IsInstanceOf<JobResult> (response, "response is JobResult");
        }
        
        /// <summary>
        /// Test Jobs
        /// </summary>
        [Test]
        public void JobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.Jobs(projectID, page, perPage);
            //Assert.IsInstanceOf<JobsCollection> (response, "response is JobsCollection");
        }
        
        /// <summary>
        /// Test Project
        /// </summary>
        [Test]
        public void ProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //var response = instance.Project(projectID);
            //Assert.IsInstanceOf<Project> (response, "response is Project");
        }
        
        /// <summary>
        /// Test Projects
        /// </summary>
        [Test]
        public void ProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Projects();
            //Assert.IsInstanceOf<ProjectsCollection> (response, "response is ProjectsCollection");
        }
        
        /// <summary>
        /// Test TrainProject
        /// </summary>
        [Test]
        public void TrainProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //instance.TrainProject(projectID);
            
        }
        
        /// <summary>
        /// Test UpdateProject
        /// </summary>
        [Test]
        public void UpdateProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //Project project = null;
            //var response = instance.UpdateProject(projectID, project);
            //Assert.IsInstanceOf<Project> (response, "response is Project");
        }
        
        /// <summary>
        /// Test UploadVideo
        /// </summary>
        [Test]
        public void UploadVideoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectID = null;
            //VideoUploadBody videoUploadBody = null;
            //var response = instance.UploadVideo(projectID, videoUploadBody);
            //Assert.IsInstanceOf<UploadSession> (response, "response is UploadSession");
        }
        
    }

}
