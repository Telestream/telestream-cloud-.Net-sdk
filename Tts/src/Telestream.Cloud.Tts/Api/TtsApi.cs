/* 
 * Tts API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Telestream.Cloud.Tts.Client;
using Telestream.Cloud.Tts.Model;

namespace Telestream.Cloud.Tts.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITtsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns a collection of Corpora
        /// </summary>
        /// <remarks>
        /// Returns a collection of Corpora
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>CorporaCollection</returns>
        CorporaCollection Corpora (string projectID);

        /// <summary>
        /// Returns a collection of Corpora
        /// </summary>
        /// <remarks>
        /// Returns a collection of Corpora
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>ApiResponse of CorporaCollection</returns>
        ApiResponse<CorporaCollection> CorporaWithHttpInfo (string projectID);
        /// <summary>
        /// Returns the Corpus
        /// </summary>
        /// <remarks>
        /// Returns the Corpus
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns>Corpus</returns>
        Corpus Corpus (string projectID, string name);

        /// <summary>
        /// Returns the Corpus
        /// </summary>
        /// <remarks>
        /// Returns the Corpus
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns>ApiResponse of Corpus</returns>
        ApiResponse<Corpus> CorpusWithHttpInfo (string projectID, string name);
        /// <summary>
        /// Creates a new Corpus
        /// </summary>
        /// <remarks>
        /// Creates a new Corpus
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <param name="body"></param>
        /// <returns></returns>
        void CreateCorpus (string projectID, string name, string body);

        /// <summary>
        /// Creates a new Corpus
        /// </summary>
        /// <remarks>
        /// Creates a new Corpus
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateCorpusWithHttpInfo (string projectID, string name, string body);
        /// <summary>
        /// Creates a new Job
        /// </summary>
        /// <remarks>
        /// Creates a new Job
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="job"></param>
        /// <returns>Job</returns>
        Job CreateJob (string projectID, Job job);

        /// <summary>
        /// Creates a new Job
        /// </summary>
        /// <remarks>
        /// Creates a new Job
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="job"></param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> CreateJobWithHttpInfo (string projectID, Job job);
        /// <summary>
        /// Creates a new Project
        /// </summary>
        /// <remarks>
        /// Creates a new Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns>Project</returns>
        Project CreateProject (Project project);

        /// <summary>
        /// Creates a new Project
        /// </summary>
        /// <remarks>
        /// Creates a new Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> CreateProjectWithHttpInfo (Project project);
        /// <summary>
        /// Creates a new Corpus
        /// </summary>
        /// <remarks>
        /// Creates a new Corpus
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns></returns>
        void DeleteCorpus (string projectID, string name);

        /// <summary>
        /// Creates a new Corpus
        /// </summary>
        /// <remarks>
        /// Creates a new Corpus
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCorpusWithHttpInfo (string projectID, string name);
        /// <summary>
        /// Deletes the Job
        /// </summary>
        /// <remarks>
        /// Deletes the Job
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns></returns>
        void DeleteJob (string projectID, string jobID);

        /// <summary>
        /// Deletes the Job
        /// </summary>
        /// <remarks>
        /// Deletes the Job
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobWithHttpInfo (string projectID, string jobID);
        /// <summary>
        /// Deletes the Project
        /// </summary>
        /// <remarks>
        /// Deletes the Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns></returns>
        void DeleteProject (string projectID);

        /// <summary>
        /// Deletes the Project
        /// </summary>
        /// <remarks>
        /// Deletes the Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectWithHttpInfo (string projectID);
        /// <summary>
        /// Returns the Job
        /// </summary>
        /// <remarks>
        /// Returns the Job
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Job</returns>
        Job Job (string projectID, string jobID);

        /// <summary>
        /// Returns the Job
        /// </summary>
        /// <remarks>
        /// Returns the Job
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> JobWithHttpInfo (string projectID, string jobID);
        /// <summary>
        /// Returns the Job Outputs
        /// </summary>
        /// <remarks>
        /// Returns the Job Outputs
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>List&lt;JobOutput&gt;</returns>
        List<JobOutput> JobOutputs (string projectID, string jobID);

        /// <summary>
        /// Returns the Job Outputs
        /// </summary>
        /// <remarks>
        /// Returns the Job Outputs
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>ApiResponse of List&lt;JobOutput&gt;</returns>
        ApiResponse<List<JobOutput>> JobOutputsWithHttpInfo (string projectID, string jobID);
        /// <summary>
        /// Returns the Job Result
        /// </summary>
        /// <remarks>
        /// Returns the Job Result
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>JobResult</returns>
        JobResult JobResult (string projectID, string jobID);

        /// <summary>
        /// Returns the Job Result
        /// </summary>
        /// <remarks>
        /// Returns the Job Result
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>ApiResponse of JobResult</returns>
        ApiResponse<JobResult> JobResultWithHttpInfo (string projectID, string jobID);
        /// <summary>
        /// Returns a collection of Jobs
        /// </summary>
        /// <remarks>
        /// Returns a collection of Jobs
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="page">page number (optional)</param>
        /// <param name="perPage">number of records per page (optional)</param>
        /// <returns>JobsCollection</returns>
        JobsCollection Jobs (string projectID, int? page = null, int? perPage = null);

        /// <summary>
        /// Returns a collection of Jobs
        /// </summary>
        /// <remarks>
        /// Returns a collection of Jobs
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="page">page number (optional)</param>
        /// <param name="perPage">number of records per page (optional)</param>
        /// <returns>ApiResponse of JobsCollection</returns>
        ApiResponse<JobsCollection> JobsWithHttpInfo (string projectID, int? page = null, int? perPage = null);
        /// <summary>
        /// Returns the Project
        /// </summary>
        /// <remarks>
        /// Returns the Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Project</returns>
        Project Project (string projectID);

        /// <summary>
        /// Returns the Project
        /// </summary>
        /// <remarks>
        /// Returns the Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> ProjectWithHttpInfo (string projectID);
        /// <summary>
        /// Returns a collection of Projects
        /// </summary>
        /// <remarks>
        /// Returns a collection of Projects
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProjectsCollection</returns>
        ProjectsCollection Projects ();

        /// <summary>
        /// Returns a collection of Projects
        /// </summary>
        /// <remarks>
        /// Returns a collection of Projects
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProjectsCollection</returns>
        ApiResponse<ProjectsCollection> ProjectsWithHttpInfo ();
        /// <summary>
        /// Queues training
        /// </summary>
        /// <remarks>
        /// Queues training
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns></returns>
        void TrainProject (string projectID);

        /// <summary>
        /// Queues training
        /// </summary>
        /// <remarks>
        /// Queues training
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TrainProjectWithHttpInfo (string projectID);
        /// <summary>
        /// Updates an existing Project
        /// </summary>
        /// <remarks>
        /// Updates an existing Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="project"></param>
        /// <returns>Project</returns>
        Project UpdateProject (string projectID, Project project);

        /// <summary>
        /// Updates an existing Project
        /// </summary>
        /// <remarks>
        /// Updates an existing Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="project"></param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> UpdateProjectWithHttpInfo (string projectID, Project project);
        /// <summary>
        /// Creates an upload session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>UploadSession</returns>
        UploadSession UploadVideo (string projectID, VideoUploadBody videoUploadBody);

        /// <summary>
        /// Creates an upload session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>ApiResponse of UploadSession</returns>
        ApiResponse<UploadSession> UploadVideoWithHttpInfo (string projectID, VideoUploadBody videoUploadBody);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns a collection of Corpora
        /// </summary>
        /// <remarks>
        /// Returns a collection of Corpora
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of CorporaCollection</returns>
        System.Threading.Tasks.Task<CorporaCollection> CorporaAsync (string projectID);

        /// <summary>
        /// Returns a collection of Corpora
        /// </summary>
        /// <remarks>
        /// Returns a collection of Corpora
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of ApiResponse (CorporaCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<CorporaCollection>> CorporaAsyncWithHttpInfo (string projectID);
        /// <summary>
        /// Returns the Corpus
        /// </summary>
        /// <remarks>
        /// Returns the Corpus
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns>Task of Corpus</returns>
        System.Threading.Tasks.Task<Corpus> CorpusAsync (string projectID, string name);

        /// <summary>
        /// Returns the Corpus
        /// </summary>
        /// <remarks>
        /// Returns the Corpus
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns>Task of ApiResponse (Corpus)</returns>
        System.Threading.Tasks.Task<ApiResponse<Corpus>> CorpusAsyncWithHttpInfo (string projectID, string name);
        /// <summary>
        /// Creates a new Corpus
        /// </summary>
        /// <remarks>
        /// Creates a new Corpus
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateCorpusAsync (string projectID, string name, string body);

        /// <summary>
        /// Creates a new Corpus
        /// </summary>
        /// <remarks>
        /// Creates a new Corpus
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateCorpusAsyncWithHttpInfo (string projectID, string name, string body);
        /// <summary>
        /// Creates a new Job
        /// </summary>
        /// <remarks>
        /// Creates a new Job
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="job"></param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> CreateJobAsync (string projectID, Job job);

        /// <summary>
        /// Creates a new Job
        /// </summary>
        /// <remarks>
        /// Creates a new Job
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="job"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> CreateJobAsyncWithHttpInfo (string projectID, Job job);
        /// <summary>
        /// Creates a new Project
        /// </summary>
        /// <remarks>
        /// Creates a new Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> CreateProjectAsync (Project project);

        /// <summary>
        /// Creates a new Project
        /// </summary>
        /// <remarks>
        /// Creates a new Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> CreateProjectAsyncWithHttpInfo (Project project);
        /// <summary>
        /// Creates a new Corpus
        /// </summary>
        /// <remarks>
        /// Creates a new Corpus
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCorpusAsync (string projectID, string name);

        /// <summary>
        /// Creates a new Corpus
        /// </summary>
        /// <remarks>
        /// Creates a new Corpus
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCorpusAsyncWithHttpInfo (string projectID, string name);
        /// <summary>
        /// Deletes the Job
        /// </summary>
        /// <remarks>
        /// Deletes the Job
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobAsync (string projectID, string jobID);

        /// <summary>
        /// Deletes the Job
        /// </summary>
        /// <remarks>
        /// Deletes the Job
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobAsyncWithHttpInfo (string projectID, string jobID);
        /// <summary>
        /// Deletes the Project
        /// </summary>
        /// <remarks>
        /// Deletes the Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectAsync (string projectID);

        /// <summary>
        /// Deletes the Project
        /// </summary>
        /// <remarks>
        /// Deletes the Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectAsyncWithHttpInfo (string projectID);
        /// <summary>
        /// Returns the Job
        /// </summary>
        /// <remarks>
        /// Returns the Job
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> JobAsync (string projectID, string jobID);

        /// <summary>
        /// Returns the Job
        /// </summary>
        /// <remarks>
        /// Returns the Job
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> JobAsyncWithHttpInfo (string projectID, string jobID);
        /// <summary>
        /// Returns the Job Outputs
        /// </summary>
        /// <remarks>
        /// Returns the Job Outputs
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of List&lt;JobOutput&gt;</returns>
        System.Threading.Tasks.Task<List<JobOutput>> JobOutputsAsync (string projectID, string jobID);

        /// <summary>
        /// Returns the Job Outputs
        /// </summary>
        /// <remarks>
        /// Returns the Job Outputs
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of ApiResponse (List&lt;JobOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobOutput>>> JobOutputsAsyncWithHttpInfo (string projectID, string jobID);
        /// <summary>
        /// Returns the Job Result
        /// </summary>
        /// <remarks>
        /// Returns the Job Result
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of JobResult</returns>
        System.Threading.Tasks.Task<JobResult> JobResultAsync (string projectID, string jobID);

        /// <summary>
        /// Returns the Job Result
        /// </summary>
        /// <remarks>
        /// Returns the Job Result
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of ApiResponse (JobResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobResult>> JobResultAsyncWithHttpInfo (string projectID, string jobID);
        /// <summary>
        /// Returns a collection of Jobs
        /// </summary>
        /// <remarks>
        /// Returns a collection of Jobs
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="page">page number (optional)</param>
        /// <param name="perPage">number of records per page (optional)</param>
        /// <returns>Task of JobsCollection</returns>
        System.Threading.Tasks.Task<JobsCollection> JobsAsync (string projectID, int? page = null, int? perPage = null);

        /// <summary>
        /// Returns a collection of Jobs
        /// </summary>
        /// <remarks>
        /// Returns a collection of Jobs
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="page">page number (optional)</param>
        /// <param name="perPage">number of records per page (optional)</param>
        /// <returns>Task of ApiResponse (JobsCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobsCollection>> JobsAsyncWithHttpInfo (string projectID, int? page = null, int? perPage = null);
        /// <summary>
        /// Returns the Project
        /// </summary>
        /// <remarks>
        /// Returns the Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> ProjectAsync (string projectID);

        /// <summary>
        /// Returns the Project
        /// </summary>
        /// <remarks>
        /// Returns the Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> ProjectAsyncWithHttpInfo (string projectID);
        /// <summary>
        /// Returns a collection of Projects
        /// </summary>
        /// <remarks>
        /// Returns a collection of Projects
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProjectsCollection</returns>
        System.Threading.Tasks.Task<ProjectsCollection> ProjectsAsync ();

        /// <summary>
        /// Returns a collection of Projects
        /// </summary>
        /// <remarks>
        /// Returns a collection of Projects
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProjectsCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectsCollection>> ProjectsAsyncWithHttpInfo ();
        /// <summary>
        /// Queues training
        /// </summary>
        /// <remarks>
        /// Queues training
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TrainProjectAsync (string projectID);

        /// <summary>
        /// Queues training
        /// </summary>
        /// <remarks>
        /// Queues training
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrainProjectAsyncWithHttpInfo (string projectID);
        /// <summary>
        /// Updates an existing Project
        /// </summary>
        /// <remarks>
        /// Updates an existing Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="project"></param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> UpdateProjectAsync (string projectID, Project project);

        /// <summary>
        /// Updates an existing Project
        /// </summary>
        /// <remarks>
        /// Updates an existing Project
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="project"></param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> UpdateProjectAsyncWithHttpInfo (string projectID, Project project);
        /// <summary>
        /// Creates an upload session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>Task of UploadSession</returns>
        System.Threading.Tasks.Task<UploadSession> UploadVideoAsync (string projectID, VideoUploadBody videoUploadBody);

        /// <summary>
        /// Creates an upload session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>Task of ApiResponse (UploadSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadSession>> UploadVideoAsyncWithHttpInfo (string projectID, VideoUploadBody videoUploadBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TtsApi : ITtsApi
    {
        private Telestream.Cloud.Tts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TtsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TtsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Telestream.Cloud.Tts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TtsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TtsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Telestream.Cloud.Tts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Telestream.Cloud.Tts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns a collection of Corpora Returns a collection of Corpora
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>CorporaCollection</returns>
        public CorporaCollection Corpora (string projectID)
        {
             ApiResponse<CorporaCollection> localVarResponse = CorporaWithHttpInfo(projectID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of Corpora Returns a collection of Corpora
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>ApiResponse of CorporaCollection</returns>
        public ApiResponse< CorporaCollection > CorporaWithHttpInfo (string projectID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->Corpora");

            var localVarPath = "/projects/{projectID}/corpora";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Corpora", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CorporaCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CorporaCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CorporaCollection)));
        }

        /// <summary>
        /// Returns a collection of Corpora Returns a collection of Corpora
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of CorporaCollection</returns>
        public async System.Threading.Tasks.Task<CorporaCollection> CorporaAsync (string projectID)
        {
             ApiResponse<CorporaCollection> localVarResponse = await CorporaAsyncWithHttpInfo(projectID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of Corpora Returns a collection of Corpora
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of ApiResponse (CorporaCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CorporaCollection>> CorporaAsyncWithHttpInfo (string projectID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->Corpora");

            var localVarPath = "/projects/{projectID}/corpora";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Corpora", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CorporaCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CorporaCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CorporaCollection)));
        }

        /// <summary>
        /// Returns the Corpus Returns the Corpus
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns>Corpus</returns>
        public Corpus Corpus (string projectID, string name)
        {
             ApiResponse<Corpus> localVarResponse = CorpusWithHttpInfo(projectID, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Corpus Returns the Corpus
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns>ApiResponse of Corpus</returns>
        public ApiResponse< Corpus > CorpusWithHttpInfo (string projectID, string name)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->Corpus");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TtsApi->Corpus");

            var localVarPath = "/projects/{projectID}/corpora/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Corpus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Corpus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Corpus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Corpus)));
        }

        /// <summary>
        /// Returns the Corpus Returns the Corpus
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns>Task of Corpus</returns>
        public async System.Threading.Tasks.Task<Corpus> CorpusAsync (string projectID, string name)
        {
             ApiResponse<Corpus> localVarResponse = await CorpusAsyncWithHttpInfo(projectID, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Corpus Returns the Corpus
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns>Task of ApiResponse (Corpus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Corpus>> CorpusAsyncWithHttpInfo (string projectID, string name)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->Corpus");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TtsApi->Corpus");

            var localVarPath = "/projects/{projectID}/corpora/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Corpus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Corpus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Corpus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Corpus)));
        }

        /// <summary>
        /// Creates a new Corpus Creates a new Corpus
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <param name="body"></param>
        /// <returns></returns>
        public void CreateCorpus (string projectID, string name, string body)
        {
             CreateCorpusWithHttpInfo(projectID, name, body);
        }

        /// <summary>
        /// Creates a new Corpus Creates a new Corpus
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateCorpusWithHttpInfo (string projectID, string name, string body)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->CreateCorpus");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TtsApi->CreateCorpus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TtsApi->CreateCorpus");

            var localVarPath = "/projects/{projectID}/corpora/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCorpus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a new Corpus Creates a new Corpus
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateCorpusAsync (string projectID, string name, string body)
        {
             await CreateCorpusAsyncWithHttpInfo(projectID, name, body);

        }

        /// <summary>
        /// Creates a new Corpus Creates a new Corpus
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateCorpusAsyncWithHttpInfo (string projectID, string name, string body)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->CreateCorpus");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TtsApi->CreateCorpus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TtsApi->CreateCorpus");

            var localVarPath = "/projects/{projectID}/corpora/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCorpus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a new Job Creates a new Job
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="job"></param>
        /// <returns>Job</returns>
        public Job CreateJob (string projectID, Job job)
        {
             ApiResponse<Job> localVarResponse = CreateJobWithHttpInfo(projectID, job);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Job Creates a new Job
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="job"></param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > CreateJobWithHttpInfo (string projectID, Job job)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->CreateJob");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling TtsApi->CreateJob");

            var localVarPath = "/projects/{projectID}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (job != null && job.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(job); // http body (model) parameter
            }
            else
            {
                localVarPostBody = job; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Creates a new Job Creates a new Job
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="job"></param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> CreateJobAsync (string projectID, Job job)
        {
             ApiResponse<Job> localVarResponse = await CreateJobAsyncWithHttpInfo(projectID, job);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Job Creates a new Job
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="job"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> CreateJobAsyncWithHttpInfo (string projectID, Job job)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->CreateJob");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling TtsApi->CreateJob");

            var localVarPath = "/projects/{projectID}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (job != null && job.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(job); // http body (model) parameter
            }
            else
            {
                localVarPostBody = job; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Creates a new Project Creates a new Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns>Project</returns>
        public Project CreateProject (Project project)
        {
             ApiResponse<Project> localVarResponse = CreateProjectWithHttpInfo(project);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Project Creates a new Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns>ApiResponse of Project</returns>
        public ApiResponse< Project > CreateProjectWithHttpInfo (Project project)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling TtsApi->CreateProject");

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null && project.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(project); // http body (model) parameter
            }
            else
            {
                localVarPostBody = project; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Project>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Project) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
        }

        /// <summary>
        /// Creates a new Project Creates a new Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> CreateProjectAsync (Project project)
        {
             ApiResponse<Project> localVarResponse = await CreateProjectAsyncWithHttpInfo(project);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Project Creates a new Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"></param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Project>> CreateProjectAsyncWithHttpInfo (Project project)
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling TtsApi->CreateProject");

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (project != null && project.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(project); // http body (model) parameter
            }
            else
            {
                localVarPostBody = project; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Project>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Project) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
        }

        /// <summary>
        /// Creates a new Corpus Creates a new Corpus
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns></returns>
        public void DeleteCorpus (string projectID, string name)
        {
             DeleteCorpusWithHttpInfo(projectID, name);
        }

        /// <summary>
        /// Creates a new Corpus Creates a new Corpus
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCorpusWithHttpInfo (string projectID, string name)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->DeleteCorpus");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TtsApi->DeleteCorpus");

            var localVarPath = "/projects/{projectID}/corpora/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCorpus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a new Corpus Creates a new Corpus
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCorpusAsync (string projectID, string name)
        {
             await DeleteCorpusAsyncWithHttpInfo(projectID, name);

        }

        /// <summary>
        /// Creates a new Corpus Creates a new Corpus
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="name">Corpus name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCorpusAsyncWithHttpInfo (string projectID, string name)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->DeleteCorpus");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TtsApi->DeleteCorpus");

            var localVarPath = "/projects/{projectID}/corpora/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCorpus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the Job Deletes the Job
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns></returns>
        public void DeleteJob (string projectID, string jobID)
        {
             DeleteJobWithHttpInfo(projectID, jobID);
        }

        /// <summary>
        /// Deletes the Job Deletes the Job
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobWithHttpInfo (string projectID, string jobID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->DeleteJob");
            // verify the required parameter 'jobID' is set
            if (jobID == null)
                throw new ApiException(400, "Missing required parameter 'jobID' when calling TtsApi->DeleteJob");

            var localVarPath = "/projects/{projectID}/jobs/{jobID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (jobID != null) localVarPathParams.Add("jobID", Configuration.ApiClient.ParameterToString(jobID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the Job Deletes the Job
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobAsync (string projectID, string jobID)
        {
             await DeleteJobAsyncWithHttpInfo(projectID, jobID);

        }

        /// <summary>
        /// Deletes the Job Deletes the Job
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobAsyncWithHttpInfo (string projectID, string jobID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->DeleteJob");
            // verify the required parameter 'jobID' is set
            if (jobID == null)
                throw new ApiException(400, "Missing required parameter 'jobID' when calling TtsApi->DeleteJob");

            var localVarPath = "/projects/{projectID}/jobs/{jobID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (jobID != null) localVarPathParams.Add("jobID", Configuration.ApiClient.ParameterToString(jobID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the Project Deletes the Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns></returns>
        public void DeleteProject (string projectID)
        {
             DeleteProjectWithHttpInfo(projectID);
        }

        /// <summary>
        /// Deletes the Project Deletes the Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProjectWithHttpInfo (string projectID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->DeleteProject");

            var localVarPath = "/projects/{projectID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the Project Deletes the Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectAsync (string projectID)
        {
             await DeleteProjectAsyncWithHttpInfo(projectID);

        }

        /// <summary>
        /// Deletes the Project Deletes the Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectAsyncWithHttpInfo (string projectID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->DeleteProject");

            var localVarPath = "/projects/{projectID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns the Job Returns the Job
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Job</returns>
        public Job Job (string projectID, string jobID)
        {
             ApiResponse<Job> localVarResponse = JobWithHttpInfo(projectID, jobID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Job Returns the Job
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > JobWithHttpInfo (string projectID, string jobID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->Job");
            // verify the required parameter 'jobID' is set
            if (jobID == null)
                throw new ApiException(400, "Missing required parameter 'jobID' when calling TtsApi->Job");

            var localVarPath = "/projects/{projectID}/jobs/{jobID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (jobID != null) localVarPathParams.Add("jobID", Configuration.ApiClient.ParameterToString(jobID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Job", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Returns the Job Returns the Job
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> JobAsync (string projectID, string jobID)
        {
             ApiResponse<Job> localVarResponse = await JobAsyncWithHttpInfo(projectID, jobID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Job Returns the Job
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> JobAsyncWithHttpInfo (string projectID, string jobID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->Job");
            // verify the required parameter 'jobID' is set
            if (jobID == null)
                throw new ApiException(400, "Missing required parameter 'jobID' when calling TtsApi->Job");

            var localVarPath = "/projects/{projectID}/jobs/{jobID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (jobID != null) localVarPathParams.Add("jobID", Configuration.ApiClient.ParameterToString(jobID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Job", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Returns the Job Outputs Returns the Job Outputs
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>List&lt;JobOutput&gt;</returns>
        public List<JobOutput> JobOutputs (string projectID, string jobID)
        {
             ApiResponse<List<JobOutput>> localVarResponse = JobOutputsWithHttpInfo(projectID, jobID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Job Outputs Returns the Job Outputs
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>ApiResponse of List&lt;JobOutput&gt;</returns>
        public ApiResponse< List<JobOutput> > JobOutputsWithHttpInfo (string projectID, string jobID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->JobOutputs");
            // verify the required parameter 'jobID' is set
            if (jobID == null)
                throw new ApiException(400, "Missing required parameter 'jobID' when calling TtsApi->JobOutputs");

            var localVarPath = "/projects/{projectID}/jobs/{jobID}/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (jobID != null) localVarPathParams.Add("jobID", Configuration.ApiClient.ParameterToString(jobID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobOutputs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobOutput>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<JobOutput>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobOutput>)));
        }

        /// <summary>
        /// Returns the Job Outputs Returns the Job Outputs
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of List&lt;JobOutput&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobOutput>> JobOutputsAsync (string projectID, string jobID)
        {
             ApiResponse<List<JobOutput>> localVarResponse = await JobOutputsAsyncWithHttpInfo(projectID, jobID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Job Outputs Returns the Job Outputs
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of ApiResponse (List&lt;JobOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobOutput>>> JobOutputsAsyncWithHttpInfo (string projectID, string jobID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->JobOutputs");
            // verify the required parameter 'jobID' is set
            if (jobID == null)
                throw new ApiException(400, "Missing required parameter 'jobID' when calling TtsApi->JobOutputs");

            var localVarPath = "/projects/{projectID}/jobs/{jobID}/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (jobID != null) localVarPathParams.Add("jobID", Configuration.ApiClient.ParameterToString(jobID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobOutputs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobOutput>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<JobOutput>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobOutput>)));
        }

        /// <summary>
        /// Returns the Job Result Returns the Job Result
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>JobResult</returns>
        public JobResult JobResult (string projectID, string jobID)
        {
             ApiResponse<JobResult> localVarResponse = JobResultWithHttpInfo(projectID, jobID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Job Result Returns the Job Result
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>ApiResponse of JobResult</returns>
        public ApiResponse< JobResult > JobResultWithHttpInfo (string projectID, string jobID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->JobResult");
            // verify the required parameter 'jobID' is set
            if (jobID == null)
                throw new ApiException(400, "Missing required parameter 'jobID' when calling TtsApi->JobResult");

            var localVarPath = "/projects/{projectID}/jobs/{jobID}/result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (jobID != null) localVarPathParams.Add("jobID", Configuration.ApiClient.ParameterToString(jobID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobResult)));
        }

        /// <summary>
        /// Returns the Job Result Returns the Job Result
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of JobResult</returns>
        public async System.Threading.Tasks.Task<JobResult> JobResultAsync (string projectID, string jobID)
        {
             ApiResponse<JobResult> localVarResponse = await JobResultAsyncWithHttpInfo(projectID, jobID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Job Result Returns the Job Result
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="jobID"></param>
        /// <returns>Task of ApiResponse (JobResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobResult>> JobResultAsyncWithHttpInfo (string projectID, string jobID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->JobResult");
            // verify the required parameter 'jobID' is set
            if (jobID == null)
                throw new ApiException(400, "Missing required parameter 'jobID' when calling TtsApi->JobResult");

            var localVarPath = "/projects/{projectID}/jobs/{jobID}/result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (jobID != null) localVarPathParams.Add("jobID", Configuration.ApiClient.ParameterToString(jobID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobResult)));
        }

        /// <summary>
        /// Returns a collection of Jobs Returns a collection of Jobs
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="page">page number (optional)</param>
        /// <param name="perPage">number of records per page (optional)</param>
        /// <returns>JobsCollection</returns>
        public JobsCollection Jobs (string projectID, int? page = null, int? perPage = null)
        {
             ApiResponse<JobsCollection> localVarResponse = JobsWithHttpInfo(projectID, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of Jobs Returns a collection of Jobs
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="page">page number (optional)</param>
        /// <param name="perPage">number of records per page (optional)</param>
        /// <returns>ApiResponse of JobsCollection</returns>
        public ApiResponse< JobsCollection > JobsWithHttpInfo (string projectID, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->Jobs");

            var localVarPath = "/projects/{projectID}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Jobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobsCollection)));
        }

        /// <summary>
        /// Returns a collection of Jobs Returns a collection of Jobs
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="page">page number (optional)</param>
        /// <param name="perPage">number of records per page (optional)</param>
        /// <returns>Task of JobsCollection</returns>
        public async System.Threading.Tasks.Task<JobsCollection> JobsAsync (string projectID, int? page = null, int? perPage = null)
        {
             ApiResponse<JobsCollection> localVarResponse = await JobsAsyncWithHttpInfo(projectID, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of Jobs Returns a collection of Jobs
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="page">page number (optional)</param>
        /// <param name="perPage">number of records per page (optional)</param>
        /// <returns>Task of ApiResponse (JobsCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobsCollection>> JobsAsyncWithHttpInfo (string projectID, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->Jobs");

            var localVarPath = "/projects/{projectID}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Jobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobsCollection)));
        }

        /// <summary>
        /// Returns the Project Returns the Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Project</returns>
        public Project Project (string projectID)
        {
             ApiResponse<Project> localVarResponse = ProjectWithHttpInfo(projectID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Project Returns the Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>ApiResponse of Project</returns>
        public ApiResponse< Project > ProjectWithHttpInfo (string projectID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->Project");

            var localVarPath = "/projects/{projectID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Project", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Project>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Project) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
        }

        /// <summary>
        /// Returns the Project Returns the Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> ProjectAsync (string projectID)
        {
             ApiResponse<Project> localVarResponse = await ProjectAsyncWithHttpInfo(projectID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Project Returns the Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Project>> ProjectAsyncWithHttpInfo (string projectID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->Project");

            var localVarPath = "/projects/{projectID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Project", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Project>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Project) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
        }

        /// <summary>
        /// Returns a collection of Projects Returns a collection of Projects
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProjectsCollection</returns>
        public ProjectsCollection Projects ()
        {
             ApiResponse<ProjectsCollection> localVarResponse = ProjectsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of Projects Returns a collection of Projects
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProjectsCollection</returns>
        public ApiResponse< ProjectsCollection > ProjectsWithHttpInfo ()
        {

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Projects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsCollection)));
        }

        /// <summary>
        /// Returns a collection of Projects Returns a collection of Projects
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProjectsCollection</returns>
        public async System.Threading.Tasks.Task<ProjectsCollection> ProjectsAsync ()
        {
             ApiResponse<ProjectsCollection> localVarResponse = await ProjectsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of Projects Returns a collection of Projects
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProjectsCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectsCollection>> ProjectsAsyncWithHttpInfo ()
        {

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Projects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsCollection)));
        }

        /// <summary>
        /// Queues training Queues training
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns></returns>
        public void TrainProject (string projectID)
        {
             TrainProjectWithHttpInfo(projectID);
        }

        /// <summary>
        /// Queues training Queues training
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TrainProjectWithHttpInfo (string projectID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->TrainProject");

            var localVarPath = "/projects/{projectID}/train";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrainProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Queues training Queues training
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TrainProjectAsync (string projectID)
        {
             await TrainProjectAsyncWithHttpInfo(projectID);

        }

        /// <summary>
        /// Queues training Queues training
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrainProjectAsyncWithHttpInfo (string projectID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->TrainProject");

            var localVarPath = "/projects/{projectID}/train";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrainProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates an existing Project Updates an existing Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="project"></param>
        /// <returns>Project</returns>
        public Project UpdateProject (string projectID, Project project)
        {
             ApiResponse<Project> localVarResponse = UpdateProjectWithHttpInfo(projectID, project);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing Project Updates an existing Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="project"></param>
        /// <returns>ApiResponse of Project</returns>
        public ApiResponse< Project > UpdateProjectWithHttpInfo (string projectID, Project project)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->UpdateProject");
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling TtsApi->UpdateProject");

            var localVarPath = "/projects/{projectID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (project != null && project.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(project); // http body (model) parameter
            }
            else
            {
                localVarPostBody = project; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Project>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Project) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
        }

        /// <summary>
        /// Updates an existing Project Updates an existing Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="project"></param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> UpdateProjectAsync (string projectID, Project project)
        {
             ApiResponse<Project> localVarResponse = await UpdateProjectAsyncWithHttpInfo(projectID, project);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing Project Updates an existing Project
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="project"></param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Project>> UpdateProjectAsyncWithHttpInfo (string projectID, Project project)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->UpdateProject");
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling TtsApi->UpdateProject");

            var localVarPath = "/projects/{projectID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (project != null && project.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(project); // http body (model) parameter
            }
            else
            {
                localVarPostBody = project; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Project>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Project) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
        }

        /// <summary>
        /// Creates an upload session 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>UploadSession</returns>
        public UploadSession UploadVideo (string projectID, VideoUploadBody videoUploadBody)
        {
             ApiResponse<UploadSession> localVarResponse = UploadVideoWithHttpInfo(projectID, videoUploadBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an upload session 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>ApiResponse of UploadSession</returns>
        public ApiResponse< UploadSession > UploadVideoWithHttpInfo (string projectID, VideoUploadBody videoUploadBody)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->UploadVideo");
            // verify the required parameter 'videoUploadBody' is set
            if (videoUploadBody == null)
                throw new ApiException(400, "Missing required parameter 'videoUploadBody' when calling TtsApi->UploadVideo");

            var localVarPath = "/projects/{projectID}/jobs/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (videoUploadBody != null && videoUploadBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(videoUploadBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoUploadBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadVideo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UploadSession) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSession)));
        }

        /// <summary>
        /// Creates an upload session 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>Task of UploadSession</returns>
        public async System.Threading.Tasks.Task<UploadSession> UploadVideoAsync (string projectID, VideoUploadBody videoUploadBody)
        {
             ApiResponse<UploadSession> localVarResponse = await UploadVideoAsyncWithHttpInfo(projectID, videoUploadBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an upload session 
        /// </summary>
        /// <exception cref="Telestream.Cloud.Tts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">ID of the Project</param>
        /// <param name="videoUploadBody"></param>
        /// <returns>Task of ApiResponse (UploadSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadSession>> UploadVideoAsyncWithHttpInfo (string projectID, VideoUploadBody videoUploadBody)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling TtsApi->UploadVideo");
            // verify the required parameter 'videoUploadBody' is set
            if (videoUploadBody == null)
                throw new ApiException(400, "Missing required parameter 'videoUploadBody' when calling TtsApi->UploadVideo");

            var localVarPath = "/projects/{projectID}/jobs/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (videoUploadBody != null && videoUploadBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(videoUploadBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoUploadBody; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadVideo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UploadSession) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSession)));
        }

    }
}
