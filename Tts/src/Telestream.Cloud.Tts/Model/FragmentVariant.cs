/* 
 * Tts API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Tts.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Tts.Model
{
    /// <summary>
    /// FragmentVariant
    /// </summary>
    [DataContract]
    public partial class FragmentVariant :  IEquatable<FragmentVariant>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FragmentVariant" /> class.
        /// </summary>
        /// <param name="Fragment">An alternative hypothesis for a fragment from the input audio..</param>
        /// <param name="Confidence">The confidence score of the fragment variant hypothesis in the range of 0 to 1..</param>
        public FragmentVariant(string Fragment = default(string), decimal? Confidence = default(decimal?))
        {
            this.Fragment = Fragment;
            this.Confidence = Confidence;
        }
        
        /// <summary>
        /// An alternative hypothesis for a fragment from the input audio.
        /// </summary>
        /// <value>An alternative hypothesis for a fragment from the input audio.</value>
        [DataMember(Name="fragment", EmitDefaultValue=false)]
        public string Fragment { get; set; }

        /// <summary>
        /// The confidence score of the fragment variant hypothesis in the range of 0 to 1.
        /// </summary>
        /// <value>The confidence score of the fragment variant hypothesis in the range of 0 to 1.</value>
        [DataMember(Name="confidence", EmitDefaultValue=false)]
        public decimal? Confidence { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FragmentVariant {\n");
            sb.Append("  Fragment: ").Append(Fragment).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FragmentVariant);
        }

        /// <summary>
        /// Returns true if FragmentVariant instances are equal
        /// </summary>
        /// <param name="input">Instance of FragmentVariant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FragmentVariant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fragment == input.Fragment ||
                    (this.Fragment != null &&
                    this.Fragment.Equals(input.Fragment))
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    (this.Confidence != null &&
                    this.Confidence.Equals(input.Confidence))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fragment != null)
                    hashCode = hashCode * 59 + this.Fragment.GetHashCode();
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                return hashCode;
            }
        }
    }

}
