/* 
 * Tts API
 *
 * Description
 *
 * OpenAPI spec version: 3.1.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Tts.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Tts.Model
{
    /// <summary>
    /// Fragment
    /// </summary>
    [DataContract]
    public partial class Fragment :  IEquatable<Fragment>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Fragment" /> class.
        /// </summary>
        /// <param name="StartTime">The start time in seconds of the fragment from the input audio.</param>
        /// <param name="Variants">An array of FragmentVariants.</param>
        /// <param name="EndTime">The end time in seconds of the fragment from the input audio.</param>
        public Fragment(decimal? StartTime = default(decimal?), List<FragmentVariant> Variants = default(List<FragmentVariant>), decimal? EndTime = default(decimal?))
        {
            this.StartTime = StartTime;
            this.Variants = Variants;
            this.EndTime = EndTime;
        }
        
        /// <summary>
        /// The start time in seconds of the fragment from the input audio
        /// </summary>
        /// <value>The start time in seconds of the fragment from the input audio</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public decimal? StartTime { get; set; }

        /// <summary>
        /// An array of FragmentVariants
        /// </summary>
        /// <value>An array of FragmentVariants</value>
        [DataMember(Name="variants", EmitDefaultValue=false)]
        public List<FragmentVariant> Variants { get; set; }

        /// <summary>
        /// The end time in seconds of the fragment from the input audio
        /// </summary>
        /// <value>The end time in seconds of the fragment from the input audio</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public decimal? EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fragment {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Variants: ").Append(Variants).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fragment);
        }

        /// <summary>
        /// Returns true if Fragment instances are equal
        /// </summary>
        /// <param name="input">Instance of Fragment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fragment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Variants == input.Variants ||
                    this.Variants != null &&
                    this.Variants.SequenceEqual(input.Variants)
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.Variants != null)
                    hashCode = hashCode * 59 + this.Variants.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                return hashCode;
            }
        }
    }

}
