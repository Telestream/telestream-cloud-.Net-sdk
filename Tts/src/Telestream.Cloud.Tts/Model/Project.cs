/* 
 * Tts API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Telestream.Cloud.Tts.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Tts.Model
{
    /// <summary>
    /// Project
    /// </summary>
    [DataContract]
    public partial class Project :  IEquatable<Project>, IValidatableObject
    {
        /// <summary>
        /// Determines a stage of training.
        /// </summary>
        /// <value>Determines a stage of training.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Available for value: available
            /// </summary>
            [EnumMember(Value = "available")]
            Available = 1,
            
            /// <summary>
            /// Enum Modified for value: modified
            /// </summary>
            [EnumMember(Value = "modified")]
            Modified = 2,
            
            /// <summary>
            /// Enum Training for value: training
            /// </summary>
            [EnumMember(Value = "training")]
            Training = 3,
            
            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 4
        }

        /// <summary>
        /// Determines a stage of training.
        /// </summary>
        /// <value>Determines a stage of training.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Project" /> class.
        /// </summary>
        /// <param name="Id">The ID of the Project..</param>
        /// <param name="Name">The name of the Project..</param>
        /// <param name="Description">The description of the Project..</param>
        /// <param name="Status">Determines a stage of training..</param>
        /// <param name="Language">The language code of model..</param>
        /// <param name="SampleRate">The sample rate of model..</param>
        /// <param name="ProfanityFilter">If true, the service replaces profanity from output with asterisks..</param>
        /// <param name="GenerateProxy">Indicates whether video preview should be generated..</param>
        /// <param name="CustomWords">Words used for model training, separated by space..</param>
        /// <param name="Capabilities">Capabilities.</param>
        /// <param name="CreatedAt">A date and time when the project was created.</param>
        /// <param name="UpdatedAt">A date and time when the project was updated.</param>
        public Project(string Id = default(string), string Name = default(string), string Description = default(string), StatusEnum? Status = default(StatusEnum?), string Language = default(string), int? SampleRate = default(int?), bool? ProfanityFilter = default(bool?), bool? GenerateProxy = default(bool?), string CustomWords = default(string), List<string> Capabilities = default(List<string>), string CreatedAt = default(string), string UpdatedAt = default(string))
        {
            this.Id = Id;
            this.Name = Name;
            this.Description = Description;
            this.Status = Status;
            this.Language = Language;
            this.SampleRate = SampleRate;
            this.ProfanityFilter = ProfanityFilter;
            this.GenerateProxy = GenerateProxy;
            this.CustomWords = CustomWords;
            this.Capabilities = Capabilities;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// The ID of the Project.
        /// </summary>
        /// <value>The ID of the Project.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the Project.
        /// </summary>
        /// <value>The name of the Project.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the Project.
        /// </summary>
        /// <value>The description of the Project.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// The language code of model.
        /// </summary>
        /// <value>The language code of model.</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// The sample rate of model.
        /// </summary>
        /// <value>The sample rate of model.</value>
        [DataMember(Name="sample_rate", EmitDefaultValue=false)]
        public int? SampleRate { get; set; }

        /// <summary>
        /// If true, the service replaces profanity from output with asterisks.
        /// </summary>
        /// <value>If true, the service replaces profanity from output with asterisks.</value>
        [DataMember(Name="profanity_filter", EmitDefaultValue=false)]
        public bool? ProfanityFilter { get; set; }

        /// <summary>
        /// Indicates whether video preview should be generated.
        /// </summary>
        /// <value>Indicates whether video preview should be generated.</value>
        [DataMember(Name="generate_proxy", EmitDefaultValue=false)]
        public bool? GenerateProxy { get; set; }

        /// <summary>
        /// Words used for model training, separated by space.
        /// </summary>
        /// <value>Words used for model training, separated by space.</value>
        [DataMember(Name="custom_words", EmitDefaultValue=false)]
        public string CustomWords { get; set; }

        /// <summary>
        /// Gets or Sets Capabilities
        /// </summary>
        [DataMember(Name="capabilities", EmitDefaultValue=false)]
        public List<string> Capabilities { get; set; }

        /// <summary>
        /// A date and time when the project was created
        /// </summary>
        /// <value>A date and time when the project was created</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// A date and time when the project was updated
        /// </summary>
        /// <value>A date and time when the project was updated</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Project {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  SampleRate: ").Append(SampleRate).Append("\n");
            sb.Append("  ProfanityFilter: ").Append(ProfanityFilter).Append("\n");
            sb.Append("  GenerateProxy: ").Append(GenerateProxy).Append("\n");
            sb.Append("  CustomWords: ").Append(CustomWords).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Project);
        }

        /// <summary>
        /// Returns true if Project instances are equal
        /// </summary>
        /// <param name="input">Instance of Project to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Project input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.SampleRate == input.SampleRate ||
                    (this.SampleRate != null &&
                    this.SampleRate.Equals(input.SampleRate))
                ) && 
                (
                    this.ProfanityFilter == input.ProfanityFilter ||
                    (this.ProfanityFilter != null &&
                    this.ProfanityFilter.Equals(input.ProfanityFilter))
                ) && 
                (
                    this.GenerateProxy == input.GenerateProxy ||
                    (this.GenerateProxy != null &&
                    this.GenerateProxy.Equals(input.GenerateProxy))
                ) && 
                (
                    this.CustomWords == input.CustomWords ||
                    (this.CustomWords != null &&
                    this.CustomWords.Equals(input.CustomWords))
                ) && 
                (
                    this.Capabilities == input.Capabilities ||
                    this.Capabilities != null &&
                    this.Capabilities.SequenceEqual(input.Capabilities)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.SampleRate != null)
                    hashCode = hashCode * 59 + this.SampleRate.GetHashCode();
                if (this.ProfanityFilter != null)
                    hashCode = hashCode * 59 + this.ProfanityFilter.GetHashCode();
                if (this.GenerateProxy != null)
                    hashCode = hashCode * 59 + this.GenerateProxy.GetHashCode();
                if (this.CustomWords != null)
                    hashCode = hashCode * 59 + this.CustomWords.GetHashCode();
                if (this.Capabilities != null)
                    hashCode = hashCode * 59 + this.Capabilities.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
