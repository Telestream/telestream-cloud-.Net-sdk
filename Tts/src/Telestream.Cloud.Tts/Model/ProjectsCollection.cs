/* 
 * Tts API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Telestream.Cloud.Tts.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Tts.Model
{
    /// <summary>
    /// ProjectsCollection
    /// </summary>
    [DataContract]
    public partial class ProjectsCollection :  IEquatable<ProjectsCollection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsCollection" /> class.
        /// </summary>
        /// <param name="Projects">Projects.</param>
        /// <param name="Page">A number of the fetched page..</param>
        /// <param name="PerPage">A number of projects per page..</param>
        /// <param name="PageCount">A number of pages..</param>
        /// <param name="TotalCount">A number of all projects..</param>
        public ProjectsCollection(List<Project> Projects = default(List<Project>), int? Page = default(int?), int? PerPage = default(int?), int? PageCount = default(int?), int? TotalCount = default(int?))
        {
            this.Projects = Projects;
            this.Page = Page;
            this.PerPage = PerPage;
            this.PageCount = PageCount;
            this.TotalCount = TotalCount;
        }
        
        /// <summary>
        /// Gets or Sets Projects
        /// </summary>
        [DataMember(Name="projects", EmitDefaultValue=false)]
        public List<Project> Projects { get; set; }

        /// <summary>
        /// A number of the fetched page.
        /// </summary>
        /// <value>A number of the fetched page.</value>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public int? Page { get; set; }

        /// <summary>
        /// A number of projects per page.
        /// </summary>
        /// <value>A number of projects per page.</value>
        [DataMember(Name="per_page", EmitDefaultValue=false)]
        public int? PerPage { get; set; }

        /// <summary>
        /// A number of pages.
        /// </summary>
        /// <value>A number of pages.</value>
        [DataMember(Name="page_count", EmitDefaultValue=false)]
        public int? PageCount { get; set; }

        /// <summary>
        /// A number of all projects.
        /// </summary>
        /// <value>A number of all projects.</value>
        [DataMember(Name="total_count", EmitDefaultValue=false)]
        public int? TotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectsCollection {\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PerPage: ").Append(PerPage).Append("\n");
            sb.Append("  PageCount: ").Append(PageCount).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectsCollection);
        }

        /// <summary>
        /// Returns true if ProjectsCollection instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectsCollection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectsCollection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Projects == input.Projects ||
                    this.Projects != null &&
                    this.Projects.SequenceEqual(input.Projects)
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.PerPage == input.PerPage ||
                    (this.PerPage != null &&
                    this.PerPage.Equals(input.PerPage))
                ) && 
                (
                    this.PageCount == input.PageCount ||
                    (this.PageCount != null &&
                    this.PageCount.Equals(input.PageCount))
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    (this.TotalCount != null &&
                    this.TotalCount.Equals(input.TotalCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Projects != null)
                    hashCode = hashCode * 59 + this.Projects.GetHashCode();
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                if (this.PerPage != null)
                    hashCode = hashCode * 59 + this.PerPage.GetHashCode();
                if (this.PageCount != null)
                    hashCode = hashCode * 59 + this.PageCount.GetHashCode();
                if (this.TotalCount != null)
                    hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
