/* 
 * Tts API
 *
 * Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Tts.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Tts.Model
{
    /// <summary>
    /// VideoUploadBody
    /// </summary>
    [DataContract]
    public partial class VideoUploadBody :  IEquatable<VideoUploadBody>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoUploadBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VideoUploadBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoUploadBody" /> class.
        /// </summary>
        /// <param name="FileSize">Size of the file that will be uploaded in &#x60;bytes&#x60;. (required).</param>
        /// <param name="FileName">Name of the file that will be uploaded. (required).</param>
        /// <param name="Profiles">Profiles.</param>
        /// <param name="MultiChunk">MultiChunk (default to true).</param>
        /// <param name="ExtraFiles">A list of names of additional files that will be uploaded..</param>
        /// <param name="Job">Job.</param>
        public VideoUploadBody(long? FileSize = default(long?), string FileName = default(string), string Profiles = default(string), bool? MultiChunk = true, List<ExtraFile> ExtraFiles = default(List<ExtraFile>), Job Job = default(Job))
        {
            // to ensure "FileSize" is required (not null)
            if (FileSize == null)
            {
                throw new InvalidDataException("FileSize is a required property for VideoUploadBody and cannot be null");
            }
            else
            {
                this.FileSize = FileSize;
            }
            // to ensure "FileName" is required (not null)
            if (FileName == null)
            {
                throw new InvalidDataException("FileName is a required property for VideoUploadBody and cannot be null");
            }
            else
            {
                this.FileName = FileName;
            }
            this.Profiles = Profiles;
            // use default value if no "MultiChunk" provided
            if (MultiChunk == null)
            {
                this.MultiChunk = true;
            }
            else
            {
                this.MultiChunk = MultiChunk;
            }
            this.ExtraFiles = ExtraFiles;
            this.Job = Job;
        }
        
        /// <summary>
        /// Size of the file that will be uploaded in &#x60;bytes&#x60;.
        /// </summary>
        /// <value>Size of the file that will be uploaded in &#x60;bytes&#x60;.</value>
        [DataMember(Name="file_size", EmitDefaultValue=false)]
        public long? FileSize { get; set; }

        /// <summary>
        /// Name of the file that will be uploaded.
        /// </summary>
        /// <value>Name of the file that will be uploaded.</value>
        [DataMember(Name="file_name", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets Profiles
        /// </summary>
        [DataMember(Name="profiles", EmitDefaultValue=false)]
        public string Profiles { get; set; }

        /// <summary>
        /// Gets or Sets MultiChunk
        /// </summary>
        [DataMember(Name="multi_chunk", EmitDefaultValue=false)]
        public bool? MultiChunk { get; set; }

        /// <summary>
        /// A list of names of additional files that will be uploaded.
        /// </summary>
        /// <value>A list of names of additional files that will be uploaded.</value>
        [DataMember(Name="extra_files", EmitDefaultValue=false)]
        public List<ExtraFile> ExtraFiles { get; set; }

        /// <summary>
        /// Gets or Sets Job
        /// </summary>
        [DataMember(Name="job", EmitDefaultValue=false)]
        public Job Job { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VideoUploadBody {\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("  MultiChunk: ").Append(MultiChunk).Append("\n");
            sb.Append("  ExtraFiles: ").Append(ExtraFiles).Append("\n");
            sb.Append("  Job: ").Append(Job).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VideoUploadBody);
        }

        /// <summary>
        /// Returns true if VideoUploadBody instances are equal
        /// </summary>
        /// <param name="input">Instance of VideoUploadBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoUploadBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.Profiles == input.Profiles ||
                    (this.Profiles != null &&
                    this.Profiles.Equals(input.Profiles))
                ) && 
                (
                    this.MultiChunk == input.MultiChunk ||
                    (this.MultiChunk != null &&
                    this.MultiChunk.Equals(input.MultiChunk))
                ) && 
                (
                    this.ExtraFiles == input.ExtraFiles ||
                    this.ExtraFiles != null &&
                    this.ExtraFiles.SequenceEqual(input.ExtraFiles)
                ) && 
                (
                    this.Job == input.Job ||
                    (this.Job != null &&
                    this.Job.Equals(input.Job))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.Profiles != null)
                    hashCode = hashCode * 59 + this.Profiles.GetHashCode();
                if (this.MultiChunk != null)
                    hashCode = hashCode * 59 + this.MultiChunk.GetHashCode();
                if (this.ExtraFiles != null)
                    hashCode = hashCode * 59 + this.ExtraFiles.GetHashCode();
                if (this.Job != null)
                    hashCode = hashCode * 59 + this.Job.GetHashCode();
                return hashCode;
            }
        }
    }

}
