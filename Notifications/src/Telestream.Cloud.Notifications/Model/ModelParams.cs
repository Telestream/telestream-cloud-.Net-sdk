/* 
 * Notifications API
 *
 * Notifications API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Telestream.Cloud.Notifications.Client.SwaggerDateConverter;

namespace Telestream.Cloud.Notifications.Model
{
    /// <summary>
    /// ModelParams
    /// </summary>
    [DataContract]
    public partial class ModelParams :  IEquatable<ModelParams>
    {
        /// <summary>
        /// [optional] #webhook;  HTTP method; default: POST (GET, POST) 
        /// </summary>
        /// <value>[optional] #webhook;  HTTP method; default: POST (GET, POST) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            
            /// <summary>
            /// Enum GET for value: GET
            /// </summary>
            [EnumMember(Value = "GET")]
            GET = 1,
            
            /// <summary>
            /// Enum POST for value: POST
            /// </summary>
            [EnumMember(Value = "POST")]
            POST = 2
        }

        /// <summary>
        /// [optional] #webhook;  HTTP method; default: POST (GET, POST) 
        /// </summary>
        /// <value>[optional] #webhook;  HTTP method; default: POST (GET, POST) </value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelParams" /> class.
        /// </summary>
        /// <param name="Addresses">[required] #email;  E-mail addresses .</param>
        /// <param name="Url">[required] #webhook;  Webhook URL .</param>
        /// <param name="Method">[optional] #webhook;  HTTP method; default: POST (GET, POST) .</param>
        /// <param name="Retries">[optional] #webhook;  Number of retries before forgetting the notification; default: 0 .</param>
        /// <param name="ContentType">[optional] #webhook; default: application/json (application/json, application/x-www-form-urlencoded) .</param>
        public ModelParams(List<string> Addresses = default(List<string>), string Url = default(string), MethodEnum? Method = default(MethodEnum?), int? Retries = default(int?), string ContentType = default(string))
        {
            this.Addresses = Addresses;
            this.Url = Url;
            this.Method = Method;
            this.Retries = Retries;
            this.ContentType = ContentType;
        }
        
        /// <summary>
        /// [required] #email;  E-mail addresses 
        /// </summary>
        /// <value>[required] #email;  E-mail addresses </value>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<string> Addresses { get; set; }

        /// <summary>
        /// [required] #webhook;  Webhook URL 
        /// </summary>
        /// <value>[required] #webhook;  Webhook URL </value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }


        /// <summary>
        /// [optional] #webhook;  Number of retries before forgetting the notification; default: 0 
        /// </summary>
        /// <value>[optional] #webhook;  Number of retries before forgetting the notification; default: 0 </value>
        [DataMember(Name="retries", EmitDefaultValue=false)]
        public int? Retries { get; set; }

        /// <summary>
        /// [optional] #webhook; default: application/json (application/json, application/x-www-form-urlencoded) 
        /// </summary>
        /// <value>[optional] #webhook; default: application/json (application/json, application/x-www-form-urlencoded) </value>
        [DataMember(Name="content_type", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelParams {\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelParams);
        }

        /// <summary>
        /// Returns true if ModelParams instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelParams input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Retries == input.Retries ||
                    (this.Retries != null &&
                    this.Retries.Equals(input.Retries))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Retries != null)
                    hashCode = hashCode * 59 + this.Retries.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                return hashCode;
            }
        }
    }

}
