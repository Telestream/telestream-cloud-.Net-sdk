/* 
 * Notifications API
 *
 * Notifications API V2
 *
 * OpenAPI spec version: 2.1.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Telestream.Cloud.Notifications.Client;
using Telestream.Cloud.Notifications.Api;
using Telestream.Cloud.Notifications.Model;

namespace Telestream.Cloud.Notifications.Test
{
    /// <summary>
    ///  Class for testing NotificationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class NotificationsApiTests
    {
        private NotificationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new NotificationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of NotificationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' NotificationsApi
            //Assert.IsInstanceOfType(typeof(NotificationsApi), instance, "instance is a NotificationsApi");
        }

        
        /// <summary>
        /// Test CreateSubscription
        /// </summary>
        [Test]
        public void CreateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Subscription subscription = null;
            //var response = instance.CreateSubscription(subscription);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
        /// <summary>
        /// Test DeleteSubscription
        /// </summary>
        [Test]
        public void DeleteSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteSubscription(id);
            
        }
        
        /// <summary>
        /// Test GetSubscription
        /// </summary>
        [Test]
        public void GetSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetSubscription(id);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
        /// <summary>
        /// Test ListSubscriptions
        /// </summary>
        [Test]
        public void ListSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceType = null;
            //string type = null;
            //var response = instance.ListSubscriptions(serviceType, type);
            //Assert.IsInstanceOf<List<Subscription>> (response, "response is List<Subscription>");
        }
        
        /// <summary>
        /// Test ModifySubscription
        /// </summary>
        [Test]
        public void ModifySubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UpdateData updateData = null;
            //var response = instance.ModifySubscription(id, updateData);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
    }

}
